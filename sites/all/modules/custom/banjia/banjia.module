<?php
/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implements hook_menu().
 */
function banjia_menu() {
  $items = array();

  $items['admin/content/banjia'] = array(
    'title' => 'FIN D5-to-D7 migrate',
    'description' => 'Migrate data from D5 production to new D7 - Users, Search data, links between them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('banjia_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function banjia_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function banjia_form_submit($form, &$form_state) {
  ini_set('max_execution_time', 3600000);
  define('USER_RID_NONE', '2');

  $oldnew = array();
  $newold = array();
  $nameslist = array();
  $uidmaps = array();
  $resuming = FALSE;

  $trialnewroles = array(2, 6);
  $newroles = array(
    '1' => 'anonymous users',
    '2' => 'authenticated user',
    '3' => 'administrator',
    '4' => 'editor',
    '5' => 'author',
    '6' => 'Trial Member',
    '7' => 'Basic Member',
    '8' => 'Family Office',
  );

  $rolemap = array(
    '1' => array(1),
    '2' => array(2, 7),
    '3' => array(2, 3),
    '4' => array(2, 5),
    '5' => array(2, 4),
    '6' => array(2, 6),
    '7' => array(2, 7),
    '8' => array(2, 9),
  );

  db_set_active('legacy');
  $sql = "select uid from {users} WHERE uid>7";
  $result = db_query($sql);
  db_set_active();
  // Oids are all old keys in source table, noids keys we saved
  // We will use array_diff to tell us what ids have not been done yet.
  $oids = array();
  $res = array();
  foreach ($result as $row) {
    $res[$row->uid] = $row->uid;
  }
  if ($res) {
    $oids = array_values($res);
  }
  $noids = array();
  if (isset($newold)) {
    $noids = array_values($newold);
  }
  $stufftomove = TRUE;
  $partial = FALSE;
  if ($noids) {
    $getids = array_diff($oids, $noids);
    if (!$getids) {
      $stufftomove = FALSE;
    }
    else {
      $partial = TRUE;
    }
  }
  $sql = '';
  if ($partial && $stufftomove) {
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid in (" . implode(",", $getids) . ") order by uid";
  }
  elseif (!$partial && $stufftomove) {
    // We are starting fresh with a table, use simpler SQL.
    $getids = array_keys($oids);
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid > 777 order by uid";
  }

  if ($stufftomove) {
    db_set_active('legacy');
    $inusers = db_query($usql)->fetchAll();
    db_set_active();

    if ($inusers) {

      $motion = "Starting Fresh ";
      if ($partial) {
        $motion = "Resuming ";
      }
      $start = time();

      // First, extract all Trial Members.
      $trial_uids = array();
      $sql = "select uid from accounttypes_users where atid=2 or atid=4";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      foreach ($result as $row) {
        $trial_uids[$row->uid] = $row->uid;
      }

      $profilesarr = array();
      $sql = "select * from {profile_values}";

      db_set_active('legacy');
      $raw = db_query($sql);
      db_set_active();

      foreach ($raw as $row) {
        $profilesarr[$row->uid][$row->fid] = $row->value;
      }

      $sql = "select u.uid as uid,r.rid as role from {users_roles} u, {role} r where u.rid=r.rid";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      $roleres = array();
      foreach ($result as $row) {
        $roleres[$row->uid][$row->role] = $row->role;
      }
      $noroles = array();
      $rolesuids = array_keys($roleres);
      $noroles = array_diff($getids, $rolesuids);
      foreach ($noroles as $noRole) {
        $roleres[$noRole][USER_RID_NONE] = USER_RID_NONE;
      }

      db_set_active();
      $userres = array();

      /*
      * SALESFORCE - get list of Emails to query SF with
      */
      $emails = array();
      $getEmails = $inusers;
      foreach ($getEmails as $row) {
        $emails[] = $row->mail;
      }

      $sfdata = '';
      $mailmismatches_active = array();
      $mailmismatches_inactive = array();
      $statusactivetoinactive = array();
      $statusinactivetoactive = array();
      foreach ($inusers as $keyyyy => $row) {
        $profile = FALSE;
        if (!isset($sfdata[$row->mail])) {
          $lastname = '';
          $firstname = '';
          $companyname = '';
          if (isset($profilesarr[$row->uid][1])) {
            $firstname = $profilesarr[$row->uid][1];
          }
          if (isset($profilesarr[$row->uid][2])) {
            $lastname = $profilesarr[$row->uid][2];
          }
          if (isset($profilesarr[$row->uid][3])) {
            $companyname = $profilesarr[$row->uid][3];
          }
          $profile = array(
            'id' => 0,
            'email' => $row->mail,
            'firstname' => $firstname,
            'lastname' => $lastname,
            'company' => $companyname,
            'inactive' => $row->status,
            'expiry_date' => '',
            'expiry' => 0,
            'title' => '',
            'homephone' => '',
            'mobilephone' => '',
          );
          $message = "D5 email not in SF, so we use D5 data instead. Email: ".$row->mail."Data: ".print_r($profile,true);

        } else { // if no sf data available
          $profile = $sfdata[$row->mail];
        }

        $sfStatus = 0;

        $d5Status = $row->status;

        $finalStatus = 0;

        if ($profile['expiry']>0) {
          //fair game, determine status based on SF
          $now = time();
          if ($profile['expiry']>$now && !$profile['inactive']) {
            $sfStatus = 1;
            $finalStatus = 1;
          }

          // If D5 says active & SF says Inactive, or vice versa, report the conflict
          if ($sfStatus<>$d5Status) {
            if ($d5Status) {
              //drupal user going from active to inactive
              $statusactivetoinactive[$row->mail][] = $profile;
            }
            if ($sfStatus) {
              //drupal user going from inactive to active
              $statusinactivetoactive[$row->mail][] = $profile;
            }

            $profile['d5_status'] = $d5Status;
            $profile['sf_status'] = $sfStatus;
            $profile['final_status'] = $finalStatus;
            $sfStatusStr = "INACTIVE";
            if ($sfStatus) {
              $sfStatusStr = "ACTIVE";
            }
            $oldStatusStr = "INACTIVE";
            if ($row->status) {
              $oldStatusStr = "ACTIVE";
            }
            $message = t('D5 says user %firstname %lastname ( %email ) is %oldstatus but Salesforce says status is %sfstatus. Inactive: %inactive Expiration Date: %expiry',
              array(
                '%email' => $row->mail,
                '%firstname' => $profile['firstname'],
                '%lastname' => $profile['lastname'],
                '%sfstatus' => $sfStatusStr,
                '%oldstatus' => $oldStatusStr,
                '%expiry' => date('m-d-y', $profile['expiry']),
                '%inactive' => $profile['inactive'],
              )
            );

            if ($finalStatus) {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
            else {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
          }
        }
        else { // if there is no expiry or no sf data
          $finalStatus = $d5Status;
          if ($finalStatus) {
            $mailmismatches_active[$row->mail][] = $profile;
          }
          else {
            $mailmismatches_inactive[$row->mail][] = $profile;
          }
        }
 
        $usr = array(
          'uid'=>$row->uid,
          'name'=>$row->name,
          'mail'=>$row->mail,
          'pass'=>$row->pass,
          'status'=>$finalStatus,
          'login'=>$row->login,
          'created'=>$row->created,
        );
        $userres[$row->uid] = array_merge($usr, $profile);
        if ($keyyyy > 6018) {
        }
      }


      $rolesarr = array();
      foreach ($roleres as $uid => $roles) {
        $uidStr = (string) $uid;
        if (isset($trial_uids[$uidStr])) {
          foreach($trialnewroles as $newRid) {
            $newRidStr = (string) $newRid;
            $newRole = $newroles[$newRidStr];
            $rolesarr[$uidStr][$newRidStr] = $newRole;
          }
        } else {
          foreach ($roles as $rid) {
            $newRids = $rolemap[$rid];
            foreach ($newRids as $newRid) {
              $newRidStr = (string) $newRid;
              $ind = (string) $rid;
              $newRole = $newroles[$ind];
              $rolesarr[$uidStr][$newRidStr] = $newRole;
            }
          }
        }
      }

    }
  }
  $batch = array(
    'title' => t('Importing data'),
    'operations' => array(),
    'finished' => '_banjia_done',
  );
  foreach ($userres as $uid => $olduser) {

    if (empty($olduser['mail'])) {
      continue;
    }
    $uidstr = (string) $uid;
    $userroles = FALSE;
    if (isset($rolesarr[$uidstr])) {
      $userroles = $rolesarr[$uidstr];
    }
    $batch['operations'][] = array('_banjia_do_migrate_users',
      array($olduser, $userroles),
    );
  }
  batch_set($batch);

}

/**
 * Handle the close of batch.
 */
function _banjia_done() {
  $message = "DONE";
  watchdog('FIN_MIGRATE', $message, array(), WATCHDOG_INFO);
}

/**
 * Create user and realted node and entity.
 */
function _banjia_do_migrate_users(array $olduser, $userroles, &$context) {

  require_once 'includes/password.inc';

  $mail = (string) $olduser['mail'];
  if (substr($mail, 0, 1) == "@") {
    $oldmail = $mail;
    $mail = 'corrected' . $fname . '.' . $lname . $mail;
  }

  $uidstr = (string) $uid;
  $oldpass = (string) $olduser['pass'];
  $newpass = 'qapla';
  $noroles = FALSE;
  if ($userroles) {
    $fields = array(
      'name' => $olduser['name'],
      'mail' => $olduser['mail'],
      'pass' => $newpass,
      'status' => $olduser['status'],
      'init' => $olduser['mail'],
      'roles' => $userroles,
      'created' => $olduser['created'],
      'access' => $olduser['login'],
    );
  }
  else {
    $message = "This User " . print_r($olduser, TRUE) . " does not have any roles. Something went wrong here";
    watchdog('FIN_MIGRATE', $message, array(), WATCHDOG_WARNING);
    $fields = array(
      'name' => $olduser['name'],
      'mail' => $olduser['mail'],
      'pass' => $newpass,
      'status' => $olduser['status'],
      'init' => (string) $olduser['mail'],
      'created' => $olduser['created'],
      'login' => $olduser['login'],
    );
  }

  // 013116 - for some reason there is a duplicate key error, remedy here.
  $curuser = user_load_by_mail($olduser['mail']);
  $uname = $olduser['name'];
  if ($curuser) {
    return;
  }
  if (!$curuser) {
    $acct = new stdClass();
    $acct->active = 1;

    $curuser = user_save($acct, $fields);

    $newuid = (int) $curuser->uid;
    $context['message'] = 'New user created with user id ' . $newuid;
    $nameslist[$uname] = $uname;
    $newpass = user_hash_password($oldpass);
    if ($newpass) {
      // Indicate an updated password.
      $newpass  = 'U' . $newpass;
    }

    db_update('users')->fields(array('pass' => $newpass))->condition('uid', $curuser->uid)->execute();

    $oldnew[$uid] = $newuid;
    $newold[$newuid] = $uid;

    $uidmaps = array();
    $uidmaps['oldnew'] = $oldnew;
    $uidmaps['newold'] = $newold;
    $uidmaps['nameslist'] = $nameslist;
  }

  // Plw 0116 now take care of organization & profile2, extract bio data first.
  $message = '';
  $username = (string) $olduser['name'];
  $email = (string) $olduser['mail'];
  $lastname = $olduser['lastname'];
  $firstname = $olduser['firstname'];
  $companyname = $olduser['company'];

  $organization_nid = 0;
  if ($companyname) {
    $organization_nid = _banjia_get_entity_by_name('field_organization_name', $olduser['company'], 'organization', 'node');
    if (!$organization_nid) {
      try {
        $organization = entity_create('node',
          array('type' => 'organization', 'uid' => 1, 'status' => 1));
        $organization->field_organization_name[LANGUAGE_NONE][0]['value'] = $companyname;
        $organization->title = $companyname;
        entity_save('node', $organization);
        $organization_nid = $organization->nid;
        $message = t('Created new Organization %company from D5 Row: %data.',
          array(
            '%company' => $companyname,
            '%data' => print_r($row, TRUE),
          )
        );
      }
      catch (Exception $e) {
        $message = t('Failed to create organization %company from D5 Row: %data. Error: @msg<br /><br />%data',
           array(
             '%username' => $username,
             '%email' => $email,
             '%data' => print_r($row, TRUE),
             '@msg' => $e->getMessage(),
           )
         );
      }
      if ($message) {
        watchdog('FIN_MIGRATE_ORGANIZATION', $message, array(), WATCHDOG_INFO);
        $message = '';
      }
    }
  }

  $main_profile = banjia_profile2_by_uid_load($newuid, 'main');
  if (!$main_profile) {
    $main_profile = entity_create('profile2', array('type' => 'main', 'node'));
  }
  $action = 'Update';
  if ($main_profile->uid) {
    $action = 'Create';
  }
  try {
    if (!$main_profile->uid && $uid) {
      $main_profile->uid = $uid;
      $message = t('Profile attached to a User. This should only happen w/new profiles. User %username ( %email ) UID %uid',
        array(
          '%username' => $username,
          '%email' => $email,
          '%uid' => $newuid,
        )
      );
    }
    $main_profile->field_pf_first_name[LANGUAGE_NONE][0]['value'] = $olduser['firstname'];
    $main_profile->field_pf_last_name[LANGUAGE_NONE][0]['value'] = $olduser['lastname'];
    $main_profile->field_pf_job_title[LANGUAGE_NONE][0]['value'] = $olduser['title'];
    $main_profile->field_pf_expiration_date[LANGUAGE_NONE][0]['value'] = $olduser['expiry'];
    if ($organization_nid) {
      $main_profile->field_pf_organization[LANGUAGE_NONE][0]['target_id'] = $organization_nid;
    }
    entity_save('node', $main_profile);

    $message = t('Successfully %action profile for user %username ( %email ) from D5 Row: %data.',
      array(
        '%action' => $action . 'd',
        '%username' => $username,
        '%email' => $email,
        '%data' => print_r($row, TRUE),
      )
    );
  }
  catch (Exception $e) {
    $message = t('Failed to %action profile for user %username ( %email ) from D5 Row: %data. Error: @msg',
      array(
        '%action' => $action,
        '%username' => $username,
        '%email' => $email,
        '%data' => print_r($row, TRUE),
        '@msg' => $e->getMessage(),
      )
    );
  }
  if ($message) {
    watchdog('FIN_MIGRATE_PROFILE2', $message, array(), WATCHDOG_INFO);
    $message = '';
  }
}

/**
 * Create csv file.
 */
function _banjia_make_csv($inarr) {
  if ($inarr) {
    $arr = array(
      'firstname',
      'lastname',
      'company',
      'email',
      'inactive',
      'expiry_date',
    );

    $header = FALSE;
    foreach ($inarr as $row_raw) {
      $row = array();
      foreach ($arr as $fld) {
        $row[$fld] = $row_raw[0][$fld];
      }
      if (!$header) {
        $out[] = '"' . implode('" , "', array_keys($row)) . '"';
        $header = TRUE;
      }
      $vals = array_values($row);
      $out[] = '"' . implode('" , "', $vals) . '"';
    }
    return implode("\r\n", $out);
  }
  return FALSE;
}

/**
 * Get salesforce data via their API.
 */
function _banjia_get_sfdata($emails) {
  /*
   * Grab Salesforce datga
   */
  $params = array(
    'new-users' => array(
      'Contact' => array(
        'fields' => array(
          'Inactive__c' => 'inactive',
          'FINsearches_Expiration_New__c' => 'expiry',
          'FirstName' => 'firstname',
          'LastName' => 'lastname',
          'Email' => 'email' ,
          'Account.Name' => 'company',
          'Title' => 'title',
          'HomePhone' => 'homephone',
          'MobilePhone' => 'mobilephone',
        ),
        'types' => array(
          'Contact',
        ),
      ),
    ),
  );
  $sfapi = salesforce_get_api();
  $out = FALSE;
  foreach ($params as $pseudonym => $maps) {
    foreach ($maps as $sf_object_type => $map) {
      $mapped_fields = $map['fields'];
      $sf_object_type = $map['types'][0];
      $soql = new SalesforceSelectQuery($sf_object_type);

      // Convert field mappings to SOQL.
      $soql->fields = array('Id', 'LastModifiedDate');
      foreach ($mapped_fields as $field => $ignore) {
        $soql->fields[] = $field;
      }

      $chunks = array_chunk($emails, 400);
      foreach ($chunks as $chunk) {
        $soql->conditions = array();
        $soql->addCondition('Email', $chunk, 'IN');

        // Execute query.
        $results = $sfapi->query($soql);
        if (!isset($results['errorCode'])) {
          $rows = $results['records'];
          foreach ($rows as $row) {
            $email = $row['Email'];
            if ($email) {
              $arr = array();
              foreach ($row as $key => $val) {
                if ($key == "Account") {
                  $val = $val['Name'];
                  $alias = 'company';
                  $arr[$alias] = $val;
                }
                if (isset($mapped_fields[$key])) {
                  $alias = $mapped_fields[$key];
                  if ($alias == "expiry") {
                    $arr['expiry_date'] = $val;
                    $val = strtotime($val);
                  }
                  if ($alias == "company") {
                    $val = $val['Name'];
                  }
                  $arr[$alias] = $val;
                }
                elseif (($key == 'Id')) {
                  $arr['id'] = $val;
                }
              }
              $out[$email] = $arr;
            }
            else {
              $message = "MISSING EMAIL - Row: " . print_r($row, TRUE);
              watchdog('SF_MIGRATION_SF', $message, array(), WATCHDOG_ERROR);
            }
          }
        }
      } // if results
    } // each map
  } // all maps

  $message = "SF OUT: " . print_r($out, TRUE);
  watchdog('FIN_MIGRATE_SF', $message, array(), WATCHDOG_INFO);
  return $out;
}

/**
 * Load user by id.
 */
function banjia_profile2_by_uid_load($uid, $type_name) {
  if ($uid && is_numeric($uid) && ($account = user_load($uid))) {
    $profile = profile2_load_by_user($account, $type_name);
    if (!$profile) {
      $profile = profile2_create(array('type' => $type_name, 'uid' => $uid));
      $profile->setUser($account);
      $profile->is_new = TRUE;
    }
    return $profile;
  }
  return FALSE;
}

/**
 * Load entity by entity title, lable.
 */
function _banjia_get_entity_by_name($fieldname, $name, $bundle, $type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_organization_name', 'value', $name, '=');
  $result = $query->execute();

  $id = FALSE;
  if (isset($result['node'])) {
    $ids = array_keys($result['node']);
    if ($ids) {
      $id = $ids[0];
      return $id;
    }
  }
  return FALSE;
}
