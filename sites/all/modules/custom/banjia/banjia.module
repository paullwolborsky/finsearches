<?php
/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implements hook_menu().
 */
function banjia_menu() {
  $items = array();

  $items['admin/content/banjia'] = array(
    'title' => 'FIN D5-to-D7 migrate',
    'description' => 'Migrate data from D5 production to new D7 - Users, Search data, links between them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('banjia_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function banjia_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function banjia_user_batch_wrap(&$batch) {
  ini_set('max_execution_time', 3600000);
  define('BANJIA_USER_RID_NONE', '2');

  $oldnew = array();
  $newold = array();
  $nameslist = array();
  $uidmaps = array();
  $resuming = FALSE;

  $trialnewroles = array(2, 6);
  $newroles = array(
    '1' => 'anonymous users',
    '2' => 'authenticated user',
    '3' => 'administrator',
    '4' => 'editor',
    '5' => 'author',
    '6' => 'Trial Member',
    '7' => 'Basic Member',
    '8' => 'Family Office',
  );

  $rolemap = array(
    '1' => array(1),
    '2' => array(2, 7),
    '3' => array(2, 3),
    '4' => array(2, 5),
    '5' => array(2, 4),
    '6' => array(2, 6),
    '7' => array(2, 7),
    '8' => array(2, 9),
  );

  db_set_active('legacy');
  $sql = "select uid from {users} WHERE uid>7";
  $result = db_query($sql);
  db_set_active();
  // Oids are all old keys in source table, noids keys we saved
  // We will use array_diff to tell us what ids have not been done yet.
  $oids = array();
  $res = array();
  foreach ($result as $row) {
    $res[$row->uid] = $row->uid;
  }
  if ($res) {
    $oids = array_values($res);
  }
  $noids = array();
  if (isset($newold)) {
    $noids = array_values($newold);
  }
  $stufftomove = TRUE;
  $partial = FALSE;
  if ($noids) {
    $getids = array_diff($oids, $noids);
    if (!$getids) {
      $stufftomove = FALSE;
    }
    else {
      $partial = TRUE;
    }
  }
  $sql = '';
  if ($partial && $stufftomove) {
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid in (" . implode(",", $getids) . ") order by uid";
  }
  elseif (!$partial && $stufftomove) {
    // We are starting fresh with a table, use simpler SQL.
    $getids = array_keys($oids);
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid > 777 order by uid";
  }

  if ($stufftomove) {
    db_set_active('legacy');
    $inusers = db_query($usql)->fetchAll();
    db_set_active();

    if ($inusers) {

      $motion = "Starting Fresh ";
      if ($partial) {
        $motion = "Resuming ";
      }
      $start = time();

      // First, extract all Trial Members.
      $trial_uids = array();
      $sql = "select uid from accounttypes_users where atid=2 or atid=4";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      foreach ($result as $row) {
        $trial_uids[$row->uid] = $row->uid;
      }

      $profilesarr = array();
      $sql = "select * from {profile_values}";

      db_set_active('legacy');
      $raw = db_query($sql);
      db_set_active();

      foreach ($raw as $row) {
        $profilesarr[$row->uid][$row->fid] = $row->value;
      }

      $sql = "select u.uid as uid,r.rid as role from {users_roles} u, {role} r where u.rid=r.rid";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      $roleres = array();
      foreach ($result as $row) {
        $roleres[$row->uid][$row->role] = $row->role;
      }
      $noroles = array();
      $rolesuids = array_keys($roleres);
      $noroles = array_diff($getids, $rolesuids);
      foreach ($noroles as $norole) {
        $roleres[$norole][BANJIA_USER_RID_NONE] = BANJIA_USER_RID_NONE;
      }

      db_set_active();
      $userres = array();

      // SALESFORCE - get list of Emails to query SF with.
      $emails = array();
      $getemails = $inusers;
      foreach ($getemails as $row) {
        $emails[] = $row->mail;
      }

      $sfdata = '';
      $mailmismatches_active = array();
      $mailmismatches_inactive = array();
      $statusactivetoinactive = array();
      $statusinactivetoactive = array();
      foreach ($inusers as $keyyyy => $row) {
        $profile = FALSE;
        if (!isset($sfdata[$row->mail])) {
          $lastname = '';
          $firstname = '';
          $companyname = '';
          if (isset($profilesarr[$row->uid][1])) {
            $firstname = $profilesarr[$row->uid][1];
          }
          if (isset($profilesarr[$row->uid][2])) {
            $lastname = $profilesarr[$row->uid][2];
          }
          if (isset($profilesarr[$row->uid][3])) {
            $companyname = $profilesarr[$row->uid][3];
          }
          $profile = array(
            'id' => 0,
            'email' => $row->mail,
            'firstname' => $firstname,
            'lastname' => $lastname,
            'company' => $companyname,
            'inactive' => $row->status,
            'expiry_date' => '',
            'expiry' => 0,
            'title' => '',
            'homephone' => '',
            'mobilephone' => '',
          );
          $message = "D5 email not in SF, so we use D5 data instead. Email: " . $row->mail . "Data: " . print_r($profile, TRUE);

        }
        else {
          $profile = $sfdata[$row->mail];
        }

        $sfstatus = 0;

        $d5status = $row->status;

        $finalstatus = 0;

        if ($profile['expiry'] > 0) {
          // Determine status based on SF.
          $now = time();
          if ($profile['expiry'] > $now && !$profile['inactive']) {
            $sfstatus = 1;
            $finalstatus = 1;
          }

          // If D5 says active & SF says Inactive, or vice versa,
          // report the conflict.
          if ($sfstatus <> $d5status) {
            if ($d5status) {
              // Drupal user going from active to inactive.
              $statusactivetoinactive[$row->mail][] = $profile;
            }
            if ($sfstatus) {
              // Drupal user going from inactive to active.
              $statusinactivetoactive[$row->mail][] = $profile;
            }

            $profile['d5_status'] = $d5status;
            $profile['sf_status'] = $sfstatus;
            $profile['final_status'] = $finalstatus;
            $sfstatusstr = "INACTIVE";
            if ($sfstatus) {
              $sfstatusstr = "ACTIVE";
            }
            $oldstatusstr = "INACTIVE";
            if ($row->status) {
              $oldstatusstr = "ACTIVE";
            }
            $message = t('D5 says user %firstname %lastname ( %email ) is %oldstatus but Salesforce says status is %sfstatus. Inactive: %inactive Expiration Date: %expiry',
              array(
                '%email' => $row->mail,
                '%firstname' => $profile['firstname'],
                '%lastname' => $profile['lastname'],
                '%sfstatus' => $sfstatusstr,
                '%oldstatus' => $oldstatusstr,
                '%expiry' => date('m-d-y', $profile['expiry']),
                '%inactive' => $profile['inactive'],
              )
            );

            if ($finalstatus) {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
            else {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
          }
        }
        else {
          // If there is no expiry or no sf data.
          $finalstatus = $d5status;
          if ($finalstatus) {
            $mailmismatches_active[$row->mail][] = $profile;
          }
          else {
            $mailmismatches_inactive[$row->mail][] = $profile;
          }
        }

        $usr = array(
          'uid' => $row->uid,
          'name' => $row->name,
          'mail' => $row->mail,
          'pass' => $row->pass,
          'status' => $finalstatus,
          'login' => $row->login,
          'created' => $row->created,
        );
        $userres[$row->uid] = array_merge($usr, $profile);
        if ($keyyyy > 6018) {
        }
      }

      $rolesarr = array();
      foreach ($roleres as $uid => $roles) {
        $uidstr = (string) $uid;
        if (isset($trial_uids[$uidstr])) {
          foreach ($trialnewroles as $newrid) {
            $newridstr = (string) $newrid;
            $newrole = $newroles[$newridstr];
            $rolesarr[$uidstr][$newridstr] = $newrole;
          }
        }
        else {
          foreach ($roles as $rid) {
            $newrids = $rolemap[$rid];
            foreach ($newrids as $newrid) {
              $newridstr = (string) $newrid;
              $ind = (string) $rid;
              $newrole = $newroles[$ind];
              $rolesarr[$uidstr][$newridstr] = $newrole;
            }
          }
        }
      }

    }
  }
  foreach ($userres as $uid => $olduser) {
    if (empty($olduser['mail'])) {
      continue;
    }
    $uidstr = (string) $uid;
    $userroles = FALSE;
    if (isset($rolesarr[$uidstr])) {
      $userroles = $rolesarr[$uidstr];
    }
    $batch['operations'][] = array('_banjia_do_migrate_users',
      array($olduser, $userroles),
    );
  }
}
/**
 * Implements hook_form_submit().
 */
function banjia_form_submit($form, &$form_state) {
  $batch = array(
    'title' => t('Importing data'),
    'operations' => array(),
    'finished' => '_banjia_done',
  );
  $state_user = banjia_user_batch_wrap($batch);
  $state_node_part_1 = banjia_fin_migrate_do_node_step1($batch);
  batch_set($batch);
}

/**
 * Handle the close of batch.
 */
function _banjia_done() {
  $message = "DONE";
  watchdog('FIN_MIGRATE', $message, array(), WATCHDOG_INFO);
}

/**
 * Create user and realted node and entity.
 */
function _banjia_do_migrate_users(array $olduser, $userroles, &$context) {

  require_once 'includes/password.inc';

  $mail = (string) $olduser['mail'];
  if (substr($mail, 0, 1) == "@") {
    $oldmail = $mail;
    $mail = 'corrected' . $fname . '.' . $lname . $mail;
  }

  $oldpass = (string) $olduser['pass'];
  $newpass = 'qapla';
  $noroles = FALSE;
  if ($userroles) {
    $fields = array(
      'name' => $olduser['name'],
      'mail' => $olduser['mail'],
      'pass' => $newpass,
      'status' => $olduser['status'],
      'init' => $olduser['mail'],
      'roles' => $userroles,
      'created' => $olduser['created'],
      'access' => $olduser['login'],
    );
  }
  else {
    $message = "This User " . print_r($olduser, TRUE) . " does not have any roles. Something went wrong here";
    watchdog('FIN_MIGRATE', $message, array(), WATCHDOG_WARNING);
    $fields = array(
      'name' => $olduser['name'],
      'mail' => $olduser['mail'],
      'pass' => $newpass,
      'status' => $olduser['status'],
      'init' => (string) $olduser['mail'],
      'created' => $olduser['created'],
      'login' => $olduser['login'],
    );
  }

  // 013116 - for some reason there is a duplicate key error, remedy here.
  $curuser = user_load_by_mail($olduser['mail']);
  $uname = $olduser['name'];
  if ($curuser) {
    return;
  }
  if (!$curuser) {
    $acct = new stdClass();
    $acct->active = 1;

    $curuser = user_save($acct, $fields);

    $newuid = (int) $curuser->uid;
    $context['message'] = 'New user created with user id ' . $newuid;
    $nameslist[$uname] = $uname;
    $newpass = user_hash_password($oldpass);
    if ($newpass) {
      // Indicate an updated password.
      $newpass  = 'U' . $newpass;
    }

    db_update('users')->fields(array('pass' => $newpass))->condition('uid', $curuser->uid)->execute();

    $oldnew[$uid] = $newuid;
    $newold[$newuid] = $uid;

    $uidmaps = array();
    $uidmaps['oldnew'] = $oldnew;
    $uidmaps['newold'] = $newold;
    $uidmaps['nameslist'] = $nameslist;
  }

  // Plw 0116 now take care of organization & profile2, extract bio data first.
  $message = '';
  $username = (string) $olduser['name'];
  $email = (string) $olduser['mail'];
  $lastname = $olduser['lastname'];
  $firstname = $olduser['firstname'];
  $companyname = $olduser['company'];

  $organization_nid = 0;
  if ($companyname) {
    $organization_nid = _banjia_get_entity_by_name('field_organization_name', $olduser['company'], 'organization', 'node');
    if (!$organization_nid) {
      try {
        $organization = entity_create('node',
          array('type' => 'organization', 'uid' => 1, 'status' => 1));
        $organization->field_organization_name[LANGUAGE_NONE][0]['value'] = $companyname;
        $organization->title = $companyname;
        entity_save('node', $organization);
        $organization_nid = $organization->nid;
        $message = t('Created new Organization %company from D5 Row: %data.',
          array(
            '%company' => $companyname,
            '%data' => print_r($row, TRUE),
          )
        );
      }
      catch (Exception $e) {
        $message = t('Failed to create organization %company from D5 Row: %data. Error: @msg<br /><br />%data',
           array(
             '%username' => $username,
             '%email' => $email,
             '%data' => print_r($row, TRUE),
             '@msg' => $e->getMessage(),
           )
         );
      }
      if ($message) {
        watchdog('FIN_MIGRATE_ORGANIZATION', $message, array(), WATCHDOG_INFO);
        $message = '';
      }
    }
  }

  $main_profile = banjia_profile2_by_uid_load($newuid, 'main');
  if (!$main_profile) {
    $main_profile = entity_create('profile2', array('type' => 'main', 'node'));
  }
  $action = 'Update';
  if ($main_profile->uid) {
    $action = 'Create';
  }
  try {
    if (!$main_profile->uid && $uid) {
      $main_profile->uid = $uid;
      $message = t('Profile attached to a User. This should only happen w/new profiles. User %username ( %email ) UID %uid',
        array(
          '%username' => $username,
          '%email' => $email,
          '%uid' => $newuid,
        )
      );
    }
    $main_profile->field_pf_first_name[LANGUAGE_NONE][0]['value'] = $olduser['firstname'];
    $main_profile->field_pf_last_name[LANGUAGE_NONE][0]['value'] = $olduser['lastname'];
    $main_profile->field_pf_job_title[LANGUAGE_NONE][0]['value'] = $olduser['title'];
    $main_profile->field_pf_expiration_date[LANGUAGE_NONE][0]['value'] = $olduser['expiry'];
    if ($organization_nid) {
      $main_profile->field_pf_organization[LANGUAGE_NONE][0]['target_id'] = $organization_nid;
    }
    entity_save('node', $main_profile);

    $message = t('Successfully %action profile for user %username ( %email ) from D5 Row: %data.',
      array(
        '%action' => $action . 'd',
        '%username' => $username,
        '%email' => $email,
        '%data' => print_r($row, TRUE),
      )
    );
  }
  catch (Exception $e) {
    $message = t('Failed to %action profile for user %username ( %email ) from D5 Row: %data. Error: @msg',
      array(
        '%action' => $action,
        '%username' => $username,
        '%email' => $email,
        '%data' => print_r($row, TRUE),
        '@msg' => $e->getMessage(),
      )
    );
  }
  if ($message) {
    watchdog('FIN_MIGRATE_PROFILE2', $message, array(), WATCHDOG_INFO);
    $message = '';
  }
}

/**
 * Create csv file.
 */
function _banjia_make_csv($inarr) {
  if ($inarr) {
    $arr = array(
      'firstname',
      'lastname',
      'company',
      'email',
      'inactive',
      'expiry_date',
    );

    $header = FALSE;
    foreach ($inarr as $row_raw) {
      $row = array();
      foreach ($arr as $fld) {
        $row[$fld] = $row_raw[0][$fld];
      }
      if (!$header) {
        $out[] = '"' . implode('" , "', array_keys($row)) . '"';
        $header = TRUE;
      }
      $vals = array_values($row);
      $out[] = '"' . implode('" , "', $vals) . '"';
    }
    return implode("\r\n", $out);
  }
  return FALSE;
}

/**
 * Get salesforce data via their API.
 */
function _banjia_get_sfdata($emails) {
  /*
   * Grab Salesforce datga
   */
  $params = array(
    'new-users' => array(
      'Contact' => array(
        'fields' => array(
          'Inactive__c' => 'inactive',
          'FINsearches_Expiration_New__c' => 'expiry',
          'FirstName' => 'firstname',
          'LastName' => 'lastname',
          'Email' => 'email' ,
          'Account.Name' => 'company',
          'Title' => 'title',
          'HomePhone' => 'homephone',
          'MobilePhone' => 'mobilephone',
        ),
        'types' => array(
          'Contact',
        ),
      ),
    ),
  );
  $sfapi = salesforce_get_api();
  $out = FALSE;
  foreach ($params as $pseudonym => $maps) {
    foreach ($maps as $sf_object_type => $map) {
      $mapped_fields = $map['fields'];
      $sf_object_type = $map['types'][0];
      $soql = new SalesforceSelectQuery($sf_object_type);

      // Convert field mappings to SOQL.
      $soql->fields = array('Id', 'LastModifiedDate');
      foreach ($mapped_fields as $field => $ignore) {
        $soql->fields[] = $field;
      }

      $chunks = array_chunk($emails, 400);
      foreach ($chunks as $chunk) {
        $soql->conditions = array();
        $soql->addCondition('Email', $chunk, 'IN');

        // Execute query.
        $results = $sfapi->query($soql);
        if (!isset($results['errorCode'])) {
          $rows = $results['records'];
          foreach ($rows as $row) {
            $email = $row['Email'];
            if ($email) {
              $arr = array();
              foreach ($row as $key => $val) {
                if ($key == "Account") {
                  $val = $val['Name'];
                  $alias = 'company';
                  $arr[$alias] = $val;
                }
                if (isset($mapped_fields[$key])) {
                  $alias = $mapped_fields[$key];
                  if ($alias == "expiry") {
                    $arr['expiry_date'] = $val;
                    $val = strtotime($val);
                  }
                  if ($alias == "company") {
                    $val = $val['Name'];
                  }
                  $arr[$alias] = $val;
                }
                elseif (($key == 'Id')) {
                  $arr['id'] = $val;
                }
              }
              $out[$email] = $arr;
            }
            else {
              $message = "MISSING EMAIL - Row: " . print_r($row, TRUE);
              watchdog('SF_MIGRATION_SF', $message, array(), WATCHDOG_ERROR);
            }
          }
        }
      } // if results
    } // each map
  } // all maps

  $message = "SF OUT: " . print_r($out, TRUE);
  watchdog('FIN_MIGRATE_SF', $message, array(), WATCHDOG_INFO);
  return $out;
}

/**
 * Load user by id.
 */
function banjia_profile2_by_uid_load($uid, $type_name) {
  if ($uid && is_numeric($uid) && ($account = user_load($uid))) {
    $profile = profile2_load_by_user($account, $type_name);
    if (!$profile) {
      $profile = profile2_create(array('type' => $type_name, 'uid' => $uid));
      $profile->setUser($account);
      $profile->is_new = TRUE;
    }
    return $profile;
  }
  return FALSE;
}

/**
 * Load entity by entity title, lable.
 */
function _banjia_get_entity_by_name($fieldname, $name, $bundle, $type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_organization_name', 'value', $name, '=');
  $result = $query->execute();

  $id = FALSE;
  if (isset($result['node'])) {
    $ids = array_keys($result['node']);
    if ($ids) {
      $id = $ids[0];
      return $id;
    }
  }
  return FALSE;
}

/**
 * Creates the node.
 */
function banjia_part_one_create_node($pseudonym, $row, $checkName, $nameFldName, $nameNids = NULL, &$context) {
            $id = $row->$pKeyName;
            $nid = 0;
            // are we setting up contacts? Does this contact-by-email-address exist?
            if ($checkName) {
              $contactName = $row->{$nameFldName};
              if (isset($nameNids[$contactName])) {
                $nid = $nameNids[$contactName]['nid'];
                if ($nid) {
                  $message = "Contact exist. ".$pseudonym." Name ".$contactName." Update NID: ".$nid." | ID: ".$id;
                  watchdog('FIN_MIGRATE_NODE_CONTACT_NAME_MULTIPLE', $message, array(), WATCHDOG_INFO);
                  $contactMatches[] = '"'.$contactName.'", "'.$id.'", "'.$nid.'"';
              
                  $duplicates[$nid]['name'][$contactName][$id] = array(
                    'id' => $id,
                    'nid' => $nid,
                    'name' => $contactName,
                    'type' => $dst,
                    'bundle' => $bundle,
                  );
                 // variable_set('fin-migrate-step1-duplicates', serialize($duplicates));
                }
              }
            }
            if (!$nid) {
              $createdMsg = '';
              $created = strtotime($row->CreatedOn);
              $changed = strtotime($row->UpdatedOn);
              if ($created<0 or !is_numeric($created)) {
                $bad = $created;
                $created = $changed;
                if ($created<0 or !is_numeric($created)) {  
                  $bad2 = $created;
                  $created = time();
                  $changed = $created;
                  $createdMsg = 'Type: '.$dst.' Movement: '.$pseudonym.' Email: '.$email.' | '.'Src Created Date ['.$bad.'] bad. So is Changed ['.$bad2.']. Both set to current ['.strtotime($created).']';
                } else {
                  $createdMsg = 'Type: '.$dst.' Movement: '.$pseudonym.' Email: '.$email.' | '.'Src Created Date ['.$bad.'] bad. Assigned Change Date ['.$changed.']';
                }
              } else if ($changed<0 or !is_numeric($created)) {
                $bad = $changed;
                $changed = $created;
                $createdMsg = 'Type: '.$dst.' Movement: '.$pseudonym.' Email: '.$email.' | '.'Src Changed Date ['.$bad.'] bad. Assigned Created Date ['.$created.']';
              }
              
              $values = array(
                'title' => $pseudonym ."-".$id,
                'type' => $dst,
                'uid' => 1,
                'status' => 1,
                'promote' => 0,
                'created' => $created,
                'changed' => $changed,
              );
              $entity = entity_create('node', $values);
              $n_wrapper = entity_metadata_wrapper('node', $entity);
              $n_wrapper->save();

              $context['message'] = 'Created a new ' . $n_wrapper->value()->type . '  node with nid ' . $n_wrapper->value()->nid;
         
            }
   else {
              //$message = "Oops, for some reason, node not successfully created | id: ".$id." | nid: ".$nid." | Data: ".print_r($row,true);
              //watchdog('FIN_MIGRATE_NODE_STEP1', $message, array(), WATCHDOG_WARNING);
        
            } // if row produced ids
          } // each row


/**
 * Node part one batch wrapper.
 */
function banjia_fin_migrate_do_node_step1(&$batch) {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit','1024M');

  // Get Parameters
  $nodeMapArr = banjia_get_nodemaps('step1');
  $movement = 0;
  $howManyMovements = count($nodeMapArr);
  foreach ($nodeMapArr as $mapArr) {
    foreach ($mapArr as $pseudonym => $map) {
      $movement++;

      //if this is resuming, grab current old new map
      $oldNew = array();
      $newOld = array();
      $variable = 'fin-migrate-node';
      $oldNews = banjia_fin_migrate_get_best_map($variable);
      if ($oldNews) {
        $oldNew = unserialize($oldNews['oldnew']);
        $newOld = unserialize($oldNews['newold']);
      }

      $params = $map['params'];
      $table = $params['oldtable'];
      $dst = $params['dst'];
      $pKeyName = $params['oldkeyfldname'];    
      $bundle = '';
      if (isset($params['bundle'])) {
        $bundle = $params['bundle'];
      }

      $checkName = FALSE;
      $nameNids = array();
      $multiplesTotal = FALSE;
      if (isset($params['checkname'])) {
        $nameFldName = $params['checkname']['fldname'];
        $nameNids = unserialize(variable_get('fin-migrate-contact-contactnames'));
        $multiplesTotal = unserialize(variable_get('fin-migrate-contact-contactnames_total'));
        if (!$nameNids) {
          $sql = "SELECT COUNT(*) AS cnt, ".$nameFldName." AS name FROM {".$table."} WHERE ".$nameFldName." <> '' GROUP BY ".$nameFldName." HAVING count( ".$nameFldName." ) >1";
          db_set_active('legacy');
          $res = db_query($sql);
          db_set_active();
          if ($res) {
            $multiplesTotal = 0;
            foreach ($res as $rw) {
              $name = $rw->name;
              $cnt = $rw->cnt-1;
              $multiplesTotal += $cnt-1;
              $nameNids[$name] = array(
                'cnt' => $cnt, 
                'hits' => 0,
                 'nid' => 0
              );
            }
//            variable_set('fin-migrate-contact-contactnames', serialize($nameNids));          
//            variable_set('fin-migrate-contact-contactnames_total', serialize($multiplesTotal));          
          }
        }
        $checkName = TRUE;
      }
      // see what ids to draw from a table
      db_set_active('legacy');
      $sql = "select ".$pKeyName." from {".$table."}";
      $result = db_query($sql);
      db_set_active();
      // oids are all old keys in source table, noids keys we saved
      // We will use array_diff to tell us what ids have not been done
      // yet.
      $oids = array();
      $res = array();

      foreach ($result as $row) {
        $res[$row->$pKeyName] = $row->$pKeyName;
      }
      if ($res) {
        $oids = array_values($res);
      }
      $noids = array();
      if (isset($newOld[$pseudonym])) {
        $raw = $newOld[$pseudonym];
        $nid2ids = array();
        foreach ($raw as $nid => $more) {
          foreach ($more as $delta=>$yetmore) {
            foreach ($yetmore as $id) {
              $noids[$id] = $id;
              $nid2ids[$nid][] = $id;
            }
          }
        }
      }
      $stuffToMove = TRUE;
      $partial = FALSE;

      if ($noids) {
        $getids = array_diff($oids, $noids);


        if (!$getids) {
          $stuffToMove = FALSE;
        } else {
          $partial = TRUE;
        }
      }
      $sql = '';
      if ($partial && $stuffToMove) {
        $sql = "select * from {".$table."} where ".$pKeyName." in (".implode(',',$getids).")";
      } else if (!$partial && $stuffToMove) {
        // we are starting fresh with a table, use simpler SQL
        $getids = array_keys($oids);
        $sql = "select * from {".$table."}";
      }

      if ($stuffToMove) {
        $duplicates = array();
        if ($duplicates = unserialize(variable_get('fin-migrate-step1-duplicates'))) {
        }
        db_set_active('legacy');
        $result = db_query($sql);
        db_set_active();

        if ($result) {
          $rowCount = 0;
          if ($getids) {
            $howManyRows = count($getids);
          } else {
            $howManyRows = count($oids)-count($noids);
          }
          $motion = "Moving ";
          if ($partial) {
            $motion = "Resuming ";
          }
          $message = $motion . $pseudonym." SOURCE (".count($oids).") | MOVED: ".count($noids)." | MOVING: ".$howManyRows;
          watchdog('FIN_MIGRATE_NODE-'.$pseudonym, $message, array(), WATCHDOG_INFO);
          $prefix = "Step (1/2) Movement (".$movement."/".$howManyMovements.") ".$message;

          $rowCount = 0;
          $start = time();
          
          $contactMatches = array();
          $nodesCreated = 0;
          foreach ($result as $row) {
            $batch['operations'][] = array('banjia_part_one_create_node',
              array($pseudonym, $row, $checkName, $nameFldName, $nameNids),
            );
          } // each row
        } // if result
      }
    } // foreach pseudonym
  }
return TRUE;
}

/**
 * Get content field mapping for migration.
 */
function banjia_get_nodemaps($mode='step1') {

$nm_co = array(
    'office' => array(
      'params' => array(
        'oldtable' => 'tblconsultantoffices',
        'oldkeyfldname' => 'ConsultantOfficeID',
        'dst' => 'office',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantOfficeName'), 
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantOfficeName'),
        ),
        'lu2term' => array(
          'field_office_type_tr' => array('fldname'=>'OfficeType'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'reference' => array(
          'field_consultant_firm_er'=>array('fldname'=>'ConsultantFirmID'),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'ZIP'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  $nm_cf = array(
    'consultant firm' => array(
      'params' => array(
        'oldtable' => 'tblconsultantfirms',
        'oldkeyfldname' => 'ConsultantFirmID',
        'dst'=>'consultant_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantFirmName'),
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
          'field_aua' => array('fldname'=>'AUA'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'inactive2term' => array(
          'field_status_tr' => array('fldname'=>'Inactive'),
        ),
      ),
    ),
  );

  //'ldtable' => 'tblfunds',
  $nm_p = array(
    'plan' => array(
      'params' => array(
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'FundName'),
          ),
          'node-body' => array(
            'body' => array(),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'FundName'),
          'field_plan_acronym' => array('fldname'=>'Acronym'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink', 'title'=>'Placement Policy'),
        ),
        'lu2term' => array(
          'field_placement_policy_tr' => array('fldname'=>'PlacementPolicy'),
          'field_plan_type_tr' => array('fldname'=>'FundTypeID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
          'field_status_tr' => array('fldname'=>'Status', 'voc'=>'5'),
        ),          
        'text2email' => array(
           'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
        'collection' => array(
          'field_asset_allocation_history' => array(
            'params' => array(
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'finsearch_asset_allocations',
                  'rowkeyfldname' => 'allocation_id',                  
                  'key-alias' => 'firm_id',
                  'onerow' => 'TRUE',
                  'onerowkeyname' => 'asset_class_id',
                  'onerowfldname' => 'percentage',
                ),
                'fields' => array(
                  'asset-allocation' => array(
                    'automatically-determined' => array('fldname'=>'percentage', 'keyfldname'=>'asset_class_id'),
                  ),
                ),
              ),
            ),              
          ),
          'field_consultants_hired' => array(
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundconsultants',
                  'rowkeyfldname' => 'FundConsultantID',
                ),
                'fields' => array(
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_managers_hired' => array(
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundmanagers',
                  'rowkeyfldname' => 'FundManagerID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_plan_size_history' => array(
            'params' => array(
            ),
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundSizeAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_foia_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                ),
                'fields' => array(
                  'mixed2link' => array(
                    'field_foia_form' => array('fldname'=>'FOIAForm')
                  ),
                  'foia2notes' => array(
                    'field_foia_notes' => array('names'=>array('FOIAMethod', 'FOIAForm'))
                  ),
                  'default' => array(
                    'field_full_name' => array('fldname'=>'FOIAContactName'),
                    'field_foia_required' => array('fldname'=>'FOIA'),
                    'field_foia_date' => array('fldname'=>'FOIADate'),                  
                  ),
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );

  $nm_contact = array(
    'contact' => array(
      'params' => array(
        'dst'=>'contact',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'job-history' => array(
          'field_job_history' => array(
            'params' => array(
              'sourcearray' => 'global_empDates',
            ),
            'bundles' => array(
              'consultant_contact' => array(
                'params' => array(
                  'bundle'=>'consultant_contact',
                  'rowkeyfldname'=>'ConsultantContactID',
                ),
                'fields' => array(
                  'default'=>array(
                    'field_job_title'=>array('fldname'=>'Title'),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantType'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ConsultantContactID', 
                      'tbl'=>'tblconsultantcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
              'manager_contact' => array(
                'params' => array(
                  'bundle'=>'manager_contact',
                  'rowkeyfldname' => 'ManagerContactID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ManagerContactID', 
                      'tbl'=>'tblmanagercontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ContactType'),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
              'plan_contact' => array(
                'params'=> array(
                  'oldtable' => 'tblFundContacts',
                  'oldkeyfldname' => 'FundContactID',
                  'bundle' => 'plan_contact',
                  'sort' => array('fldname'=>'field_employment_date'),
                ),
                'fields' => array(
                  'default' => array(
                    'title_field' => array('fldname'=>'ContactName'),
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'FundContactID', 
                      'tbl'=>'tblFundcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),       
                  'address' => array(
                    'field_address' => array(
                      'params' => array(
                        'oldtable' => 'tblManagerFirms',
                        'oldkeyfldname' => 'ManagerFirmID',
                      ),
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_cc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblconsultantcontacts',
        'oldkeyfldname' => 'ConsultantContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'bundle'=>'consultant_contact',
                  'rowkeyfldname'=>'ConsultantContactID',
                ),
                'fields' => array(
                  'default'=>array(
                    'field_job_title'=>array('fldname'=>'Title'),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantType'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ConsultantContactID', 
                      'tbl'=>'tblconsultantcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_mc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblmanagercontacts',
        'oldkeyfldname' => 'ManagerContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'bundle'=>'manager_contact',
                  'rowkeyfldname' => 'ManagerContactID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ManagerContactID', 
                      'tbl'=>'tblmanagercontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ContactType'),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_pc = array(
    'fund contact' => array(
      'params' => array(
        'oldtable' => 'tblfundcontacts',
        'oldkeyfldname' => 'FundContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),      
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(            
              array(
                'params'=> array(
                  'oldtable' => 'tblFundContacts',
                  'oldkeyfldname' => 'FundContactID',
                  'bundle' => 'plan_contact',
                  'sort' => array('fldname'=>'field_employment_date'),
                ),
                'fields' => array(
                  'default' => array(
                    'title_field' => array('fldname'=>'ContactName'),
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'FundContactID', 
                      'tbl'=>'tblFundcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),       
                  'address' => array(
                    'field_address' => array(
                      'params' => array(
                        'oldtable' => 'tblManagerFirms',
                        'oldkeyfldname' => 'ManagerFirmID',
                      ),
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),     
        ),
      ),
    ),
  );

  $nm_mf = array(
    'manager firm' => array(
      'params' => array(
        'oldtable' => 'tblmanagerfirms',
        'oldkeyfldname' => 'ManagerFirmID',
        'dst'=>'manager_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ManagerFirmName'),
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ManagerFirmName'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'value2term' => array(
          'field_status_tr' => array('fldname'=>'Archive', 'handler'=>'negate', 'voc'=>5, 'values'=>array('0'=>'Inactive','1'=>'Active')),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );
  $nm_m = array(
    'mandate' => array(
      'params' => array(
        'oldtable' => 'tblmandates',
        'oldkeyfldname' => 'MandateID',
        'dst' => 'mandate',
      ),
      'system' => array(
        'fields' => array(
          'node-body' => array(
            'body' => array('fldname'=>'History'),      
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'field_title' => array('fldname'=>'FundName'),
          'field_account_size' => array('fldname'=>'Size'),
          'field_plan_size' => array('fldname'=>'FundSize'),
        ),
        'date2date' => array(
          'field_mandate_date' => array('fldname'=>'MandateDate'),
          'field_rfp_date' => array('fldname'=>'RFPDate'),
        ),
        'link' => array(
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink'),
        ),
        'http2link' => array(
          'field_rfp_link' => array('fldname'=>'RFPLink'),
          'field_website' => array('fldname'=>'Website'),
        ),
        'lu2term' => array(
          'field_mandate_status_tr' => array('fldname'=>'StatusID'),
          'field_attribute_tr' => array(),
          'field_geographic_tr' => array('fldname'=>'GeographicID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
        ),
        'majorminor' => array(
          'field_major_minor_style_tr' => array('fields'=>array('major'=>'MajorStyleID', 'minor'=>'MinorStyleID')),
        ), 
        'reference' => array(
          'field_plan_er' => array('fldname'=>'FundID'),
          'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
          'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
        ),
        'collection' => array(
          'field_manager_history' => array(
            'multiplier' => array(
              'field_manager_firm_er' => array('fldname'=>'FirmsHired', 'handler'=>'comma-delimited-er'),
            ),
          ),
          'sets' => array(
            array(
              'fields' => array(
                'default' => array(
                  'field_amount' => array('fldname'=>'FirmsHiredAmount'),
                ),
                'comma-delimited-delta-default' => array(
                  'field_amount' => array('fldname'=>'FirmsHiredAmount'),
                ),
                'comma-delimited-er' => array(
                  'field_manager_er' => array('fldname'=>'FirmHiredAmount'),
                ),
              ),
            ),
          ),
          'field_plan_size_history' => array(
            'sets' => array(
              array(
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_mandate_notes' => array(
            'sets' => array(
              array(
                'fields' => array(
                  'note-comment-to-note' => array(),
                  'note-history-to-note' => array(),
                ),
              ),
              array(
                'oldtable' => 'tblmandatecomments',
                'fields' => array(
                  'note-comments-to-note' => array(),
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  $nodeMapArr = FALSE;
  if ($mode=="step1") {
    $nodeMapArr = array(
      $nm_p, 
      $nm_cc,
      $nm_mc,
      $nm_cf,
      $nm_co,
      $nm_mf,
      $nm_pc, 
      $nm_m  
    );
  }
  else if ($mode=="step2") {
    $nodeMapArr = array(
      $nm_cf,
      $nm_co,
      $nm_mf,
      $nm_p, 
      $nm_m, 
      $nm_contact,
    );
  }
  return $nodeMapArr;
// END BIG NODE MAP ARRAY

}

/*
 * Function that checks Drupal Variable Store for ongoing maps/node progress list.
 * For Found 1 Node transfers, we maintain 2 copies of old ID/NID lists, for Round 2,
 * Similar lists tracking what nodes are filled out. We maintain a double set of each
 * for fault tolerance, since both of these sets of numbers are mission-critical.
 * 
 * @parameters
 *  $var1 - the variable name of the 1st copy of the list
 *  $var2 - the name of the backup copy
 *  $check1 - the newold list
 *  $check2 - the oldnew list
 */
function banjia_fin_migrate_get_best_map($name='fin-migrate-node') {
  $name1 = $name .'1';
  $name2 = $name . '2';
  // PLW 090115 first thing to figure out whether we are beginning or resuming.
  // Its a bit complicated. We have 2 variables set at different times so if
  // 1 is interrupted during an update, the other survives. We can have a busted
  // variable, or w/in a variable, a busted new/old key map.
  $proceed = FALSE;
  $out = array();
  if ( $out = unserialize(variable_get($name2)) ) {
    // so far, so good. But old/new key map may be corrupted. Check for it.
    if ( isset($out['oldnew']) && isset($out['newold']) ) {
      $proceed = TRUE;
    }
  }
  // okay, something went wrong and the updated data was irretrievable, lets try the backup set
  if (!$proceed) {
    // uncap when done 
    //variable_set('fin-migrate-node2', array());
    if ( $out = unserialize(variable_get($name1)) ) {
      // so far, so good. But old/new key map may be corrupted. Check for it.
      if ( isset($out['oldnew']) && isset($out['newold']) ) {        
        $message = "Recovering from an abort or failure. Deleting latest node and using 1 node old data - ";
        watchdog('FIN_MIGRATE_OLDNEW',$message,array(),WATCHDOG_WARNING);   
      }
    }
  }
  // If both come up blank, this is a new migration, not a resumption
  return $out;
}
