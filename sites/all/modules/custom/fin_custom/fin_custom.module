<?php
/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function fin_custom_theme_registry_alter(&$theme) {
  $theme['field_multiple_value_form']['function'] = 'fin_custom_field_multiple_value_form';
}

/**
 * Implements hook_element_info_alter().
 */
function fin_custom_element_info_alter(&$type) {
  $type['geofield_proximity']['#process'][] = 'fin_custom_geofield_proximity_element_process';
}

function fin_custom_geofield_proximity_element_process($element, &$form_state, $form) {
  $element['origin']['#attributes']['placeholder'] = 'Enter city, state, or zip';
  $element['unit']['#options'] = array(3959 => 'Miles');
  return $element;
}
/*
 * Implementation of hook_views_query_alter().
 */
function fin_custom_views_query_alter(&$view, &$query) {
  if ($view->name == 'reference_views' && ($view->display_handler->display->id =='plan_lead_contact' || $view->display_handler->display->id =='consultant_contacts')) {
    // Completely replace current orderby
    $orders = count($query->orderby);
    if ($orders == 1) {
     $view->query->add_table('field_data_field_status_tr', 'paragraphs_item_field_data_field_job_history');
     $query->add_where(1,'paragraphs_item_field_data_field_job_history__field_data_field_status_tr.field_status_tr_tid', array(340, 341), 'IN');
     $view->query->orderby[1] = $view->query->orderby[0];
     $view->query->orderby[0]['field'] = "CASE WHEN paragraphs_item_field_data_field_job_history__field_data_field_status_tr.field_status_tr_tid = 340 THEN 1 ELSE 2 END";
     $view->query->orderby[0]['direction'] = "ASC";
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fin_custom_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-map-views-map-search') {
    // place holder for future;
  }
}

/**
 * Over write theme_field_multiple_value_form().
 */
function fin_custom_field_multiple_value_form($variables) {
  global $pager_page_array, $pager_total, $base_url;
  if ($variables['element']['#field_name'] != 'field_manager_roster_fc') {
    return theme_field_multiple_value_form($variables);
  }
  $element = $variables['element'];
  $output = '';

  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $url = $_SERVER['HTTP_REFERER'];
    $u = drupal_parse_url($url);
    $url = str_replace($base_url . '/', '', $u['path']);
    $_GET['q'] = $url;
  }
  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    $itemindex = array();
    foreach ($items as $key => $item) {
      $itemindex[$item['#delta']] = $key;
    }
    krsort($itemindex);
    $items_alt = array();
    foreach ($itemindex as $delta => $position) {
      $items_alt[] = $items[$position];
    }
    foreach ($items_alt as $key => $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        //array('data' => $item['#delta'], 'class' => array('delta-order')),
        drupal_render($item),
        array('data' => $delta_element, 'class' => array('delta-order')),
      );
      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
    }
    $per_page = 10;
    $current_page = pager_default_initialize(count($rows), $per_page, 0);
    $chunks = array_chunk($rows, $per_page, TRUE);
    $output = '<div class="form-item">';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= theme('table', array('header' => $header, 'rows' => $chunks[$current_page], 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
    $output .= theme('pager', array('quantity', count($rows)));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '</div>';

    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }
  return $output;
}

/**
 * As part of function base to later possible structure alter and architure change.
 */
function fin_custom_decouple_manager_roster($id, $update = FALSE, $check = TRUE) {
  $entity = entity_load('field_collection_item', array($id));
  if (is_array($entity)) {
    $entity = reset($entity);
  }
  if (is_object($entity)) {
    $ew = entity_metadata_wrapper('field_collection_item', $entity);
    if ($ew->field_manager_firm_er->value()) {
      $e = FALSE;
      if ($check) {
        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'plan_manager_roster')
          ->propertyCondition('title', $id)
          ->range(0,1)
          ->execute();

        if (!empty($entities['node'])) {
          if (!$update) {
            return;
          }
          $e = node_load(array_shift(array_keys($entities['node'])));
        }
      }

      if (!$e) {
        $e = entity_create('node', array('type' => 'plan_manager_roster'));
        $e->uid = 0;
      }
      $ewn = entity_metadata_wrapper('node', $e);
      $ewn->title = $id;
      if ($ew->field_manager_firm_er->value()) {
        $ewn->field_manager_firm_er = $ew->field_manager_firm_er->value();
      }
      if ($entity->hostEntity()) {
        $ewn->field_hosting_plan = $entity->hostEntity();
      }
      if ($ew->field_geographic_tr ->value()) {
        $ewn->field_geographic_tr = $ew->field_geographic_tr ->value();
      }
      if ($ew->field_amount->value()) {
        $ewn->field_amount = $ew->field_amount->value();
      }
      if ($ew->field_major_minor_style_tr->value()) {
        $ewn->field_major_minor_style_tr = $ew->field_major_minor_style_tr->value();
      }
      if ($ew->field_attribute_tr->value()) {
        $ewn->field_attribute_tr = $ew->field_attribute_tr->value();
      }
      $ewn->save();
    }
  }
}

/**
 * Implements hook_menu().
 */
function fin_custom_menu() {
  $items = array();
  // Node -- this is flexible to incorporate all field collections as defined
  // through the Administrative UI.  This has been modeled on the field
  // collection hook menu.
  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'field_collection') {
      // Make sure field collection module is loaded.
      module_load_include('module', 'field_collection');
      $path = field_collection_field_get_path($field);
      $pathitems = explode('/', $path);
      $count = count($pathitems);
      // Add path items.
      $apathitems = $pathitems;
      $apathitems[0] = 'fin';
      $apath = implode('/', $apathitems);
      // Edit / delete path items.
      $edpathitems = $pathitems;
      $edpathitems[0] = 'fin/%node';
      $edpath = implode('/', $edpathitems);

      // Add field collection.
      $items[$apath . '/add/%/%/%ctools_js/go'] = array(
        'page callback' => 'fin_custom_item_add',
        // Fieldname / node / nodeid / js.
        'page arguments' =>
        array($count - 1, $count + 1, $count + 2, $count + 3),
        // Access callback is determined by access assigned to the node
        // type to which the field collection is attached; therefore no
        // access callback check is needed; display of links to add, edit
        // or delete content are determined based on node callback rules.
        'access callback' => TRUE,
      );

      // Edit / delete field collection.
      $items[$edpath . '/%field_collection_item/%/%/%ctools_js/go'] = array(
        'page callback' => 'fin_custom_operator_callback',
        // %node / fieldname / %field_collection_item / action / js.
        'page arguments' =>
        array($count - 1, $count, $count + 1, $count + 2, $count + 3, $count + 4),
        // See note above.
        'access callback' => TRUE,
      );
    }
  }

  return $items;
}

/**
 * Add a new field collection item via ctools modal.
 *
 * @param string $field_name
 *   A string field collection name as defined on the entity.
 * @param string $entity_type
 *   A string type of entity (node, etc.).
 * @param integer $entity_id
 *   An integer.
 * @param boolean $js
 *   Boolean indicates ajax usage.
 * @param integer $revision_id
 *   (optional) An integer revision id TBA later.
 * @param mixed $langcode
 *   (optional) A mixed variable language code TBA later
 *
 * @return mixed
 *   (optional) ctools modal or the field collection item form.
 *
 * @todo: Support optionally passing in the revision_id and langcode parameters.
 */
function fin_custom_item_add($field_name, $entity_type, $entity_id, $js = FALSE, $revision_id = NULL, $langcode = NULL) {
  global $pager_page_array, $pager_total, $base_url;
  $page = 0;
  // Making sure certain functions for field_collection and field are available.
  module_load_include('pages.inc', 'field_collection');
  module_load_include('inc', 'field', 'field.info');

  // Check if js is enabled, this parameter will be loaded by ctools.
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add Data'),
    );

    // Loading arguments for ctools modal.
    $arg = fin_custom_field_collection_item_add(
          str_replace('-', '_', $field_name), $entity_type, $entity_id);

    if ($arg == MENU_NOT_FOUND || $arg == MENU_ACCESS_DENIED) {
      drupal_access_denied();
      drupal_exit();
    }
    $form_state['build_info']['args'][] = $arg;

    $output = ctools_modal_form_wrapper('field_collection_item_form',
                                        $form_state);

    // If the form is executed will need to dismiss the form and reload
    // the page.
    if ($form_state['executed']) {
      if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
        $url = $_SERVER['HTTP_REFERER'];
        $u = drupal_parse_url($url);
        $url = str_replace($base_url . '/', '', $u['path']);
        $_GET['q'] = $url;
      }
      $commands = array();

      $view = views_get_view('reference_views');
      $view->set_display('eva_manager_roster_edit');
      $view->set_arguments(array($entity_id));
      $view->set_current_page($page);
      $view->pre_execute();
      $view->execute();
      //$contact_view = views_embed_view('reference_views', 'eva_manager_roster_edit');
      $contact_view = $view->render();
      $commands[] = ajax_command_replace('.view-id-reference_views.view-display-id-eva_manager_roster_edit', $contact_view);

      $commands[] = ctools_modal_command_dismiss();

      $output = $commands;
    }
    // Render the output.
    // Note:  using ajax_render here, using drupal_json_render here caused
    // html 500 error
    print ajax_render($output);
    drupal_exit();
  }
  else {
    // No js found lets go to the default page.
    return drupal_get_form('field_collection_item_form',
                           field_collection_item_load($entity_id));
  }
}

/**
 * Add a new field-collection item.
 *
 * This is almost verbatim from field_collection::field_connection_item_add()
 * Modifications include changes for this module's parameters, and
 * returning a field collection item instead of a form
 * Perhaps field collection should be refactored to make code more usable?
 *
 * @param string $field_name
 *   A string field collection name as defined on the entity.
 * @param string $entity_type
 *   A string type of entity (node, etc.).
 * @param integer $entity_id
 *   An integer with the entity id.
 *
 * @return mixed
 *   A field_collection_item object or error message code
 */
function fin_custom_field_collection_item_add(
  $field_name, $entity_type, $entity_id /**, $revision_id = NULL,
  $langcode = NULL**/) {

  $info = entity_get_info();
  if (!isset($info[$entity_type])) {
    return MENU_NOT_FOUND;
  }
  $result = entity_load($entity_type, array($entity_id));

  $entity = reset($result);
  if (!$entity) {
    return MENU_NOT_FOUND;
  }
  // Ensure the given entity is of a bundle that has an instance of the field.
  list($id, $rev_id, $bundle) = entity_extract_ids($entity_type, $entity);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  if (!$instance) {
    return MENU_NOT_FOUND;
  }

  // Check field cardinality.
  $field = field_info_field($field_name);

  $langcode = LANGUAGE_NONE;
  if (!($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED ||
        !isset($entity->{$field_name}[$langcode]) ||
        count($entity->{$field_name}[$langcode]) < $field['cardinality'])) {
    drupal_set_message(t('Too many items.'), 'error');
    return '';
  }

  $field_collection_item = entity_create('field_collection_item',
                                         array('field_name' => $field_name));
  // Do not link the field-collection item with the host entity at this point,
  // as during the form-workflow we have multiple field-collection item entity
  // instances, which we don't want link all with the host.
  // That way the link is going to be created when the item is saved.
  $field_collection_item->setHostEntity($entity_type, $entity, LANGUAGE_NONE, FALSE);

  $title = ($field['cardinality'] == 1) ? $instance['label'] :
    t('Add new !instance_label',
      array('!instance_label' => drupal_strtolower($instance['label'])));
  drupal_set_title($title);

  // Make sure the current user has access to create a field collection item.
  if (!field_collection_item_access('create', $field_collection_item)) {
    return MENU_ACCESS_DENIED;
  }
  return $field_collection_item;

}

/**
 * Edit / Delete modal callback.
 *
 * @param object $node
 *   An object Entity node to which field collection is attached.
 * @param string $fieldname
 *   A string field collection name as defined on the entity.
 * @param object $field_collection_item
 *   An object FieldCollectionItemEntity.
 * @param string $action
 *   A string "edit" or "delete".
 * @param boolean $js
 *   Indicates ajax usage.
 * @param integer $revision_id
 *   Revision id TBA later.
 * @param mixed $langcode
 *   Language code TBA later.
 *
 * @return mixed
 *   (optional) ctools modal or the field collection item form.
 *
 * @todo:  Support optionally passing revision ID and and langcode parameters
 */
function fin_custom_operator_callback($node, $fieldname,
                                                   $field_collection_item,
                                                   $action, $page, $js = FALSE,
                                                   $revision_id = NULL,
                                                   $langcode = NULL) {
  global $pager_page_array, $pager_total, $base_url;
  // Make sure field_collection module is loaded.
  module_load_include('pages.inc', 'field_collection');

  // Access checks to make sure the user has access to the field collections.
  $field = field_collection_item_load($field_collection_item->item_id);
  // Entities use "update", not "edit".
  if ($action == "edit") {
    $action = "update";
  }
  if (!field_collection_item_access($action, $field)) {
    // If no access, display drupal access denied.
    drupal_access_denied();
    drupal_exit();
  }

  if ($js) {
    // Include ctools ajax and modal, dont forget to set ajax TRUE.
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => ($action == 'edit' ? t('Modify Data') : t('Delete Data')),
    );

    $form_state['build_info']['args'][] = $field;

    if ($action == 'update') {
      $output = ctools_modal_form_wrapper('field_collection_item_form',
                                          $form_state);
    }
    elseif ($action == 'delete') {
      $output = ctools_modal_form_wrapper('field_collection_item_delete_confirm',
                                          $form_state);
    }
    else {
      // The only actions allowed are edit and delete.
      // Invalid url used to access, display drupal access denied.
      drupal_access_denied();
      drupal_exit();
    }

    if ($form_state['executed']) {
      if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
        $url = $_SERVER['HTTP_REFERER'];
        $u = drupal_parse_url($url);
        $url = str_replace($base_url . '/', '', $u['path']);
        $_GET['q'] = $url;
      }

      $node = node_load($entity_id, NULL, FALSE);
      $commands = array();
      $view = views_get_view('reference_views');
      $view->set_display('eva_manager_roster_edit');
      $view->set_current_page($page);
      $view->pre_execute();
      $view->execute();
      //$contact_view = views_embed_view('reference_views', 'eva_manager_roster_edit');
      $contact_view = $view->render();
      $commands[] = ajax_command_replace('.view-id-reference_views.view-display-id-eva_manager_roster_edit', $contact_view);
      $commands[] = ctools_modal_command_dismiss();
      $output = $commands;
    }
 
    ajax_set_verification_header();
    // Note:  using drupal_json_output here, but using this in the "add"
    // function caused html 500 error
    drupal_json_output($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('field_collection_item_form',
                           field_collection_item_load($field_collection_item->item_id));
  }
}
