<?php
/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function fin_custom_theme_registry_alter(&$theme) {
  $theme['field_multiple_value_form']['function'] = 'fin_custom_field_multiple_value_form';
}

/**
 * Implements hook_element_info_alter().
 */
function fin_custom_element_info_alter(&$type) {
  $type['geofield_proximity']['#process'][] = 'fin_custom_geofield_proximity_element_process';
}

function fin_custom_geofield_proximity_element_process($element, &$form_state, $form) {
  $element['origin']['#attributes']['placeholder'] = 'Enter city, state, or zip';
  $element['unit']['#options'] = array(3959 => 'Miles');
  return $element;
}
/*
 * Implementation of hook_views_query_alter().
 */
function fin_custom_views_query_alter(&$view, &$query) {
  if ($view->name == 'reference_views' && ($view->display_handler->display->id =='plan_lead_contact' || $view->display_handler->display->id =='consultant_contacts')) {
    // Completely replace current orderby
    $orders = count($query->orderby);
    if ($orders == 1) {
     $view->query->add_table('field_data_field_status_tr', 'paragraphs_item_field_data_field_job_history');
     $query->add_where(1,'paragraphs_item_field_data_field_job_history__field_data_field_status_tr.field_status_tr_tid', array(340, 341), 'IN');
     $view->query->orderby[1] = $view->query->orderby[0];
     $view->query->orderby[0]['field'] = "CASE WHEN paragraphs_item_field_data_field_job_history__field_data_field_status_tr.field_status_tr_tid = 340 THEN 1 ELSE 2 END";
     $view->query->orderby[0]['direction'] = "ASC";
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fin_custom_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] === 'views-exposed-form-map-views-map-search') {
    // place holder for future;
  }
}

/**
 * Over write theme_field_multiple_value_form().
 */
function fin_custom_field_multiple_value_form($variables) {
  global $pager_page_array, $pager_total, $base_url;
  if ($variables['element']['#field_name'] != 'field_manager_roster_fc') {
    return theme_field_multiple_value_form($variables);
  }
  $element = $variables['element'];
  $output = '';

  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    $url = $_SERVER['HTTP_REFERER'];
    $u = drupal_parse_url($url);
    $url = str_replace($base_url . '/', '', $u['path']);
    $_GET['q'] = $url;
  }
  if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $table_id = drupal_html_id($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $required = !empty($element['#required']) ? theme('form_required_marker', $variables) : '';

    $header = array(
      array(
        'data' => '<label>' . t('!title !required', array('!title' => $element['#title'], '!required' => $required)) . "</label>",
        'colspan' => 2,
        'class' => array('field-label'),
      ),
      t('Order'),
    );
    $rows = array();

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation)
    $items = array();
    foreach (element_children($element) as $key) {
      if ($key === 'add_more') {
        $add_more_button = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_sort_items_value_helper');

    // Add the items as table rows.
    $itemindex = array();
    foreach ($items as $key => $item) {
      $itemindex[$item['#delta']] = $key;
    }
    krsort($itemindex);
    $items_alt = array();
    foreach ($itemindex as $delta => $position) {
      $items_alt[] = $items[$position];
    }
    foreach ($items_alt as $key => $item) {
      $item['_weight']['#attributes']['class'] = array($order_class);
      $delta_element = drupal_render($item['_weight']);
      $cells = array(
        array('data' => '', 'class' => array('field-multiple-drag')),
        //array('data' => $item['#delta'], 'class' => array('delta-order')),
        drupal_render($item),
        array('data' => $delta_element, 'class' => array('delta-order')),
      );
      $rows[] = array(
        'data' => $cells,
        'class' => array('draggable'),
      );
    }
    $per_page = 10;
    $current_page = pager_default_initialize(count($rows), $per_page, 0);
    $chunks = array_chunk($rows, $per_page, TRUE);
    $output = '<div class="form-item">';
    $output .= '<div class="clearfix">' . drupal_render($add_more_button) . '</div>';
    $output .= theme('table', array('header' => $header, 'rows' => $chunks[$current_page], 'attributes' => array('id' => $table_id, 'class' => array('field-multiple-table'))));
    $output .= theme('pager', array('quantity', count($rows)));
    $output .= $element['#description'] ? '<div class="description">' . $element['#description'] . '</div>' : '';
    $output .= '</div>';

    drupal_add_tabledrag($table_id, 'order', 'sibling', $order_class);
  }
  else {
    foreach (element_children($element) as $key) {
      $output .= drupal_render($element[$key]);
    }
  }
  return $output;
}

/**
 * Put all node in to delete queue and process with batch.
 */
function fin_custom_decouple_manager_roster($id, $update = TRUE, $check = FALSE) {
  $entity = entity_load('field_collection_item', array($id));
  if (is_array($entity)) {
    $entity = reset($entity);
  }
  if (is_object($entity)) {
    $ew = entity_metadata_wrapper('field_collection_item', $entity);
    if ($ew->field_manager_firm_er->value()) {
      $e = FALSE;
      if ($check) {
        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'plan_manager_roster')
          ->propertyCondition('title', $id)
          ->range(0,1)
          ->execute();

        if (!empty($entities['node'])) {
          if (!$update) {
            return;
          }
          $e = node_load(array_shift(array_keys($entities['node'])));
        }
      }

      if (!$e) {
        $e = entity_create('node', array('type' => 'plan_manager_roster'));
        $e->uid = 0;
      }
      $ewn = entity_metadata_wrapper('node', $e);
      $ewn->title = $id;
      $ewn->field_manager_firm_er = $ew->field_manager_firm_er->value();
      $ewn->field_hosting_plan = $entity->hostEntity();
      $ewn->field_geographic_tr = $ew->field_geographic_tr ->value();
      $ewn->field_amount = $ew->field_amount->value();
      $ewn->field_major_minor_style_tr = $ew->field_major_minor_style_tr->value();
      $ewn->field_attribute_tr = $ew->field_attribute_tr->value();
      $ewn->save();
    }
  }
}
