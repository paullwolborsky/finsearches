<?php
/*
Had to fix fin_migrate, which had 13k 'consultant contacts w/consultant firm nodes
delete from fin_migrate where nid in (select nid from node where type<>'contact') and contactname<>''
*/

global $DEFAULT_OWNER_UID;
$DEFAULT_OWNER_UID = 109;

/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implements hook_menu().
 */
function fin_migrate_menu() {
  $items = array();

  $items['admin/content/fin_migrate'] = array(
    'title' => 'FIN D5-to-D7 migrate (MIG2-05/20/16)',
    'description' => 'Migrate data from D5 production to new D7 - Users, Search data, links between them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fin_migrate_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function fin_migrate_form() {
  $form = array();
  $form['fieldset1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import'),
  );
  $form['fieldset1']['step1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Step1'),
  );
  $form['fieldset1']['step2'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content'),
  );
  $form['fieldset1']['contacts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contacts'),
  );
  $form['fieldset2'] = array(
    '#type' => 'fieldset',
    '#title' => t('Post-Migration'),
  );
  $form['fieldset3'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other'),
  );
  $form['fieldset4'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contact Name Handling'),
  );
  $form['fieldset5'] = array(
    '#type' => 'fieldset',
    '#title' => t('PostFix'),
  );
  $form['fieldset6'] = array(
    '#type' => 'fieldset',
    '#title' => t('PostFix 2'),
  );
  $form['fieldset1']['submit_import'] = array(
    '#type' => 'submit',
    '#value' => t('Start importing stuff'),
    '#submit' => array('fin_migrate_form_submit_import'),
  );
  $form['fieldset1']['step1']['submit_step1a'] = array(
    '#type' => 'submit',
    '#value' => t(' Step1 A '),
    '#submit' => array('fin_migrate_form_submit_import_step1a'),
  );
  $form['fieldset1']['step1']['submit_step1b'] = array(
    '#type' => 'submit',
    '#value' => t(' Step1 B '),
    '#submit' => array('fin_migrate_form_submit_import_step1b'),
  );
  $form['fieldset1']['step1']['submit_step1c'] = array(
    '#type' => 'submit',
    '#value' => t(' Step1 C '),
    '#submit' => array('fin_migrate_form_submit_import_step1c'),
  );
  $form['fieldset1']['step2']['submit_news'] = array(
    '#suffix' => ' | ',    
    '#type' => 'submit',
    '#value' => t(' Step2 News '),
    '#submit' => array('fin_migrate_form_submit_import_step2_news'),
  );
  $form['fieldset1']['step2']['submit_basic'] = array(
    '#suffix' => ' | ',
    '#type' => 'submit',
    '#value' => t(' Step2 Basics+MOM '),
    '#submit' => array('fin_migrate_form_submit_import_step2_basic'),
  );
  $form['fieldset1']['step2']['submit_sample'] = array(
    '#suffix' => ' | ',    
    '#type' => 'submit',
    '#value' => t(' Step2 Sample '),
    '#submit' => array('fin_migrate_form_submit_import_step2_sample'),
  );
  $form['fieldset1']['step2']['submit_plan'] = array(
    '#suffix' => ' | ',        
    '#type' => 'submit',
    '#value' => t('Step2 Plans'),
    '#submit' => array('fin_migrate_form_submit_import_step2_plan'),
  );
  $form['fieldset1']['step2']['submit_mandate'] = array(
    '#type' => 'submit',
    '#value' => t(' Step2 Mandate '),
    '#submit' => array('fin_migrate_form_submit_import_step2_mandate'),
  );
  $form['fieldset1']['contacts']['submit_step2a'] = array(
    '#type' => 'submit',
    '#value' => t('Contacts'),
    '#submit' => array('fin_migrate_form_submit_import_contacts'),
  );
/***
  $form['fieldset2']['Import_New_Major_Minors'] = array(
    '#type' => 'submit',
    '#value' => t('Import New Major/Minors'),
    '#submit' => array('fin_migrate_form_submit_import_mm'),
  );
***/
  $form['fieldset2']['Import_New_Major_Minors'] = array(
    '#type' => 'submit',
    '#value' => t('Unmark NEWS'),
    '#submit' => array('fin_migrate_form_submit_postfix_news'),
  );
  $form['fieldset3']['Import_mass_multiples'] = array(
      '#type' => 'submit',
    '#value' => t('Jobs Report'),
    '#submit' => array('fin_migrate_make_multiples_resport'),
  );
  $form['fieldset4']['submit_dopples'] = array(
    '#type' => 'submit',
    '#value' => t('Split up Shared Names'),
    '#submit' => array('fin_migrate_form_submit_dopple1'),
  );
  $form['fieldset4']['submit_dopple_clean'] = array(
    '#type' => 'submit',
    '#value' => t('Clean Tem Names'),
    '#submit' => array('fin_migrate_form_submit_dopple2'),
  );
  $form['fieldset5']['submit_postfix_plan_strip'] = array(
    '#suffix' => ' | ',
    '#type' => 'submit',
    '#value' => t('Strip Michigan'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_michigan'),
  );
  $form['fieldset5']['submit_postfix_plan'] = array(
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('Fix Michigan'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_michigan'),
  );
////////////////////
  $form['fieldset5']['submit_postfix_plan_strip2'] = array(
    '#type' => 'submit',
    '#value' => t('Strip Florida'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_florida'),
  );
  $form['fieldset5']['submit_postfix_plan2'] = array(
    '#prefix' => ' | ',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('fix Flroida'),
    '#submit' => array('fin_migrate_form_submit_postfix_florida'),
  );
  $form['fieldset5']['submit_postfix_plan_strip3'] = array(
    '#type' => 'submit',
    '#value' => t('Strip Texas'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_texas'),
  );
  $form['fieldset5']['submit_postfix_plan3'] = array(
    '#prefix' => ' | ',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('Fix Texas3'),
    '#submit' => array('fin_migrate_form_submit_postfix_texas'),
  );
  $form['fieldset5']['submit_postfix_plan_strip4'] = array(
    '#type' => 'submit',
    '#value' => t('Strip CALPERS'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_calpers'),
  );
  $form['fieldset5']['submit_postfix_plan4'] = array(
    '#prefix' => ' | ',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('Fix CALPERS'),
    '#submit' => array('fin_migrate_form_submit_postfix_calpers'),
  );
  
  $form['fieldset5']['submit_postfix_plans_truncated'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('COMPLETE Broken Plans'),
    '#submit' => array('fin_migrate_form_submit_postfix_truncated'),
  );
/////////////////////////////
  $form['fieldset5']['submit_postfix_plan_strip5'] = array(
    '#type' => 'submit',
    '#value' => t('Strip CAL TEACHERS'),
    '#prefix' => '<br /><br />',
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_calteach'),
  );
  $form['fieldset5']['submit_postfix_plan5'] = array(
    '#prefix' => ' | ',
    '#suffix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Fix CAL TEACH'),
    '#submit' => array('fin_migrate_form_submit_postfix_calteach'),
  );

  $form['fieldset5']['submit_postfix_plan_strip6'] = array(
    '#type' => 'submit',
    '#value' => t('Strip NEW YORK'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_newyork'),
  );
  $form['fieldset5']['submit_postfix_plan6'] = array(
    '#prefix' => ' | ',
    '#suffix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Fix NEW YORK'),
    '#submit' => array('fin_migrate_form_submit_postfix_newyork'),
  );

  $form['fieldset5']['submit_postfix_plan_strip7'] = array(
    '#type' => 'submit',
    '#value' => t('Strip UT'),
    '#submit' => array('fin_migrate_form_submit_postfix_plan_strip_ut'),
  );
  $form['fieldset5']['submit_postfix_plan7'] = array(
    '#prefix' => ' | ',
    '#suffix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Fix UT'),
    '#submit' => array('fin_migrate_form_submit_postfix_ut'),
  );

/////////////////////////////
  $form['fieldset5']['submit_postfix_plans_momma'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('IMPORT MOM'),
    '#submit' => array('fin_migrate_form_submit_postfix_moms'),
  );

  $form['fieldset5']['submit_postfix_plans_imr'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('IMPORT DATABASES USED'),
    '#submit' => array('fin_migrate_form_submit_postfix_imr'),
  );

  $form['fieldset5']['submit_postfix_momamt'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('IMPORT MOM AMT $$$'),
    '#submit' => array('fin_migrate_form_submit_postfix_momamt'),
  );

  $form['fieldset5']['submit_postfix_cf'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('CREATE PHANTOM OFFICES'),
    '#submit' => array('fin_migrate_form_submit_postfix_cf'),
  );

  $form['fieldset5']['submit_postfix_mandate_titles1'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('FIX MANDATE TITLES 1'),
    '#submit' => array('fin_migrate_form_submit_postfix_mandate_titles'),
  );

  $form['fieldset5']['submit_postfix_mandate_comments'] = array(
    '#prefix' => '<br />',
    '#suffix' => '<br />',
    '#type' => 'submit',
    '#value' => t('FIX MANDATE COMMENTS'),
    '#submit' => array('fin_migrate_form_submit_postfix_mandate_comments'),
  );

  $form['fieldset5']['contacts_bios']['submit_step2a_bio'] = array(
    '#prefix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Re-populate Bios'),
    '#submit' => array('fin_migrate_form_submit_import_contacts_bios'),
  );
  $form['fieldset5']['fix_longext']['submit_step2a_bio'] = array(
    '#prefix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Fix Longtext body'),
    '#submit' => array('fin_migrate_form_submit_fix_longtext'),
  );
  $form['fieldset5']['fix_longext_fc']['submit_step2a_bio'] = array(
    '#prefix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Fix Longtext FC'),
    '#submit' => array('fin_migrate_form_submit_fix_longtext_fc'),
  );
  $form['fieldset5']['fix_longext_save']['submit_step2a_bio'] = array(
    '#prefix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Save Contactrs w/new bios'),
    '#submit' => array('fin_migrate_form_submit_fix_longtext_save'),
  );

///////////////////////////////////
  $form['fieldset6']['submit_postfix_sqls'] = array(
    '#suffix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Run Simple SQLS'),
    '#submit' => array('fin_migrate_form_submit_sqls'),
  );
  
  $form['fieldset6']['submit_postfix_ext'] = array(
    #suffix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Fix Broken Phone Extensions'),
    '#submit' => array('fin_migrate_form_submit_fix_ext'),
  );

  $form['fieldset6']['submit_postfix_imgs'] = array(
    #suffix' => '<br /><br />',
    '#type' => 'submit',
    '#value' => t('Run IMG REPORT'),
    '#submit' => array('fin_migrate_form_submit_check_images'),
  );

/////////////////// 
  return $form;
}

function fin_migrate_form2() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start migrating stuff'),
  );

  return $form;
}

/**
 * Handle the close of batch.
 */
function _fin_migrate_done() {
  $message = "DONE";
  watchdog('FIN_MIGRATE_RUN', $message, array(), WATCHDOG_INFO);
}

/* SECTION USERS
 * /////////////// USERS ////////////////
 */

/**
 * Implements hook_form_submit().
 */
function fin_migrate_move_users(&$batch) {
  ini_set('max_execution_time', 3600000);
  define('fin_migrate_USER_RID_NONE', '2');

  $oldnew = array();
  $newold = array();
  $nameslist = array();
  $uidmaps = array();
  $resuming = FALSE;

  $trialnewroles = array(2, 6);
  $newroles = array(
    '1' => 'anonymous users',
    '2' => 'authenticated user',
    '3' => 'administrator',
    '4' => 'editor',
    '5' => 'author',
    '6' => 'Trial Member',
    '7' => 'Basic Member',
    '8' => 'Family Office',
  );

  $rolemap = array(
    '1' => array(1),
    '2' => array(2, 7),
    '3' => array(2, 3),
    '4' => array(2, 5),
    '5' => array(2, 4),
    '6' => array(2, 6),
    '7' => array(2, 7),
    '8' => array(2, 9),
  );

  db_set_active('legacy');
  $sql = "select uid from {users} WHERE uid>7";
  $result = db_query($sql);
  db_set_active();
  // Oids are all old keys in source table, noids keys we saved
  // We will use array_diff to tell us what ids have not been done yet.
  $oids = array();
  $res = array();
  foreach ($result as $row) {
    $res[$row->uid] = $row->uid;
  }
  if ($res) {
    $oids = array_values($res);
  }
  $noids = array();
  if (isset($newold)) {
    $noids = array_values($newold);
  }
  $stufftomove = TRUE;
  $partial = FALSE;
  if ($noids) {
    $getids = array_diff($oids, $noids);
    if (!$getids) {
      $stufftomove = FALSE;
    }
    else {
      $partial = TRUE;
    }
  }
  $sql = '';
  if ($partial && $stufftomove) {
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid in (" . implode(",", $getids) . ") order by uid";
  }
  elseif (!$partial && $stufftomove) {
    // We are starting fresh with a table, use simpler SQL.
    $getids = array_keys($oids);
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid > 777 order by uid";
  }

  if ($stufftomove) {
    db_set_active('legacy');
    $inusers = db_query($usql)->fetchAll();
    db_set_active();

    if ($inusers) {

      $motion = "Starting Fresh ";
      if ($partial) {
        $motion = "Resuming ";
      }
      $start = time();

      // First, extract all Trial Members.
      $trial_uids = array();
      $sql = "select uid from accounttypes_users where atid=2 or atid=4";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      foreach ($result as $row) {
        $trial_uids[$row->uid] = $row->uid;
      }

      $profilesarr = array();
      $sql = "select * from {profile_values}";

      db_set_active('legacy');
      $raw = db_query($sql);
      db_set_active();

      foreach ($raw as $row) {
        $profilesarr[$row->uid][$row->fid] = $row->value;
      }

      $sql = "select u.uid as uid,r.rid as role from {users_roles} u, {role} r where u.rid=r.rid";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      $roleres = array();
      foreach ($result as $row) {
        $roleres[$row->uid][$row->role] = $row->role;
      }
      $noroles = array();
      $rolesuids = array_keys($roleres);
      $noroles = array_diff($getids, $rolesuids);
      foreach ($noroles as $norole) {
        $roleres[$norole][fin_migrate_USER_RID_NONE] = fin_migrate_USER_RID_NONE;
      }

      db_set_active();
      $userres = array();

      // SALESFORCE - get list of Emails to query SF with.
      $emails = array();
      $getemails = $inusers;
      foreach ($getemails as $row) {
        $emails[] = $row->mail;
      }

      $sfdata = '';
      $mailmismatches_active = array();
      $mailmismatches_inactive = array();
      $statusactivetoinactive = array();
      $statusinactivetoactive = array();
      foreach ($inusers as $keyyyy => $row) {
        $profile = FALSE;
        if (!isset($sfdata[$row->mail])) {
          $lastname = '';
          $firstname = '';
          $companyname = '';
          if (isset($profilesarr[$row->uid][1])) {
            $firstname = $profilesarr[$row->uid][1];
          }
          if (isset($profilesarr[$row->uid][2])) {
            $lastname = $profilesarr[$row->uid][2];
          }
          if (isset($profilesarr[$row->uid][3])) {
            $companyname = $profilesarr[$row->uid][3];
          }
          $profile = array(
            'id' => 0,
            'email' => $row->mail,
            'firstname' => $firstname,
            'lastname' => $lastname,
            'company' => $companyname,
            'inactive' => $row->status,
            'expiry_date' => '',
            'expiry' => 0,
            'title' => '',
            'homephone' => '',
            'mobilephone' => '',
          );
          $message = "D5 email not in SF, so we use D5 data instead. Email: " . $row->mail . "Data: " . print_r($profile, TRUE);

        }
        else {
          $profile = $sfdata[$row->mail];
        }

        $sfstatus = 0;

        $d5status = $row->status;

        $finalstatus = 0;

        if ($profile['expiry'] > 0) {
          // Determine status based on SF.
          $now = time();
          if ($profile['expiry'] > $now && !$profile['inactive']) {
            $sfstatus = 1;
            $finalstatus = 1;
          }

          // If D5 says active & SF says Inactive, or vice versa,
          // report the conflict.
          if ($sfstatus <> $d5status) {
            if ($d5status) {
              // Drupal user going from active to inactive.
              $statusactivetoinactive[$row->mail][] = $profile;
            }
            if ($sfstatus) {
              // Drupal user going from inactive to active.
              $statusinactivetoactive[$row->mail][] = $profile;
            }

            $profile['d5_status'] = $d5status;
            $profile['sf_status'] = $sfstatus;
            $profile['final_status'] = $finalstatus;
            $sfstatusstr = "INACTIVE";
            if ($sfstatus) {
              $sfstatusstr = "ACTIVE";
            }
            $oldstatusstr = "INACTIVE";
            if ($row->status) {
              $oldstatusstr = "ACTIVE";
            }
            $message = t('D5 says user %firstname %lastname ( %email ) is %oldstatus but Salesforce says status is %sfstatus. Inactive: %inactive Expiration Date: %expiry',
              array(
                '%email' => $row->mail,
                '%firstname' => $profile['firstname'],
                '%lastname' => $profile['lastname'],
                '%sfstatus' => $sfstatusstr,
                '%oldstatus' => $oldstatusstr,
                '%expiry' => date('m-d-y', $profile['expiry']),
                '%inactive' => $profile['inactive'],
              )
            );

            if ($finalstatus) {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
            else {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
          }
        }
        else {
          // If there is no expiry or no sf data.
          $finalstatus = $d5status;
          if ($finalstatus) {
            $mailmismatches_active[$row->mail][] = $profile;
          }
          else {
            $mailmismatches_inactive[$row->mail][] = $profile;
          }
        }

        $usr = array(
          'uid' => $row->uid,
          'name' => $row->name,
          'mail' => $row->mail,
          'pass' => $row->pass,
          'status' => $finalstatus,
          'login' => $row->login,
          'created' => $row->created,
        );
        $userres[$row->uid] = array_merge($usr, $profile);
        if ($keyyyy > 6018) {
        }
      }

      $rolesarr = array();
      foreach ($roleres as $uid => $roles) {
        $uidstr = (string) $uid;
        if (isset($trial_uids[$uidstr])) {
          foreach ($trialnewroles as $newrid) {
            $newridstr = (string) $newrid;
            $newrole = $newroles[$newridstr];
            $rolesarr[$uidstr][$newridstr] = $newrole;
          }
        }
        else {
          foreach ($roles as $rid) {
            $newrids = $rolemap[$rid];
            foreach ($newrids as $newrid) {
              $newridstr = (string) $newrid;
              $ind = (string) $rid;
              $newrole = $newroles[$ind];
              $rolesarr[$uidstr][$newridstr] = $newrole;
            }
          }
        }
      }

    }
  }
  foreach ($userres as $uid => $olduser) {
    if (empty($olduser['mail'])) {
      continue;
    }
    $uidstr = (string) $uid;
    $userroles = FALSE;
    if (isset($rolesarr[$uidstr])) {
      $userroles = $rolesarr[$uidstr];
    }
    $batch['operations'][] = array('_fin_migrate_batch_process_users',
      array($olduser, $userroles),
    );
  }
}

/**
 * Process Users batch.
 */
function _fin_migrate_batch_process_users(array $olduser, $userroles, &$context) {

  require_once 'includes/password.inc';

  $mail = (string) $olduser['mail'];
  if (substr($mail, 0, 1) == "@") {
    $oldmail = $mail;
    $mail = 'corrected' . $fname . '.' . $lname . $mail;
  }

  $oldpass = (string) $olduser['pass'];
  $newpass = 'qapla';
  $noroles = FALSE;
  if ($userroles) {
    $fields = array(
      'name' => $olduser['name'],
      'mail' => $olduser['mail'],
      'pass' => $newpass,
      'status' => $olduser['status'],
      'init' => $olduser['mail'],
      'roles' => $userroles,
      'created' => $olduser['created'],
      'access' => $olduser['login'],
    );
  }
  else {
    $message = "This User " . print_r($olduser, TRUE) . " does not have any roles. Something went wrong here";
    watchdog('FIN_MIGRATE', $message, array(), WATCHDOG_WARNING);
    $fields = array(
      'name' => $olduser['name'],
      'mail' => $olduser['mail'],
      'pass' => $newpass,
      'status' => $olduser['status'],
      'init' => (string) $olduser['mail'],
      'created' => $olduser['created'],
      'login' => $olduser['login'],
    );
  }

  // 013116 - for some reason there is a duplicate key error, remedy here.
  $curuser = user_load_by_mail($olduser['mail']);
  $uname = $olduser['name'];
  if ($curuser) {
    return;
  }
  if (!$curuser) {
    $acct = new stdClass();
    $acct->active = 1;

    $curuser = user_save($acct, $fields);

    $newuid = (int) $curuser->uid;
    $context['message'] = 'New user created with user id ' . $newuid;
    $nameslist[$uname] = $uname;
    $newpass = user_hash_password($oldpass);
    if ($newpass) {
      // Indicate an updated password.
      $newpass  = 'U' . $newpass;
    }

    db_update('users')->fields(array('pass' => $newpass))->condition('uid', $curuser->uid)->execute();

    $oldnew[$uid] = $newuid;
    $newold[$newuid] = $uid;

    $uidmaps = array();
    $uidmaps['oldnew'] = $oldnew;
    $uidmaps['newold'] = $newold;
    $uidmaps['nameslist'] = $nameslist;
  }

  // Plw 0116 now take care of organization & profile2, extract bio data first.
  $message = '';
  $username = (string) $olduser['name'];
  $email = (string) $olduser['mail'];
  $lastname = $olduser['lastname'];
  $firstname = $olduser['firstname'];
  $companyname = $olduser['company'];

  $organization_nid = 0;
  if ($companyname) {
    $organization_nid = _fin_migrate_get_entity_by_name('field_organization_name', $olduser['company'], 'organization', 'node');
    if (!$organization_nid) {
      try {
        $organization = entity_create('node',
          array('type' => 'organization', 'uid' => 1, 'status' => 1));
        $organization->field_organization_name[LANGUAGE_NONE][0]['value'] = $companyname;
        $organization->title = $companyname;
        entity_save('node', $organization);
        $organization_nid = $organization->nid;
        $message = t('Created new Organization %company from D5 Row: %data.',
          array(
            '%company' => $companyname,
            '%data' => print_r($row, TRUE),
          )
        );
      }
      catch (Exception $e) {
        $message = t('Failed to create organization %company from D5 Row: %data. Error: @msg<br /><br />%data',
           array(
             '%username' => $username,
             '%email' => $email,
             '%data' => print_r($row, TRUE),
             '@msg' => $e->getMessage(),
           )
         );
      }
      if ($message) {
        watchdog('FIN_MIGRATE_ORGANIZATION', $message, array(), WATCHDOG_INFO);
        $message = '';
      }
    }
  }

  $main_profile = fin_migrate_profile2_by_uid_load($newuid, 'main');
  if (!$main_profile) {
    $main_profile = entity_create('profile2', array('type' => 'main', 'node'));
  }
  $action = 'Update';
  if ($main_profile->uid) {
    $action = 'Create';
  }
  try {
    if (!$main_profile->uid && $uid) {
      $main_profile->uid = $uid;
      $message = t('Profile attached to a User. This should only happen w/new profiles. User %username ( %email ) UID %uid',
        array(
          '%username' => $username,
          '%email' => $email,
          '%uid' => $newuid,
        )
      );
    }
    $main_profile->field_pf_first_name[LANGUAGE_NONE][0]['value'] = $olduser['firstname'];
    $main_profile->field_pf_last_name[LANGUAGE_NONE][0]['value'] = $olduser['lastname'];
    $main_profile->field_pf_job_title[LANGUAGE_NONE][0]['value'] = $olduser['title'];
    $main_profile->field_pf_expiration_date[LANGUAGE_NONE][0]['value'] = $olduser['expiry'];
    if ($organization_nid) {
      $main_profile->field_pf_organization[LANGUAGE_NONE][0]['target_id'] = $organization_nid;
    }
    entity_save('node', $main_profile);

    $message = t('Successfully %action profile for user %username ( %email ) from D5 Row: %data.',
      array(
        '%action' => $action . 'd',
        '%username' => $username,
        '%email' => $email,
        '%data' => print_r($row, TRUE),
      )
    );
  }
  catch (Exception $e) {
    $message = t('Failed to %action profile for user %username ( %email ) from D5 Row: %data. Error: @msg',
      array(
        '%action' => $action,
        '%username' => $username,
        '%email' => $email,
        '%data' => print_r($row, TRUE),
        '@msg' => $e->getMessage(),
      )
    );
  }
  if ($message) {
    watchdog('FIN_MIGRATE_PROFILE2', $message, array(), WATCHDOG_INFO);
    $message = '';
  }
}

/*
 * HELPER FUNCTIONS FOR USERS
 */

/**
 * Create csv file reports for Salesforce Reconciliation.
 */
function _fin_migrate_make_csv($inarr) {
  if ($inarr) {
    $arr = array(
      'firstname',
      'lastname',
      'company',
      'email',
      'inactive',
      'expiry_date',
    );

    $header = FALSE;
    foreach ($inarr as $row_raw) {
      $row = array();
      foreach ($arr as $fld) {
        $row[$fld] = $row_raw[0][$fld];
      }
      if (!$header) {
        $out[] = '"' . implode('" , "', array_keys($row)) . '"';
        $header = TRUE;
      }
      $vals = array_values($row);
      $out[] = '"' . implode('" , "', $vals) . '"';
    }
    return implode("\r\n", $out);
  }
  return FALSE;
}

/**
 * Get salesforce data via their API.
 */
function _fin_migrate_get_sfdata($emails) {
  /*
   * Grab Salesforce datga
   */
  $params = array(
    'new-users' => array(
      'Contact' => array(
        'fields' => array(
          'Inactive__c' => 'inactive',
          'FINsearches_Expiration_New__c' => 'expiry',
          'FirstName' => 'firstname',
          'LastName' => 'lastname',
          'Email' => 'email' ,
          'Account.Name' => 'company',
          'Title' => 'title',
          'HomePhone' => 'homephone',
          'MobilePhone' => 'mobilephone',
        ),
        'types' => array(
          'Contact',
        ),
      ),
    ),
  );
  $sfapi = salesforce_get_api();
  $out = FALSE;
  foreach ($params as $pseudonym => $maps) {
    foreach ($maps as $sf_object_type => $map) {
      $mapped_fields = $map['fields'];
      $sf_object_type = $map['types'][0];
      $soql = new SalesforceSelectQuery($sf_object_type);

      // Convert field mappings to SOQL.
      $soql->fields = array('Id', 'LastModifiedDate');
      foreach ($mapped_fields as $field => $ignore) {
        $soql->fields[] = $field;
      }

      $chunks = array_chunk($emails, 400);
      foreach ($chunks as $chunk) {
        $soql->conditions = array();
        $soql->addCondition('Email', $chunk, 'IN');

        // Execute query.
        $results = $sfapi->query($soql);
        if (!isset($results['errorCode'])) {
          $rows = $results['records'];
          foreach ($rows as $row) {
            $email = $row['Email'];
            if ($email) {
              $arr = array();
              foreach ($row as $key => $val) {
                if ($key == "Account") {
                  $val = $val['Name'];
                  $alias = 'company';
                  $arr[$alias] = $val;
                }
                if (isset($mapped_fields[$key])) {
                  $alias = $mapped_fields[$key];
                  if ($alias == "expiry") {
                    $arr['expiry_date'] = $val;
                    $val = strtotime($val);
                  }
                  if ($alias == "company") {
                    $val = $val['Name'];
                  }
                  $arr[$alias] = $val;
                }
                elseif (($key == 'Id')) {
                  $arr['id'] = $val;
                }
              }
              $out[$email] = $arr;
            }
            else {
              $message = "MISSING EMAIL - Row: " . print_r($row, TRUE);
              watchdog('SF_MIGRATION_SF', $message, array(), WATCHDOG_ERROR);
            }
          }
        }
      } // if results
    } // each map
  } // all maps

  $message = "SF OUT: " . print_r($out, TRUE);
  watchdog('FIN_MIGRATE_SF', $message, array(), WATCHDOG_INFO);
  return $out;
}

/**
 * Load user by id.
 */
function fin_migrate_profile2_by_uid_load($uid, $type_name) {
  if ($uid && is_numeric($uid) && ($account = user_load($uid))) {
    $profile = profile2_load_by_user($account, $type_name);
    if (!$profile) {
      $profile = profile2_create(array('type' => $type_name, 'uid' => $uid));
      $profile->setUser($account);
      $profile->is_new = TRUE;
    }
    return $profile;
  }
  return FALSE;
}

/**
 * Load entity by entity title, lable.
 */
function _fin_migrate_get_entity_by_name($fieldname, $name, $bundle, $type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_organization_name', 'value', $name, '=');
  $result = $query->execute();

  $id = FALSE;
  if (isset($result['node'])) {
    $ids = array_keys($result['node']);
    if ($ids) {
      $id = $ids[0];
      return $id;
    }
  }
  return FALSE;
}
//////////////// END SECTION USERS /////////////////

/* SECTION STEP1
 * /////////////// Create bare nodes //////////////
 */

/**
 * Node part one batch wrapper.
 */
function fin_migrate_do_step1(&$batch, $mode='step1') {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit', '1024M');
  
  // Get Parameters.
  //$nodemaparr = fin_migrate_get_nodemaps('step1');
  $arrs = fin_migrate_get_nodemaps($mode);
  $nodemaparr = $arrs['maps'];
  
  $movement = 0;
  $howmanymovements = count($nodemaparr);

  foreach ($nodemaparr as $maparr) {
    foreach ($maparr as $pseudonym => $map) {
      $movement++;
      $params = $map['params'];
      $table = $params['oldtable'];
      $dst = $params['dst'];
      $pkeyname = $params['oldkeyfldname'];
      $bundle = '';
      if (isset($params['bundle'])) {
        $bundle = $params['bundle'];
      }
      $namefldname = '';
      $checkname = FALSE;
      $namenids = array();
      if (isset($params['checkname'])) {
        $namefldname = $params['checkname']['fldname'];
        $checkname = TRUE;
      }

      $sql = "select srcid from {fin_migrate_node} where pseudonym='".$pseudonym."'";
      
      $res = db_query($sql);
      $ids = array();
      foreach ($res as $row) {
        $ids[] = $row->srcid;
      }
      $where = '';
      if (!empty($ids)) {
        $where = 'WHERE '.$pkeyname.' NOT IN ('.implode(', ', $ids).')';
        $and = 'AND '.$pkeyname.' NOT IN ('.implode(', ', $ids).')';
      }
      
      switch ($pseudonym) {
        case 'news':
          //$sql = "SELECT * FROM {tblnews} WHERE NewsID in(SELECT max(NewsID) FROM `tblnews` ".$where." group by Title)";
        $sql = "SELECT * FROM {tblnews} WHERE NewsID in(SELECT max(NewsID) FROM `tblnews` ".$where." group by Title, Type, FirmID)";  
        break;
        default:
          $sql = "select * from {" . $table . "} ".$where;
        break;
      }
      //0507 PLW handle news too
      //$sql = "select * from {" . $table . "} ".$where;
      
$message = "PSEUDO: ".$pseudonym."|SQL: ".$sql;
watchdog('DEBUG22', $message, array(), WATCHDOG_INFO);

      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();

      if ($result) {
        $start = time();
        foreach ($result as $row) {
          $batch['operations'][] = array('_fin_migrate_process_batch_step1',
            array(
              $pseudonym,
              $dst,
              $table,
              $pkeyname,               
              $row,
              $checkname,
              $namefldname,
              $pkeyname,
            ),
          );
        } // each row
      } // if result
    } // foreach pseudonym
  }
  return TRUE;
}

/**
 * Process Step1 Batch
 */
function _fin_migrate_process_batch_step1($pseudonym, $dst, $table, $pkeyname, $row, $checkname, $namefldname, $pkeyname, &$context) {

  global $DEFAULT_OWNER_UID;

  $id = $row->$pkeyname;
  $nid = 0;
  // Are we setting up contacts? Does this contact-by-email-address exist?
  if ($checkname) {
    $namenids = unserialize(variable_get('fin-migrate-contact-contactnames'));          
    //$contactname = $row->{$namefldname};
    $contactname = trim($row->ContactName);
    $contactname = str_replace("'", "`", $contactname);
    if (isset($namenids[$contactname])) {
      // We have a NID. Take care of business then move on to next record
      $nid = $namenids[$contactname]['nid'];
      $namenids[$contactname]['hits']++;      
      variable_set('fin-migrate-contact-contactnames',serialize($namenids));
      
      $message = "Contact exist. " . $pseudonym . " Name " . $contactname . " Update NID: " . $nid . " | ID: " . $id;
      watchdog('FIN_MIGRATE_BATCH_CONTACT_NAME_MULTIPLE', $message, array(), WATCHDOG_INFO);
    }
  }
  if (!$nid) {
    $created = strtotime($row->CreatedOn);
    $changed = strtotime($row->UpdatedOn);
    if ($created < 0 or !is_numeric($created)) {
      $bad = $created;
      $created = $changed;
      if ($created < 0 or !is_numeric($created)) {
        $bad2 = $created;
        
        //0604 make more than 32 days old
        //$created = time();
        $created = time()-(32*24*60*60);
        $changed = $created;
      }
    }
    elseif ($changed < 0 or !is_numeric($created)) {
      $bad = $changed;
      $changed = $created;
    }

    if ($dst=="contact") {
        $title = "contactmigration|".$pseudonym."|".$id . "|" . $contactname;
    } else {
        $title = "migration|".$pseudonym . "|" . $id;
    }   
    $values = array(
      'title' => $title,
      'type' => $dst,
      'uid' => $DEFAULT_OWNER_UID,
      'status' => 1,
      'promote' => 0,
      'created' => $created,
      'changed' => $changed,
    );
    $entity = entity_create('node', $values);
    $n_wrapper = entity_metadata_wrapper('node', $entity);
    $n_wrapper->save();
    $nid = (int) $n_wrapper->getidentifier();

    if ($nid) {
      _fin_migrate_add_to_oldnew_node_table($pseudonym, $id, $nid, $contactname);
 
      if ($checkname) {
        // We created a new node, now we need to create a new entry in the Names list
        $namenids[$contactname]['hits'] = 1;
        $namenids[$contactname]['nid'] = $nid;
        variable_set('fin-migrate-contact-contactnames',serialize($namenids));      
      
      // PLW 0516 wrong place }

        $message = "Contact Node (".$nid.") created for Multiple Contact ".$contactName;
        watchdog('FIN_MIGRATE_CONTACT_MULTIPLE', $message, array(), WATCHDOG_INFO);

        $context['message'] = 'Created a new ' . $n_wrapper->value()->type . '  node with nid ' . $n_wrapper->value()->nid;
      } //plw 0516 correct place
    }
  } // if row produced ids
} // end batch processing for a single row

/**
 * Get content field mapping for migration.
 */

function profile2_by_uid_load($uid, $type_name) {
  if ($uid && is_numeric($uid) && ($account = user_load($uid))) {
    $profile = profile2_load_by_user($account, $type_name);
    if (!$profile) {
      $profile = profile2_create(array('type' => $type_name, 'uid' => $uid));
      $profile->setUser($account);
      $profile->is_new = TRUE;
    }
    return $profile;
  }
  return FALSE;
}


/* SECTION Step2
 * //////////////////// STEP2 /////////////////////
 */
//function fin_migrate_do_step2(&$batch) {
function fin_migrate_do_step2(&$batch, $mode='step2') {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit','1024M');

  // Build New Old & Old New w/latest step1 content
  //_fin_migrate_add_step1_nodes_to_oldnew();

  // Get Parameters
  //$nodeMapArr = fin_migrate_get_nodemaps('step2');
  $arrs = fin_migrate_get_nodemaps($mode);
  $nodeMapArr = $arrs['maps'];
  $limit = 100000;
  if (!empty($arrs['limit'])) {
    $limit = $arrs['limit'];
  }

  $termMap = _fin_migrate_prep_terms();

  // END TERM MAP ARRAY

  $movement = 0;
  $howManyMovements = count($nodeMapArr);
  foreach ($nodeMapArr as $mapArr) {
    foreach ($mapArr as $pseudonym => $map) {
      $movement++;
      $context['message'] = "Step (2/2) Movement (".$movement."/".$howManyMovements.") Moving ".$pseudonym;

      $params = $map['params'];
      $dst = $params['dst'];
 
      // Contacts require completely different handling
      if ($dst=='contact') {
        //fin_migrate_do_step2a($pseudonym, $map, $termMap, $newOld, $oldNew);
        //fin_migrate_do_step2a($pseudonym, $map, $termMap, $batch);
        continue;
      } else {
        $table = $params['oldtable'];        
        $pKeyName = $params['oldkeyfldname'];            

        $pseudo = $pseudonym;
        $pseudoArr = array(
          'plan-history' => 'plan',
          'mandate-history' => 'mandate',
        );
        if (isset($pseudoArr[$pseudonym])) {
          $pseudo = $pseudoArr[$pseudonym];
        }
        $checksql = "select srcid from {fin_migrate_node} where pseudonym='".$pseudo."' and step2=1";
        $res = db_query($checksql);
        $arr = array();
        foreach ($res as $row) {
          $arr[] = $row->srcid;
        }
        $where = '';
        $and = '';
        if (!empty($arr)) {
          $not = implode(", ", $arr);
          $where = " WHERE ".$pKeyName." NOT IN (".$not.")";
          $and = " AND ".$pKeyName." NOT IN (".$not.")";
        }
        // see what ids to draw from a table
        db_set_active('legacy');
        switch($pseudonym) {
          //if ($dst=="plan") {
          case 'news':
            //$sql = "SELECT * FROM {tblnews} WHERE NewsID in(SELECT max(NewsID) FROM `tblnews` WHERE 1 group by Title)";
            $sql = "SELECT * FROM {tblnews} WHERE NewsID in(SELECT max(NewsID) FROM `tblnews` WHERE 1 group by Title, Type, FirmID)";

          break;
          case 'plan':
            $sql = "select * from {".$table."} where Status=1".$and;        
            if (isset($params['step3'])) {
              $sql = "select * from {".$table."}";
            }
            
            //$sql = "select * from {".$table."} where FundID=6114";        
            //$sql = "select * from {".$table."} where Status=1 AND FundID NOT IN (6114, 6139, 6763) ".$and;
            //ID 6114
          break;
          case 'plan-history':
            $sql = "SELECT * FROM {tblfunds} ".$where;
          break;
          case 'mandate-history':
            $sql = "SELECT * FROM {tblmandates} ".$where;
          break;
          case 'mandate':
            //} else if ($dst=="mandate") {
            $sql = "select * from {".$table."} WHERE FundID in (select FundID from tblfunds where Status=1) ".$and." ORDER BY MandateID";
            //$sql = "select * from {".$table."} ".$where." and FundID in (select FundID from tblfunds where Status=1) ORDER BY MandateID DESC";
          break;
          default:
          //} else {
            $sql = "select * from {".$table."} ".$where;
          break;
        }
        $result = db_query($sql);
        db_set_active();

        $howManyRows = $result->rowCount();
        $rowCount=0;

        $start = time();
        foreach ($result as $row) {
          $batch['operations'][] = array('_fin_migrate_process_batch_step2',
            array(
              $pseudonym,
              $dst,
              $table,
              $row,
              $map,
              $termMap,
              $start,
              $pKeyName
            ),
          );
          $rowCount++;

if ($rowCount>$limit) {
  return;
  //die("Step2 Type: ".$dst."| Elapsed time: ".$elapsed." Seconds. Count: ".$rowCount."-Step2 - Another 6000 complete, start next");
}

        }
      }
    }
  }
}

function _fin_migrate_process_batch_step2($pseudonym, $dst, $table, $row, $map, $termMap, $start, $pKeyName, &$context) {
  $id = (int) $row->$pKeyName;
  $nid = _fin_migrate_gotIdgetNid($id, $pseudonym);

// temporary, I mistakenly deleted 18 plans
if (!empty($nid)) {
    $node = node_load($nid);
$message = "NODE LOAD: NID: ".$nid." | ".print_r($node,true);
watchdog('DEBUGAA0', $message, array(), WATCHDOG_INFO);

    if (!$node) {
      $nid=0;
    }
  }
  if ($id && $nid) {
    $entity = $node;
    $wrapper = entity_metadata_wrapper('node', $node);
    _fin_migrate_handler_system($map['system'], $row, $wrapper, $entity, $termMap);

    $fields = $map['fields'];
    _fin_migrate_process_fields($fields, $row, $wrapper, $entity, $termMap, $pKeyName, $id);

    //zzzzzz
    $success = TRUE;
    try {
      $wrapper->save();
      _fin_migrate_postdate($node);
    }
    catch (Exception $e) {
      $success = FALSE;
      $message = 'NODE - ID: '.$id.' NID: '.$nid.' PSEUDONYM: '.$pseudonym.'<br><br>Error: '.$e->getMessage().'<br><br>Row: '.print_r($row,true);
      watchdog('FIN_MIGRATE_SAVE_FAILED', $message, array(), WATCHDOG_CRITICAL);
    }
    
    if ($success) {
      // Fix Ampersand in title issue
      $newTitle = $wrapper->title->value(); 
      if (empty($newTitle)) {
        $message = "ID: ".$id."|NID: ".$nid."|DATA<br><br>".print_r($wrapper,true);
        watchdog('FIN_MIGRATE_TITLE_FAIL',$message, array(),WATCHDOG_INFO);
      }
      _fin_migrate_node_step2_updated($nid);
  
      $elapsed = time()-$start;
      $context['message'] = '[T+'.$elapsed.' Seconds] '.$pseudonym.'- Updated ' . $wrapper->value()->type . '  node with nid ' . $wrapper->value()->nid;
    }
  } else {
    $message = "Oops, for some reason, node not successfully created | id: ".$id." | nid: ".$nid." | Data: ".print_r($row,true);
    watchdog('FIN_MIGRATE_NODE_STEP2', $message, array(), WATCHDOG_WARNING);
    $failed = TRUE;
  } // if row produced ids
} 

/* SECTION STEP2A - Special Handling for Contacts
 * ////////////////// STEP 2A //////////////////////////
 */
/*
 * Special Handling for all d5 contact data
 *
 * Combine all Contact Tables into a single large array, process array.
 * Populate Step1 contact nodes w/basic information, use the rest to
 * create the Job History.
 */
//function fin_migrate_do_step2a($pseudonym, $map, $termMap, &$newOld_ref, &$oldNew_ref) {
function fin_migrate_do_step2a(&$batch, $mode="contacts") {
  $pseudonym = "contact";
  $termMap = _fin_migrate_prep_terms();

  //make namenids
  $sql = "select contactname, nid from {fin_migrate_node} where contactname<>''";
  $res = db_query($sql);
  $nameNids = array();
  foreach ($res as $row) {
    $nameNids[$row->contactname]['nid'] = $row->nid;
  }

  //$mapArr = fin_migrate_get_nodemaps('step2a');
  //$map = $mapArr[$pseudonym];
  $arrs = fin_migrate_get_nodemaps('contacts');
  //$map = $arrs['maps']['contact'];
  $map = $arrs['maps'][0]['contact'];
  $limit = $arrs['limit'];

  $donesql = "select contactname from {fin_migrate_node} where step2=1 and contactname<>''";
  $doneres = db_query($donesql);
  $done = array();
  foreach ($doneres as $donerow) {
    $done[$donerow->contactname] = $donerow->contactname;
  }

  //$variable = 'fin-migrate-contact-contactnames';
  //$nameNids = unserialize(variable_get('fin-migrate-contact-contactnames'));

  $arrs = array();
  $arrs = _fin_migrate_prep_employment_dates($done);
  $names = $arrs['names'];
  $jobs = $arrs['jobs'];

/*
$arr = array();
$arr['Michael Smith'] = $jobs['Michael Smith'];
$jobs = $arr;
*/

  if ($jobs) {
    $howManyRows = count($jobs);
    $rowCount = 0;
    $starttime = time();
    
    foreach ($jobs as $contactName => $row) {
      // CRITICAL PLW 0316
      //ksort($row);
      
      $nid = $nameNids[$contactName]['nid'];
      $batch['operations'][] = array('_fin_migrate_process_batch_step2a',
        array(
          $starttime,
          $pseudonym,
          $contactName,
          $nid,
          $row,
          $map,
          $termMap,
        ),
      );
      $rowCount++;
//$limit=8000;
if ($rowCount>$limit) {
  return;
}

    }
  }
}

function _fin_migrate_process_batch_step2a($starttime, $pseudonym, $contactName, $nid, $row, $map, $termMap, &$context) {
  
  // CRITICAL PLW 0316
  ksort($row);

  if (empty($nid)) {
    $message = $contactName." not on namenids. Row: ".print_r($row,true);
    watchdog('FIN_MIGRATE_MISSING_CONTACT', $message, array(), WATCHDOG_ERROR);
  } else {

  //Now that we have a person jobs, let aggregate pictures and bio
  $scoop = $row;

  // CRITICAL PLW 0316
  ksort($scoop);
  
  $picture = '';
  $bio = '';
  $firstRow = TRUE;
  $sysArr = array();
  foreach ($scoop as $start => $more) {
    foreach ($more as $tbl => $yetmore) {
      foreach ($yetmore as $rowid => $data) {
        //if (!$bio && !empty($data['Bio'])) {
        if (!empty($data['Bio'])) {
          $bio = $data['Bio'];
        }
        //if (!$picture && !empty($data['Picture'])) {
        if (!empty($data['Picture'])) {
          $picture = $data['Picture'];
        }
      }
    }
  }
  $sysArr['Bio'] = $bio;
  $sysArr['Picture'] = $picture;
  $sysArr['ContactName'] = $contactName;
  $sysData = (object) $sysArr;
  $node = node_load($nid);
  $oldTitle = $node->title;
  $wrapper = entity_metadata_wrapper('node', $node);

  // we want to pass in both entity and wrapper, just keeping true to naming
  $entity = $node;
  // Basic Contact Node data populated here
  _fin_migrate_handler_system($map['system'], $sysData, $wrapper, $entity, $termMap);
    
  $newTitle = $wrapper->title->value();

  $jobMap = $map['job-history'];
  $params = $jobMap['params'];
  $hostFldName = $params['hostfield'];
  $bundles = $jobMap['bundles'];
  $wrappers = array();
    
  foreach ($row as $start => $tblarr) {
    foreach ($tblarr as $tbl => $idarr) {
      $fields = $bundles[$tbl]['fields'];        
      foreach ($idarr as $id => $data) {
        $wrapperArr = array();
        $inData = (object) $data;
          
        // Now, we call the function to create the paragraphs
        $paragraph = $bundles[$tbl];
        $bundle = $paragraph['params']['bundle'];
        $deferSave = TRUE;
          // only needed if we will query another table, not this time
        $wrapperArr = _fin_migrate_handler_paragraph($bundle, $hostFldName, $paragraph, $inData, $wrapper, $entity, $termMap);       
        //even done one at a time, a single product is wrapped in an box, or array
        $wrappers[] = $wrapperArr[0];
      }
    }
  }

  //The Contact and its Job History have been built, save everything now
  /*
  foreach ($wrappers as $p_wrapper) {
    $p_wrapper->save();
  }
  $wrapper->save();
  */
    //The Contact and its Job History have been built, save everything now
  $mostRecent = '';
  foreach ($wrappers as $p_wrapper) {
    $p_wrapper->save();
    $mostRecent = $p_wrapper;
  }
// Use last p_wrapper (most recent job) to populate latest fields
/* PLW 062516 NO MORE LATEST FIELDS, deprecate  
  $stat = $p_wrapper->field_status_tr->raw();
  //The TID for 'Active' is 340
  if ($stat==340) {
    // PLW 062816 no more latest fields
    //_fin_migrate_get_latest_data($mostRecent, $entity, $wrapper);
    $wrapper->save();
  }
  */
      
  // hide new & updated
  _fin_migrate_postdate($node);

  _fin_migrate_node_step2_updated($nid);

  $message = t("Old Title: %oldtitle | New Title: %newtitle", array(
   'oldtitle' => $oldTitle,
   'newtitle' => $newTitle,
    ));
  //watchdog('FIN_MIGRATE_CONTACT_NODE_UPDATED', $message, array(), WATCHDOG_INFO);
     
  $elapsed = time()-$starttime;
  $context['message'] = '[T+'.$elapsed.' Seconds] '.$pseudonym.'- Updated ' . $wrapper->value()->type . '  node with nid ' . $wrapper->value()->nid;
             
  if (!$entity) {
    $message = "ENTITY ID: ".$id." NID: ".$nid." NOT loaded. Element: ".print_r($entity,true)."--";
    watchdog('FIN_MIGRATE_NODE_'.$pseudonym.'-STEP 2', $message, array(), WATCHDOG_ERROR);
  } // end main if else
  } // each row
} // end function

 /*
 * Function to calculate Employment dates w/CreatedOn & UpdatedOn fields
 *
 * @Summary - The old database does not provide employment dates. So 
 * this function uses CreatedOn and UpdatedOn dates from each record in
 * tables tblconsultantcontacts, tblfundcontacts, tblmanagercontacts to
 * Calculate them.  Logic is as follow:
 * 
 * For Each record = a job
 * All Job Start Date = CreatedOn, in Unix format (# of seconds since 1/1/1970
 * For the most recent job, end = updatedOn if inactive=1, 0 otherwise
 * For other jobs, end = previous createdOn - 1 day, all set to inactive
 *
 * UPDATE: Original plan was a specific purpose task, but now it expanded
 * to process fields as well, given the map and term map as input.  So not 
 * do we build an array of employemt dates, but also embed translated, migrated
 * data with data assigned to the destination fields.  This way, the heavy lifting is
 * done at once and it simplifies the code that acxtually creates the paragraphs.
 */
function _fin_migrate_prep_employment_dates($done) {
  $message = "Assemble Jobs, except for: <br><br>".print_r($done,true);
  watchdog('FIN_MIGRATE_JOBS_TABLE', $message, array(), WATCHDOG_INFO);

  $arr = array();
 
   $tbl = 'tblconsultantcontacts';
  $id = 'ConsultantContactID';
  _fin_migrate_grab_job_data($tbl, $id, $arr, $done);

  $tbl = 'tblfundcontacts';
  $id = 'FundContactID';
  _fin_migrate_grab_job_data($tbl, $id, $arr, $done);

  $tbl = 'tblmanagercontacts';
  $id = 'ManagerContactID';
  _fin_migrate_grab_job_data($tbl, $id, $arr, $done);

  // now we have a full array, build an array of distinct contact names
  $contactNames = array();
  foreach ($arr as $contactName => $ignore) {
    $contactNames[$contactName] = $contactName;
  }

  // now, start filling in start & end dates in dates array
  // We sort each set in reverse order, so we can harvest the start date of one job
  // for the next record
  // If you are curious, 86400 is the number of seconds in 1 day, I added 60 seconds
  // to it so a midnight start date becomes 11:59PM the day before
  foreach ($contactNames as $contactName) {
    $set = $arr[$contactName];
    krsort($set);
    $solo = TRUE;
    if (count($set)>1) {
      $solo = FALSE;
    }
    $firstRow = TRUE;
 
    foreach ($set as $start => $more) {
      foreach ($more as $tbl => $yetmore) {
        foreach ($yetmore as $rowid => $data) {
          //$arr[$contactName][$start][$tbl][$rowid]['start'] = strtotime($data['createdon']);
          //$arr[$contactName][$start][$tbl][$rowid]['start'] = strtotime($data['createdon']);
          $inactive = (int) $data['Inactive'];
          $updatedOn = strtotime($data['UpdatedOn']);

          if ($solo) {
            if ($inactive) {
              $end = strtotime($data['UpdatedOn']);
              $arr[$contactName][$start][$tbl][$rowid]['inactive'] = 1;            
            }
          } else {
            //multiple rows
            if ($firstRow) {
              if ($inactive) {
                $end = strtotime($data['UpdatedOn']);
                $arr[$contactName][$start][$tbl][$rowid]['inactive'] = 1;               
              } else {
                $end = 0;
              }
              $firstRow = FALSE;
              $nextEndDate = $start-86400;
            } else {
              // This Job data may have been updated during a contacts
              // new job. We want jobs to be a stack of pancakes, not
              // the family tree of incestuous time travelers
              if ($inactive && $updatedOn<$nextEndDate) {
                $end = strtotime($data['UpdatedOn']);
              } else {
                $end = $nextEndDate;
              }
              // PLW 062816 Policy change, set inactive to data, not 1
              //$arr[$contactName][$start][$tbl][$rowid]['inactive'] = 1;
              $arr[$contactName][$start][$tbl][$rowid]['inactive'] = $inactive;              
              $nextEndDate = $start-86460;
            }
            $arr[$contactName][$start][$tbl][$rowid]['end'] = $end;          
          }
        }
      }
    }
  }
  
  /* deprecate
  // now that we are done with the sorting field, transfer
  // to a new array we can access easily later on
  //$jobs = array();
  $names = array();
  foreach ($arr as $contactName => $more) {
    foreach ($more as $sort => $yetmore) {
      foreach ($yetmore as $tbl => $evenmore) {
        foreach ($yetmore as $rowid => $data) {
          //$jobs[$contactName][$tbl][$rowid] = $data;
          $names[$contactName] = array(
            'tbl' => $tbl,
            'rowid' => $rowid,
          );
        }
      }
    }
  }
  */

  $out = array('jobs'=>$arr, 'names'=>$contactNames);
  return $out;
}

function _fin_migrate_grab_job_data($tbl, $id, &$out, $done) {
  //$doneStr = '';
  //if ($done) {
  //  $doneStr = "'".implode("','", $done)."'";
  //}

  switch($tbl) {
    case 'tblconsultantcontacts':
      $sql = "SELECT ContactName, %id as id, Inactive, Title, CreatedOn, UpdatedOn, Fax, Phone, Email, Address, City, StateID, CountryID, ZIP, Picture, Bio, ConsultantFirmID as er, ConsultantOfficeID, ConsultantType from {%tbl} %where";
    break;
    case 'tblfundcontacts':
      $sql = "SELECT ContactName, %id as id, Inactive, Title, CreatedOn, UpdatedOn, Fax, Phone, Email, Address, City, StateID, CountryID, ZIP, Picture, Bio, FundID as er from {%tbl} %where";
    break;
    case 'tblmanagercontacts':
      //$sql = "SELECT c.ContactName, %id as id, c.Title as Title, c.CreatedOn as CreatedOn, c.UpdatedOn as UpdatedOn, c.Fax as Fax, c.Phone as Phone, c.Email as Email, c.Picture as Picture, c.ManagerFirmID as er, CONCAT(m.Address1, m.Address2, m.Address3) as Address, m.City as City, m.ZIP as ZIP, m.StateID as StateID,  m.CountryID as CountryID from tblmanagercontacts c, tblmanagerfirms m WHERE c.ManagerFirmID=m.ManagerFirmID %andwhere";

      $sql = "SELECT c.ContactName, ManagerContactID as id, c.Title as Title, c.CreatedOn as CreatedOn, c.UpdatedOn as UpdatedOn, c.Fax as Fax, c.Phone as Phone, c.Email as Email, c.Picture as Picture, c.ManagerFirmID as er, CONCAT(m.Address1, m.Address2, m.Address3) as Address, m.City as City, m.ZIP as ZIP, m.StateID as StateID, m.CountryID as CountryID  from tblmanagercontacts c left join tblmanagerfirms m on c.ManagerFirmID=m.ManagerFirmID %where ";  
    break;
  }
  $sql = str_replace('%id', $id, $sql);
  $sql = str_replace('%tbl', $tbl, $sql);
 
$message = "SQL: ".$sql;
watchdog('DEBUGX', $message, array(), WATCHDOG_INFO);

  $doneStr = '';
  if (!empty($doneStr)) {
    $sql = str_replace('%where', 'WHERE ContactName NOT IN ('.$doneStr.')', $sql);
    $sql = str_replace('%andwhere', ' AND WHERE ContactName NOT IN ('.$doneStr.')', $sql);
  } else {
    $sql = str_replace('%where', '', $sql);
    $sql = str_replace('%andwhere', '', $sql);
  }

$message = "SQL: ".$sql;
watchdog('DEBUGY', $message, array(), WATCHDOG_INFO);

  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();
  if ($res) {
    foreach ($res as $row) {
      $contactName = trim($row->ContactName);
      $contactName = str_replace("'", "`", $contactName);
      
      if (!isset($done[$contactName])) {
        //use 
        $address = '';
        $city = '';
        $stateID = '';
        $countryID = '';
        $zip = '';
        $address = $row->Address;
        $city = $row->City;
        $stateID = $row->StateID;
        $countryID = $row->CountryID;
        $zip = $row->ZIP;
        if ($tbl=='tblmanagercontacts') {
          $inactive = 0;
          $bio = '';
        } else {
          $inactive = $row->Inactive;
          $bio = $row->Bio;
        }     
        $rowid = $row->id;
        $title = $row->Title;
        $er = $row->er;
        $er2 = 0;
        $consultantType = 0;
        $consultantOfficeID = 0;
        if ($tbl=='tblconsultantcontacts') {
          $consultantOfficeID = $row->ConsultantOfficeID;
          $consultantType = $row->ConsultantType;
        }
        $start = strtotime($row->CreatedOn);
        $out[$contactName][$start][$tbl][$rowid] = array(
          'ContactName' => $contactName,
          'CreatedOn' => $row->CreatedOn,
          'Inactive' => $inactive,
          'UpdatedOn' => $row->UpdatedOn,
          'start' => $start,
          'end' => 0,
          'Title' => $title,
          'Address' => $address,
          'City' => $city,
          'ZIP' => $zip,
          'StateID' => $stateID,
          'CountryID' => $countryID,
          'Phone' => $row->Phone,
          'Fax' => $row->Fax,
          'Email' => $row->Email,
          'Picture' => $row->Picture,
          'Bio' => $bio,
          'er' => $row->er,
          'ConsultantOfficeID' => $consultantOfficeID,
          'ConsultantType' => $consultantType,
          'rowid' => $rowid,
        );
      }
    }
  }
}

/* SECTION OLDNEW - link nodes, collections, paragraphs to source table/ids
 * ///////////////////////// OLDNEW //////////////////////////
 */
function _fin_migrate_prep_terms() { 
  // Array containing old, new taxonomies
  $termMap = array(
    'Inactive' => array(
      'values' => array('0' => 'Inactive', '1' => 'Active'),
      'oldfldname' => 'Inactive',
      'oldterms' => array(),
      'newvoc' => '5',
      'newterms' => array(),
    ),
    'AssetClassID' => array(
      'table' => 'tblassetclasses',
      'oldfldname' => 'AssetClassID',
      'termfield' => 'AssetClassName',
      'oldterms' => array(),
      'newvoc' => '9',
      'newterms' => array(),
    ),
    'ClientTypeID' => array(
      'table' => 'tblclienttypes',
      'oldfldname' => 'ClientTypeID',
      'termfield' => 'ClientTypeName',
      'newvoc' => '8',
      'newterms' => array(),
    ),
    'ConsultantTypeID' => array(
      'table' => 'tblconsultanttypes',
      'oldfldname' => 'ConsultantTypeID',
      'termfield' => 'ConsultantTypeName',
      'oldterms' => array(),
      'newvoc' => '4',
      'newterms' => array(),
    ),
    'ConsultantOfficeID' => array(
      'table' => 'tblconsultantoffices',
      'oldfldname' => 'ConsultantOfficeID',      
      'termfield' => 'ConsultantOfficeName',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
    'CurrencyID' => array(
      'table' => 'tblcurrency',
      'oldfldname' => 'CurrencyID',
      'termfield' => 'FullName',
      'oldterms' => array(),
      'newvoc' => '11',
      'newterms' => array(),
    ),
    'DatabasesUsedID' => array(
      'table' => 'tbldatabasesused',
      'oldfldname' => 'DatabasesUsedID',
      'termfield' => 'DatabasesUsedName',
      'oldterms' => array(),
      'newvoc' => '10',
      'newterms' => array(),
    ),
    'FundTypeID' => array(
      'table' => 'tblfundtypes',
      'oldfldname' => 'FundTypeID',
      'termfield' => 'FundType',
      'oldterms' => array(),
      'newvoc' => '12',
      'newterms' => array(),
    ),
    'GeographicID' => array(
      'table' => 'tblgeographic',
      'oldfldname' => 'GeographicID',
      'termfield' => 'GeographicName',
      'oldterms' => array(),
      'newvoc' => '16',
      'newterms' => array(),
    ),
    'MajorStyleID' => array(
      'table' => 'tblmajorstyles',
      'oldfldname' => 'MajorStyleID',
      'termfield' => 'MajorStyle',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'MinorStyleID' => array(
      'table' => 'tblminorstyles',
      'oldfldname' => 'MinorStyleID',
      'termfield' => 'MinorStyle',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'OfficeType' => array(
      'values' => array('0'=>'Branch', '1'=>'Main'),
      'oldfldname' => 'OfficeType',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
    'PlacementPolicy' => array(
      'table' => 'tblplacementpolicies',
      'oldfldname' => 'PlacementPolicy',
      'termfield' => 'PlacementPolicyName',
      'oldterms' => array(),
      'newvoc' => '14',
      'newterms' => array(),
    ),
    'SourceID' => array(
      'table' => 'tblsources',
      'oldfldname' => 'SourceID',
      'termfield' => 'Source',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'StatusID' => array(
      'table' => 'tblstatus',
      'oldfldname' => 'StatusID',
      'termfield' => 'Status',
      'oldterms' => array(),
      'newvoc' => '20',
      'newterms' => array(),
    ),

    'oldtaxonomy' => array(
      'newterms' => array(),
      'terms' => array(),
    ),
  );

  // Fill taxonomy array with new terms
  foreach ($termMap as $pseudonym => $settings) {
    $termIDField = $settings['oldfldname'];
    $out = array();

    if ( isset($settings['table']) ) {
      $id = $termIDField;
      $name = $settings['termfield'];
      $table = $settings['table'];
      db_set_active('legacy'); // Switch databases.
      $sql = "select ".$id." as id, ".$name." as name from {".$table."}";
      $terms = db_query($sql);
      db_set_active();
      foreach ($terms as $term) {
        $out[$term->id] = $term->name;
      }
    }
    else {
      $terms = $settings['values'];
      foreach ($terms as $id => $name) {
        $out[$id] = $name;
      }
    }
    $termMap[$termIDField]['oldterms'] = $out;

    $out = array();
    $vid = $settings['newvoc'];
    if ($vid) {
      $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vid));
      foreach ($terms as $term) {
        $out[$term->name] = $term->tid;
      }
      $termMap[$termIDField]['newterms'] = $out;
      $termMap[$termIDField]['newvoc'] = $vid;  
    }
  }
  return $termMap;
}

function _fin_migrate_update_map($name, $oldNew, $newOld) {
  $var1 = $name .'1';
  $var2 = $name . '2';
  $saveArr = array(
    'oldnew' => serialize($oldNew),
    'newold' => serialize($newOld),
  );
  variable_set($var1, serialize($saveArr));
  variable_set($var2, serialize($saveArr));
}


/* SECTION HANDLERS - code that translates old values to new
 * ///////////////// HANDLERS ///////////////////////
 */
function _fin_migrate_handler_address($dstFldName, $inArr, $inData, &$wrapper, $termMap) {
  $countries = array(
      '173'=>'AU',
      '158'=>'AT',
      '1870875315'=>'BS',
      '555'=>'BH',
      '165'=>'BE',
      '1870875319'=>'BM',
      '1870875300'=>'BA',
      '1870875296'=>'BW',
      '130'=>'BR',
      '1870875320'=>'BN',
      '1870875308'=>'BG',
      '127'=>'CA',
      '1870875318'=>'KY',
      '1870875321'=>'GB',
      '133'=>'CL',
      '134'=>'CN',
      '135'=>'CO',
      '138'=>'CR',
      '1870875299'=>'HR',
      '141'=>'CU',
      '8'=>'CY',
      '143'=>'CZ',
      '144'=>'DK',
      '210'=>'FI',
      '211'=>'FR',
      '214'=>'DD',
      '221'=>'GR',
      '185'=>'GU',
      '187'=>'HU',
      '182'=>'IS',
      '208'=>'IN',
      '183'=>'ID',
      '186'=>'IR',
      '174'=>'IL',
      '188'=>'IT',
      '1870875305'=>'JM',
      '191'=>'JP',
      '192'=>'JO',
      '1870875294'=>'KZ',
      '1870875295'=>'KE',
      '1870875297'=>'KW',
      '1870875316'=>'LI',
      '37'=>'LT',
      '38'=>'LU',
      '60'=>'MY',
      '1870875327'=>'MT',
      '1870875310'=>'MU',
      '44'=>'MX',
      '56'=>'MC',
      '1870875312'=>'MZ',
      '19'=>'NL',
      '14'=>'NZ',
      '1870875309'=>'NI',
      '1870875325'=>'KP',
      '1870875324'=>'MP',
      '9'=>'NO',
      '21'=>'PA',
      '1870875306'=>'PG',
      '1870875311'=>'PE',
      '32'=>'PH',
      '26'=>'PL',
      '18'=>'PT',
      '27'=>'PR',
      '1870875298'=>'RO',
      '1870875301'=>'RU',
      '1870875322'=>'SA',
      '63'=>'SG',
      '101'=>'ZA',
      '118'=>'KR',
      '103'=>'SP',
      '112'=>'SE',
      '113'=>'CH',
      '116'=>'TW',
      '1870875302'=>'TZ',
      '75'=>'TH',
      '67'=>'TR',
      '71'=>'UK',
      '61'=>'US',
      '1870875313'=>'AE',
      '1870875293'=>'XX',
      '55555'=>'VE',
    );  
  
    $states = array(
      '356'=>'AL',
      '357'=>'AK',
      '358'=>'AZ',
      '359'=>'AR',
      '360'=>'CA',
      '361'=>'CO',
      '362'=>'CT',
      '363'=>'DE',
      '364'=>'SD',
      '365'=>'FL',
      '366'=>'GA',
      '367'=>'HI',
      '368'=>'ID',
      '369'=>'IL',
      '370'=>'IN',
      '371'=>'IA',
      '372'=>'KS',
      '373'=>'KY',
      '374'=>'LA',
      '375'=>'ME',
      '376'=>'MD',
      '377'=>'MA',
      '378'=>'MI',
      '379'=>'MN',
      '380'=>'MS',
      '381'=>'MO',
      '382'=>'MT',
      '383'=>'NE',
      '384'=>'NV',
      '385'=>'NH',
      '386'=>'NJ',
      '387'=>'NY',
      '388'=>'NC',
      '389'=>'ND',
      '390'=>'OH',
      '391'=>'OK',
      '392'=>'OR',
      '393'=>'PA',
      '394'=>'RI',
      '395'=>'SC',
      '396'=>'TX',
      '397'=>'UT',
      '398'=>'VA',
      '399'=>'WA',
      '400'=>'WV',
      '401'=>'WI',
      '402'=>'WY',
      '403'=>'NM',
      '404'=>'TN',
      '405'=>'VT',
      '486'=>'ON', //formerly ONT
      '487'=>'AB', //formerly ALB
      '488'=>'NB',
      '489'=>'PE', // formerly PEI
      '490'=>'SA',
      '491'=>'NS',
      '492'=>'QC', // formerly QE
      '493'=>'BC',
      '494'=>'NL',
      '1561'=>'DC',
      '956955814'=>'PR',
      '956955815'=>'MB',
      '956955816'=>'NT',
  );  

  $cityState = array(
    '127' => array(
      'toronto'=>'ON',
      'montreal'=>'QC',
      'laval'=>'QC',
      'verdun'=>'QC',
      'calgary'=>'AB',
      'mississauga'=>'ON',
      'yellowknife'=>'NT',
      'aurora'=>'ON',
      'brampton'=>'ON',
      'ottawa'=>'ON',
    ),
    '61'=>array(
      'atlanta'=>'GA',
      'los angeles'=>'CA',
      'san diego'=>'CA',
      'seattle'=>'WA',
      'new york'=>'NY',
      'washington'=>'DC',
      'san francisco'=>'CA',
      'ann arbor'=>'MI',
      'detroit'=>'MI',
      'irvine'=>'CA',
      'santa barbara'=>'CA',
      'santa monica'=>'CA',
      'westwood'=>'CA',
      'philadelphia'=>'PA',
      'el segundo'=>'CA',
      'cleveland'=>'OH',
      'cincinnati'=>'OH',
      'memphis'=>'TN',
      'menlo park'=>'CA',
      'chicago'=>'IL',
      'raleigh'=>'NC',
      'denver'=>'CO',
      'st. thomas'=>'VI',
      'bala cynwyd'=>'PA',
      'dallas'=>'TX',
      'houston'=>'TX',
      'san antonio'=>'TX',
      'new orleans'=>'LA',
      'tulsa'=>'OK',
      'boston'=>'MA',
    ),
  );

  $addrArr = array();
  $fields = $inArr['fields'];
  foreach ($fields as $handler => $sets) {
    foreach ($sets as $dstFld => $params) {
      $fldName = $params['fldname'];
      if (is_array($fldName)) {
        $val = '';
        $vals = array();
        foreach ($fldName as $fld) {
          $vals[] = $inData->$fld;
        }
        if (!empty($vals)) {
          $val = implode(" ", $vals);
        }
      }
      else {
        $val = $inData->$fldName;
      }
      switch ($handler) {
        case 'phone':
          str_replace('ext.','x',$val);
          //str_replace('ext','x',$val);
          str_replace('EXT.','x',$val);
          str_replace('EXT','x',$val);
          $pieces = explode("x", $val);
          $val2 = $val; //for debugging purposes
          $val = $pieces[0];
          if (isset($pieces[1])) {
            $addrArr['phone_number_extension'] = $pieces[1];
          }
        break;
        case 'lu2state':
          if (!empty($val)) {
            $val = $states[$val];
          } else {
            //$val = '';
            $city = strtolower($inData->City);
            $country = $inData->CountryID;
            if (isset($cityState[$country][$city])) {
              $val = $cityState[$country][$city];
            
              $message = "CITY: ".$city."|Country: ".$country."| STATE: ".$val;
              watchdog('FIN_MIGRATE_FIXED_CITYSTATE',$message,array(),WATCHDOG_INFO);
            }
          }
        break;
        case 'lu2country':
          if ($val) {
            $val = $countries[$val];
          } else {
            $val = '';
          }
        break;
      }
      $val = trim($val);

      $addrArr[$dstFld] = $val;
    }
  }
  //$wrapper->$destFldName = $addrArr;
  return $addrArr;
}
 
function _fin_migrate_handler_paragraph($bundle, $hostFldName, $sets, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey=0, $deferSave=FALSE) {

  $fields = $sets['fields'];
  $params = $sets['params'];
  $pseudonym = '';
  if (isset($params['pseudonym'])) {
    $pseudonym = $params['pseudonym'];  
  }

  $pKeyName = $primeKeyFldName;
  $pKey = 0;
  if ($pKeyName) {
      $pKey = $inData->$pKeyName;    
  }

  if ( isset($params['oldtable']) ) {
    $srcTable = $params['oldtable'];
    $pKeyName = $primeKeyFldName;
    if (!isset($primeKeyFldName)) {
      $primeKeyFldName = $params['oldkeyfldname'];
      $primeKey = $inData->$primeKeyFldName;
      $pKeyName = $primeKeyFldName;
    }
    if (isset($params['oldkeyfldname'])) {
      $pKeyName = $params['oldkeyfldname'];
    }
    
    $pKey = $inData->$primeKeyFldName;
    
    if (isset($params['key-alias'])) {
      $pKeyName = $params['key-alias'];
    }
    $rowKeyFldName = $pKeyName;
    if (isset($params['rowkeyfldname'])) {
      $rowKeyFldName = $params['rowkeyfldname'];
    }

    $res = _fin_migrate_get_best_additional_table_data($srcTable, $pKeyName, $pKey);
$message = "Fldname: ".$hostFldName." Sets contain: ".print_r($sets,true);
watchdog('FIN_MIGRATE_COLLECTION', $message, array(), WATCHDOG_INFO);

    if ($res && isset($params['onerow'])) {
      $key = $params['onerowkeyname'];
      $fld = $params['onerowfldname'];
      $rws = $res;
      $res = '';
/* xxx
      $rwfld = array(
        'srcid' => $pKey,
        );
*/
      $rwfld = array();
      foreach ($rws as $rw) {
        $vl = $rw->{$fld};
        $ky = (string) $rw->{$key};
        $rwfld[$ky]=$vl; 
      }
      $res[] = (object) $rwfld;
    }
  } else {
    if (count($inData)>1) {
      $res = $inData;
    } else {
      $res = array($inData);
    }
  }
  
  $proceed = TRUE;
  //if ($res) {
  if ($proceed) {
    $rowidCheck = FALSE;
    if (isset($params['rowidfldname'])) {
      $rowidCheck = TRUE;
      $rowidFldName = $params['rowidfldname'];
    }
    //$wrappers = array();
    $entities = array();
    foreach ($res as $rw) {
      $newParagraph = new ParagraphsItemEntity(array('field_name' => $hostFldName, 'bundle' => $bundle));
      $newParagraph->is_new = TRUE;
      $newParagraph->setHostEntity('node', $entity);
      //$newParagraph->save();
      //$p_wrapper = entity_metadata_wrapper('field_paragraph_item', $newParagraph);
      $p_wrapper = entity_metadata_wrapper('paragraphs_item', $newParagraph);
      $flds = $sets['fields'];
      _fin_migrate_process_fields($flds, $rw, $p_wrapper, $entity, $termMap, $pKeyName, $pKey, "collection");

      //$p_wrapper->save();
      $newParagraph->save();
      $p_wrapper->save();      
      $wrappers[] = $p_wrapper;
      //$newParagraph->save();
    }
  }
  
  // We save everything at once, a cheap form of atomicity
  foreach ($wrappers as $p_wrapper) {
    //$p_wrapper->save();

    //$id = $rowkey;
    $rowid = 0;
    if ($rowidCheck) {
      $rowid = $rw->{$rowidFldName};
    }
    $nid = $wrapper->getIdentifier();
    $entity_id = $p_wrapper->getIdentifier();
    $contactname = '';
    _fin_migrate_add_to_oldnew_collection_table($pseudonym, $rowid, $nid, $contactname, $hostFldName, $entity_id);
  }
  return $wrappers;
}

function _fin_migrate_get_latest_data($p_wrapper, $entity, &$wrapper) {
  $entity_type = 'node';
  $entity_bundle = 'contact';
  $group_name = 'group_internal_use_only';
  $groups = field_group_read_groups(array(
      'entity_type' => $entity_type,
      'bundle'      => $entity_bundle,
      'group_name' => $group_name,
  ));
  $myGroup = $groups['node']['contact']['form']['group_internal_use_only'];
  $myField_names = $myGroup->children;
  foreach ($myField_names as $fieldname) {
    if (isset($p_wrapper->$fieldname) && $fieldname<>'field_employment_date') {
      switch ($fieldname) {
        case 'field_website':
          $val = $p_wrapper->$fieldname->value();
          if (!empty($val)) {
            $wrapper->$fieldname->url = $val['url'];
            $wrapper->$fieldname->title = $val['title'];
          }
        break;
      case 'field_major_minor_style_tr':
        $major = $inData->MajorStyleID;
        $minor = $inData->MinorStyleID;
        if (!empty($major)) {
          $tid = fin_saved_search_migration_mmm_id($major, $minor);
          if (!empty($tid)) {
            $parent = taxonomy_get_parents($tid);
            $parent = reset($parent);
            $ptid = $parent->tid;
            if ($wrapper->field_major_minor_style_tr->validate(array($tid))) {
                $wrapper-> field_major_minor_style_tr = array($tid);
            }
            else {
              $message = "MINORTID-".$tid;
              watchdog('INVALID_TAXONOMY', $message, array(), WATCHDOG_ERROR);
            }
          } else {
            $message = "Incoming Data: ".print_r($inData,true);
            watchdog('FIN_MIGRATE_MAJORMINOR_FAILED', $message, array(), WATCHDOG_ERROR);
          }
        }
      break;
        default:
          $val = $p_wrapper->$fieldname->value();
          if (!empty($val)) {
              //$out = (int) $val;
              $wrapper->$fieldname = $val;
          }
        break;
      }
  
        //if (!is_empty($fieldval)) {
        //  $wrapper->$fieldname = $fieldval;
        //}
      //}
    }
  }
}

function _fin_migrate_handler_collection($pseudonym, $hostFldName, $sets, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey=0) {

  global $DEFAULT_OWNER_UID;

  $fields = $sets['fields'];
  $params = $sets['params'];

////////////////////////
  $customInData = FALSE;
  $newInData = array();
  if (isset($params['comma-delimited-field'])) {
    $customInData = TRUE;
    $prms = $params['comma-delimited-field'];
    $oldKeyFldName = $prms['oldkeyfldname'];
    $srcref = $prms['srcref'];
    $srcstr = $inData->$srcref;
    $refAndSize = FALSE;    
    if (!empty($srcstr)) {
      $pieces = explode(",", $srcstr);
      if (empty($pieces)) {
        $pieces = array($srcstr);        
        $message = "Yes, we needed watch out for single values in comma-delimited-field: ".print_r($pieces,true);
        watchdog('FIX1', $message, array(), WATCHDOG_INFO);
      }
      if (isset($prms['srcval'])) {
        $srcval = $prms['srcval'];
        $amounts = $inData->$srcval;
        $pieces2 = explode(",", $amounts);
        if (empty($pieces2)) {
          $pieces2 = array($amounts);
        }
        $refAndSize = TRUE;
      }
      $srcFldName = $prms['oldkeyfldname'];
      for ($x=0; $x<count($pieces); $x++) {
        $arr = array();
        $oldid = trim($pieces[$x]);
        $arr[$oldKeyFldName] = $oldid;
        if ($refAndSize) {
          $arr['srcval'] = trim($pieces2[$x]);
        }
        $newInData[] = (object) $arr;
      }
    }
  }
  else if (isset($params['gather-mandate-notesxxx'])) {
    $customInData = TRUE;
    $mandateID = $inData->MandateID;
    $empty = TRUE;
    $notes = $inData->Comments;
    $strArr = array();
    if (!empty($notes)) {
      $strArr[] = 'Migrated Comment: '.$notes;
      $empty = FALSE;
    }
    $history = $inData->History;
    if (!empty($history)) {
      $strArr[] = 'History: '.$history;
      $empty = FALSE;
    }
    $combined = implode(" | ", $strArr);
    $out = array();
    if (!empty($combined)) {
      $date = time();
      $newInData[] = (object) array(
        'id' => $mandateID,
        'date' => $date,
        'author' => $DEFAULT_OWNER_UID,
        'subject' => 'Migrated Comment',
        'comment' => $combined,
      );
      $empty = FALSE;
    }
  }
  else if (isset($params['gather-mandate-notes-1'])) {
    $newInData = array();
    $customInData = TRUE;

    $mandateID = $inData->MandateID;
    $empty = TRUE;
/*** DEPRECATE 4/20/16    
    $notes = $inData->Comments;
    $strArr = array();
    if (!empty($notes)) {
      $strArr[] = 'Migrated Comment: '.$notes;
      $empty = FALSE;
    }
    $history = $inData->History;
    if (!empty($history)) {
      $strArr[] = 'History: '.$history;
      $empty = FALSE;
    }
    $combined = implode(" | ", $strArr);
    $out = array();
    if (!empty($combined)) {
      $date = time();
      $newInData[] = (object) array(
        'id' => 0,
        'date' => $date,
        'author' => $DEFAULT_OWNER_UID,
        'subject' => 'Migrated Comment',
        'comment' => $combined,
        'mandateid' => $mandateID,
      );
      $empty = FALSE;
    }
***/
    $mandateID = $inData->MandateID;
    $sql = "SELECT * FROM tblmandatecomments WHERE MandateID=".$mandateID." ORDER BY Created";
    db_set_active('legacy');
    $res = db_query($sql);
    db_set_active();
    if ($res->rowCount()>0) {
      foreach ($res as $row) {
        $newInData[] = (object) array(
          'id' => $row->cid,
          'date' => $row->Created,
          'author' => $DEFAULT_OWNER_UID,
          'subject' => ' ',
          'comment' => $row->Comments,
          'mandateid' => $mandateID,
        );
      }
    }
  }
  else if (isset($params['gather-consultant-comment'])) {
    $newInData = array();
    $customInData = TRUE;

    $consultantFirmID = $inData->ConsultantFirmID;
    $empty = TRUE;
    $comments = $inData->Comments;
    $out = array();
    if (!empty($comments)) {
      $date = time();
      $newInData[] = (object) array(
        'id' => $consultantFirmID,
        'date' => $date,
        'author' => $DEFAULT_OWNER_UID,
        'subject' => 'Migrated Comment',
        'comment' => $comments,
        'mandateid' => $consultantFirmID,
      );
      $empty = FALSE;
    }
  }
 
  $pKeyName = $primeKeyFldName;
  $pKey = 0;
  if ($pKeyName) {
      $pKey = $inData->$pKeyName;    
  }
  $proceed = TRUE;
  if ( isset($params['oldtable'])) {
    $srcTable = $params['oldtable'];
    $pKeyName = $primeKeyFldName;
    if (!isset($primeKeyFldName)) {
      $primeKeyFldName = $params['oldkeyfldname'];
      $primeKey = $inData->$primeKeyFldName;
      $pKeyName = $primeKeyFldName;
    }
    if (isset($params['oldkeyfldname'])) {
      $pKeyName = $params['oldkeyfldname'];
    }
    $pKey = $inData->$primeKeyFldName;
    
    if (isset($params['key-alias'])) {
      $pKeyName = $params['key-alias'];
    }
    if (isset($params['mom-key-alias'])) {
      $oldKey = $pKey;
      $pKeyName = $params['mom-key-alias'];
      $pKey = $inData->ManagerFirmID;
    }
    $rowKeyFldName = $pKeyName;
    if (isset($params['rowkeycheckfldname'])) {
      $rowKeyCheckFldName = $params['rowkeycheckfldname'];
    }
    $keycheck = FALSE;
    if (isset($params['rowkeycheck'])) {
      $keycheck = TRUE;
    }

    $proceed = TRUE;
    $force = FALSE;
    if ($srcTable=="tblmommanagers") {
      $force = TRUE;
    }
    $usefunction = TRUE;
    //if ($srcTable=="tblfundmanagers") {
    if ($srcTable=="tblfundmanagers" || $srcTable=="tblfundconsultants") {
      $usefunction = FALSE;
    }
    if ($usefunction) {
      $res = _fin_migrate_get_best_additional_table_data($srcTable, $pKeyName, $pKey, $force, $nocache);
    } else {
      $sql = "SELECT * FROM {%srctable} WHERE %keyname=%key";
      $sql = str_replace("%srctable", $srcTable, $sql);
      $sql = str_replace("%keyname", $pKeyName, $sql);
      $sql = str_replace("%key", $pKey, $sql);
      db_set_active('legacy');
      $rs = db_query($sql);
      db_set_active();
      $res = array();
      foreach($rs as $rw) {
        //$res[$pKey][] = $rw; 
        $res[] = $rw; 
      }
    }
    if ($res && isset($params['onerow'])) {
      $key = $params['onerowkeyname'];
      $fld = $params['onerowfldname'];
      $rws = $res;
      $res = '';
      $rwfld = array(
        'srcid' => $pKey,
      );
      foreach ($rws as $rw) {
        $vl = $rw->{$fld};
        $ky = (string) $rw->{$key};
        $rwfld[$ky]=$vl; 
      }
      $res[] = (object) $rwfld;
    }
  }
  else if ($customInData) {
    if (!empty($newInData)) {
      $res = $newInData;
    } else {
      $res = array();
    }
  } else {
    $res = array($inData);
  }
  //if ($res) {
  if (!empty($res)) {
    $dupCheck = FALSE;
    if (isset($params['dupcheck'])) {
      $dupCheck = TRUE;
      $dupFldName = $params['dupcheckfldname'];
    }
    $blankCheck = FALSE;

    if (isset($params['blankcheck'])) {
      $blankCheck = TRUE;
      $blankFldName = $params['blankcheckfldname'];
      $badids = array();      
      $badCheck = FALSE;
      if (isset($params['blankcheckbad'])) {
        //build array from old/new table to catch bad ids
        $badCheck = TRUE;
        $pseudo = $params['blankcheckbadpseudo'];
        /***
        $mysql = "SELECT srcid, nid from {fin_migrate_node} WHERE pseudonym='%pseudonym'";
        $mysql = str_replace("%pseudo", $pseudo, $mysql);
        db_set_active();
        $myres = db_query($mysql);
        foreach ($myres as $myrow) {
          $badids[$myrow->srcid] = $myrow->nid;
        }
        ***/
        $badids = array(
          'manager firm' => array(5291, 6317, 6370, 7748, 3270, 6651, 6606, 7313, 4862, 9348, 5199, 8774, 9674, 5269, 5219, 9335, 9451),
          'consultant firm' => array(176, 418, 397),
        ); 
      }
    }
    
    $rowidCheck = FALSE;
    if (isset($params['rowidfldname'])) {
      $rowidCheck = TRUE;
      $rowidFldName = $params['rowidfldname'];
    }

    if (count($res)>250) {
      $fillMode = FALSE;
      if (isset($params['fillmode'])) {
        $fillMode = TRUE;
      }
      if ($fillMode) {
        $nid = $entity->nid;
        $sql2 = "SELECT COUNT(*) AS cnt FROM field_data_field_manager_roster_fc WHERE entity_id=".$nid;
        $rs = db_query($sql2);
        $size = 0;
        foreach ($rs as $rw) {
          $size = $rw->cnt;
        }
        $res = array_slice($res, $size, count($res)-$size);
        $message = "FILL IN REST Key Name: ".$pKeyName." | KEY: ".$pKey;
        watchdog('FIN_MIGRATE_COLLECTION_TRUNCATED', $message, array(), WATCHDOG_INFO);
      } else {
        $res = array_slice($res, 0, 250);
        $message = "TRUNCATED Key Name: ".$pKeyName." | KEY: ".$pKey;
        watchdog('FIN_MIGRATE_COLLECTION_TRUNCATED', $message, array(), WATCHDOG_INFO);
      }
    }
    foreach ($res as $rw) {
      // PLW 0316 - added this because tblfundmanagers has zeros in ManagerID column
      // which causes some plans to bork when populating. Collections are key table
      // records, check that the row actually points to something
      $proceed = TRUE;

      // 3/28/16 - fatally flawed. all dupchecks will be set 
      /*
      if ($dupCheck) {
        $srcid = $rw->{$dupFldName};
        $eid = _fin_migrate_gotIdgetFieldid($srcid, $pseudonym);
        if (!empty($eid)) {
          $proceed = FALSE;
          $message = "Pseudonym: ".$pseudonym." | HostFld: ".$hostFldName." | CheckFldName: ".$fldName."|ID: ".$srcid." | EID: ".$eid."<br /><br />Row: ".print_r($rw,true);
          watchdog('FIN_MIGRATE_DUPLICATE_COLLECTION_ITEM', $message, array(), WATCHDOG_INFO);          
        }
      }
      */
      if ($blankCheck) {
        $val = $rw->{$blankFldName};
        if (empty($val)) {
          $proceed = FALSE;
          $message = "Pseudonym: ".$pseudonym." | HostFld: ".$hostFldName." | CheckFldName: ".$fldName."<br /><br />Row: ".print_r($rw,true);
          watchdog('FIN_MIGRATE_BLANK_COLLECTION_ITEM', $message, array(), WATCHDOG_INFO);          
        }
        else if ($badCheck) {
          $checkval = (int) $val;
          //$checkval = utf8_decode($checkval);
          if (in_array($checkval, $badids[$pseudo])) {
            $proceed = FALSE;
            $message = "TYPE: ".$pseudo." | ID: ".$val;
            watchdog('FIN_MIGRATE_ERROR_BADID', $message, array(), WATCHDOG_ERROR);
          }
        }
      }
      if ($proceed) {
  //$message = "INCOMING RW: ".print_r($rw,true);
  //watchdog('FIN_MIGRATE_NEW_COLLECTION', $message, array(), WATCHDOG_INFO);
        $success = TRUE;
        try {
          $newCollection = entity_create('field_collection_item', array('field_name' => $hostFldName));
          $newCollection->setHostEntity('node', $entity);
          $fc_wrapper = entity_metadata_wrapper('field_collection_item', $newCollection);

          //$flds = $sets['fields'];
          _fin_migrate_process_fields($fields, $rw, $fc_wrapper, $entity, $termMap, $pKeyName, $pKey, "collection");


          $rowid = 0;
          if ($rowidCheck) {
            $rowid = $rw->{$rowidFldName};
          }
          $nid = $wrapper->getIdentifier();

          $fc_wrapper->save();

          $entity_id = $fc_wrapper->getIdentifier();
          $contactname = ''; 
          _fin_migrate_add_to_oldnew_collection_table($pseudonym, $rowid, $nid, $contactname, $hostFldName, $entity_id);
          //_fin_migrate_add_to_oldnew_node_table_oldnew_collection_table($pseudonym, $rowid, $nid, $contactname, $hostFldName, $entity_id);        
        }
        catch (Exception $e) {
          $message = 'FC - ID: '.$rowid.' NID: '.$nid.'ENTITY ID: '.$entity_id.' PSEUDONYM: '.$pseudonym.' HOSTFLD: '.$hostFldName.'<br><br>Row: '.print_r($rw,true).'<br /><br />ERROR: '.$e->getMessage();
          watchdog('FIN_MIGRATE_SAVE_FAILED', $message, array(), WATCHDOG_CRITICAL);
        }
      }
    }
  }
  else {
    $message = "NO DATA. Fldname: ".$hostFldName." Sets contain: ".print_r($sets,true);
    watchdog('FIN_MIGRATE_COLLECTION', $message, array(), WATCHDOG_INFO);
  }
}

function _fin_migrate_process_fields($fields, $inData, &$wrapper, &$entity, $termMap,$primeKeyFldName='', $primeKey=0, $collection='') {
  foreach ($fields as $handler => $sets) {
    foreach ($sets as $dstFldName => $params) {
      _fin_migrate_process_field($handler, $dstFldName, $params, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey, $collection);
    }
  }
}

function _fin_migrate_prep_string($val) {
  if (!empty($val)) {
    //$out = html_entity_decode($val);
    $out = $val;
    return $out;
  }
}

function _fin_migrate_process_field($handler, $dstFldName, $params, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey='', $collection='') {

  $statusArr = array(
    'Active' => 340,
    'Inactive' => 341,
  );    

  $val = '';
  if ( isset($params['fldname']) ) {
    if ( !empty($params['fldname']) ) {
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
    }
  }
  else if ( isset($params['value']) ) {
    $val = $params['value'];
  }

  //$dstVal = $wrapper->$dstFldName;
  //if (!empty($val)) {
//  if (!empty($val) || !empty($dstval)) {
  if (1) {
    $action = $handler;

// PERFORMANCE turn this off
$message = "Action: ".$action." Field: ".$dstFldName." Val: ".print_r($val,true);
watchdog('PROCESS FIELD', $message, array(), WATCHDOG_INFO);

    switch ($action) {
      case 'node-title':
        $val = _fin_migrate_prep_string($val);
        if (!empty($val)) {
          $wrapper->title = $val;
          //$wrapper->label($val);
        }
      break;
      case 'node-body':
        if (!$val) {
          $val = " ";
        }
        $val = _fin_migrate_prep_string($val);        
        $wrapper->body->value = $val;
        $wrapper->body->summary = $val;
        $wrapper->body->format = 'advanced_input';
      break;
      case 'node-inactive-status':
        $out = 1;
        if ((int) $val) {
          $out = 0;
        }
        $wrapper->status = $out;
      break;
      case 'node-value-status':
        $wrapper->status = $val;
      break;
      case 'node-created':
        if (!empty($val)) {
          $nid = $entity->nid;
          $sql = "UPDATE {node} SET created=".$val." WHERE nid=".$nid;
          $res = db_query($sql);
        }
      break;
      case 'title-field':
        $val = _fin_migrate_prep_string($val);
        $wrapper->{$dstFldName} = $val;
      break;
      case 'consolidate':
        // use when you have an address1, address2, address3 to map to 2 fields
        $out = _fin_migrate_handle_consolidate($nodeMapArr);
        $wrapper->$dstFldName = $out;
      break;
      case 'name2uid':
        $account = user_load_by_name($val);
        $out = $account->uid;
        $wrapper->$fldName = intval($out);
      break;
      case 'value' :
        $out = $params['value'];
        $wrapper->$fldName = $out;
      break;
      case 'value2term':
        if (isset($params['handler'])) {
          $handl = $params['handler'];
          switch ($handl) {
            case 'negate':
              $raw = (int) $val;
              if ($raw) {
                $val = 0;
              } else {
                $val = 1;
              }
             break;
          }
        }
        $vid = $params['voc'];
        $values = $params['values'];
        $name = $values[$val];
        $term = _fin_migrate_get_tid_by_name($name, $vid);
        $term2 = taxonomy_get_term_by_name($name, $vid); 
        if ($term) {
          $wrapper->$dstFldName = intval($term);
        } 
      break;
      case 'tid2term':
        if (isset($params['handler'])) {
          $handl = $params['handler'];
          switch ($handl) {
            case 'negate':
              $raw = (int) $val;
              if ($raw) {
                $val = 0;
              } else {
                $val = 1;
              }
             break;
          }
        }
        $out = $val;
        $wrapper->$dstFldName = intval($out);
      break;
      case 'lu2currency':
        $fallback = array(
          'US Dollar' => 'United States Dollar',
        );
        if ($val) {
          if (isset($termMap[$fldName]['oldterms'][$val])) {
            $name = $termMap[$fldName]['oldterms'][$val];
            $tid = 0;
            if (isset($termMap[$fldName]['newterms'][$name])) {
              $tid = $termMap[$fldName]['newterms'][$name];
            }
            // because names were altered, above is hit-and-miss. This is a fallback
            if (!$tid) {
              if (isset($fallback[$name])) {
                $name = $fallback[$name];
                $tid = $termMap[$fldName]['newterms'][$name];
              }
            }
            if ($tid) {
              $wrapper->$dstFldName = $tid;
            } else {
              $message = 'Old Term: ".$name." (".$val.") Field: ".$dstFldName." Unmatched';
              watchdog('FIN_MIGRATE_lu2term', $message, array(), WATCHDOG_INFO);
            }
          }
        }
      break;
      case 'lu2consultanttype':
        $refArray = array(
          '0' => array(1046),
          '1' => array(1046),
          '2' => array(1047),
          '3' => array(1046,1047),
        );
        if (!empty($val)) {
          if (isset($refArray[$val])) {
            $tid = $refArray[$val];
            $wrapper->$dstFldName = $tid;
          }
        }
      break;
      case 'comma-delimited-lu2term':
        if (!empty($val)) {
          $fallback = array(
            'US Dollar' => 'United States Dollar',
          );
          $vals = explode(',', $val);
          if (empty($vals)) {
            $vals = array($val);
          }
          if (!empty($vals)) {
            $tids = array();
            foreach ($vals as $val) {
              if (!empty($val)) {
                if (isset($termMap[$fldName]['oldterms'][$val])) {
                  $tid = 0;
                  $term = $termMap[$fldName]['oldterms'][$val];
                  // because names were altered, above is hit-and-miss. This is a fallback
                  if (isset($termMap[$fldName]['newterms'][$term])) {
                    $tids[] = $termMap[$fldName]['newterms'][$term];
                  }              
                  if (!$tid) {
                    $name = $fallback[$term];
                    if (isset($termMap[$fldName]['newterms'][$name])) {
                      $tids[] = $termMap[$fldName]['newterms'][$name];
                    }
                  }
                }
              }
            }
          }            
          if (!empty($tids)) {
            $wrapper->$dstFldName = $tids;
          }
        }
      break;
      case 'lu2term':
        $fallback = array(
          'US Dollar' => 'United States Dollar',
        );
        if ($val) {
          if (isset($termMap[$fldName]['oldterms'][$val])) {
            $tid = 0;
            $term = $termMap[$fldName]['oldterms'][$val];
            // because names were altered, above is hit-and-miss. This is a fallback
            if (isset($termMap[$fldName]['newterms'][$term])) {
              $tid = $termMap[$fldName]['newterms'][$term];
            }              
            if (!$tid) {
              $name = $fallback[$term];
              if (isset($termMap[$fldName]['newterms'][$name])) {
                $tid = $termMap[$fldName]['newterms'][$name];
              }
            }
            if ($tid) {
              //$entity->$dstFldName['und'][0]['tid'] = $tid;
              //entity_save($entity);
              $wrapper->$dstFldName = $tid;
            }
          }
        }
      break;
      case 'tid2tid':
        if (isset($params['value'])) {
          $tid = $params['tid'];
          if (!empty($tid)) {
            $wrapper->{dstFldName} = $tid;
          }
        }
      break;
      case 'term2termxxx':
        $fallback = array(
          'US Dollar' => 'United States Dollar',
        );
        if ($val) {
          if (isset($termMap[$dstFldName]['oldterms'][$val])) {
            $tid = 0;
            $term = $val;
            //$term = $termMap[$fldName]['oldterms'][$val];
            // because names were altered, above is hit-and-miss. This is a fallback
            if (isset($termMap[$fldName]['newterms'][$term])) {
              $tid = $termMap[$fldName]['newterms'][$term];
            }              
            if (!$tid) {
              $name = $fallback[$term];
              if (isset($termMap[$fldName]['newterms'][$name])) {
                $tid = $termMap[$fldName]['newterms'][$name];
              }
            }
            if ($tid) {
              $wrapper->$dstFldName = $tid;
            }
          }
        }
      break;

/////////////////////
      case 'lu2state':
        $out = $states[$val];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'lu2country':
        $out = $countries[$val];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'major2termxxx':        
        $majorTid = $inData->MajorStyleID;
        $majorTerm = '';
        if ($majorTid) {
          $majorTerm = $termMap['MajorStyleID']['oldterms'][$majorTid];
          $wrapper->field_old_major_style = $majorTerm;
        }
      break;
      case 'minor2term':        
        $minorTid = $inData->MinorStyleID;
        $minorTerm = '';
        if ($minorTid) {
          $minorTerm = $termMap['MinorStyleID']['oldterms'][$minorTid];
          $wrapper->field_old_minor_style = $minorTerm;
        }
      break;
      case 'majorminorxxx':
        //$minorTid = $termMap['MinorStyleID']['newterms'][$minorName];
        $majorName = '';
        $majorId = $inData->MajorStyleID;
        if ($majorId) {
          $majorName = $termMap['MajorStyleID']['oldterms'][$majorId];
          $wrapper->field_old_major_style = $majorName;
        }
        $minorId = $inData->MinorStyleID;
        if ($minorId) {
          $minorName = $termMap['MinorStyleID']['oldterms'][$minorId];
          $wrapper->field_old_minor_style = $minorName;   
        }
      break;    
      case 'mandatemajorminor':
        // DEPRECATE
        //$vid = 23;
        $vid = 'major_minor_styles';
        $mandateID = $val;
        $terms = _fin_migrate_get_import_majorminor($mandateID);
        if (!empty($terms)) {
          $major = $terms['major'];
          $minor = $terms['minor'];
        } else {
          //$major = $inData->MajorStyleID;
          //$minor = $inData->MinorStyleID;
          //$tgerms = API FUNCTION TBD
        }
        if (!empty($terms)) {
          $out = array();
          $majorterms = taxonomy_get_term_by_name($major, $vid);
          $inds = array_keys($majorterms);
          $ind = $inds[0];
          $majorterm = $majorterms[$ind];
          $majortid = $majorterm->tid;
          if (!empty($majortid)) {
            $out[] = $majortid;
          }
          if (!empty($minor)) {
            $minorterms = taxonomy_get_term_by_name($minor, $vid);
            $inds = array_keys($minorterms);
            if (count($minorterm)>1) {
              $ind = $inds[1];
              $minorterm = $minorterms[$ind];
            } else {
              $ind = $inds[0];
              $minorterm = $minorterms[$ind];
            }
            if (count($minorterm)>1) {
              $minortid = $minorterm[1]->tid;
            } else {
              $minortid = $minorterm[0]->tid;
            }
            if (is_array($minortid)) {
              $minortid = $minortid[1];
            }
            if (!empty($minortid))
             {
              $out[] = $minortid;
            }
          }
          if (!empty($out)) {
            $wrapper->{$dstFldName} = $out;
          }
        }
      break;
      case 'majorminor':
        $major = $inData->MajorStyleID;
        $minor = $inData->MinorStyleID;
        if (!empty($major)) {
          $result = fin_saved_search_migration_mmm_id($major, $minor);
          $tid = intval($result);
          if (!empty($tid)) {
            $parent = taxonomy_get_parents($tid);
            $parent = reset($parent);
            $ptid = $parent->tid;
            //052016 by bills request
            //$wrapper-> field_major_minor_style_tr = array($ptid,$tid);
            
            //if ($wrapper->field_major_minor_style_tr->validate(array($tid))) {
            if ($wrapper->field_major_minor_style_tr->validate($tid)) {            
              //$wrapper->field_major_minor_style_tr = array($tid);
              $wrapper->field_major_minor_style_tr = $tid;  
            }
            else {
              $message = "MINORTID-".$tid;
              watchdog('INVALID_TAXONOMY', $message, array(), WATCHDOG_ERROR);
            }
            //$wrapper->field_major_minor_style_tr = $tid;
            //$wrapper-> field_major_minor_style_tr[] = $ptid;
            //$wrapper-> field_major_minor_style_tr[] = $tid;
/***
            $parent = taxonomy_get_parents($tid);
            $parent = reset($parent);            
            $ptid = $parent->tid;
            $wrapper->{$dstFldName}[] = $ptid;
            $wrapper->{$dstFldName}[] = $tid;
          //}
-------------------
          if (!empty($tid)) {
            $term = taxonomy_term_load($tid);
            $parent = taxonomy_get_parents($tid);
            $ptid = $parent->tid;
            $tids = array($ptid, $tid);
  ////$wrapper->{$dstFldName} = array($tids);
  $wrapper->{$dstFldName} = array($tid);
    ***/ 
          } else {
            $message = "Incoming Data: ".print_r($inData,true);
            watchdog('FIN_MIGRATE_MAJORMINOR_FAILED', $message, array(), WATCHDOG_ERROR);
          }
        }
      break;
      case 'majorminorxxxxxx':
        $majorid = $inData->MajorStyleID;
        $minorid = $inData->MinorStyleID;
        //$tgerms = API FUNCTION TBD
        $terms = array();
        if (!empty($terms)) {
          $out = array();
          $majorterm = taxonomy_get_term_by_name($major, $vid);
          $majortid = $majorterm->term_id;
          if (!empty($majortid)) {
            $out[] = $majortid;
          }
          if (!empty($minor)) {
            $minorterm = taxonomy_get_term_by_name($minor, $vid);
            $minortid = $minorterm->term_id;
            if (!empty($minortid))
             {
              $out[] = $minortid;
            }
          }
          if (!empty($out)) {
            $wrapper->{$dstFldName} = $out;
          }
        }
      break;
      case 'majorminorxxxx':
        $obj = taxonomy_vocabulary_machine_name_load('major_minor_styles');
        $vid = $obj->vid;
        $fields = $params['fields'];
        $set = array();
        foreach ($fields as $fld) {
          $vl = $inData->{$fld};
          $name = $termMap[$fld]['oldterms'][$vl];
          $term = taxonomy_get_term_by_name($name, $vid);
          $tid = $term->term_id;
          if (!empty($tid)) {
            $level = count(taxonomy_get_parents_all($tid));
            $set[$tid] = $level;
          }
        }
        if ($set) {
          $winner = 0;
          $topTid = 0;
          foreach ($set as $tid=>$level) {
            if ($level>$winner) {
              $winner = $level;
              $topTid = $tid;
            }
          }
          if (!empty($topTid)) {
            $wrapper->$dsFldName = $topTid;
          }
        }
      break;    
      case 'array2term':
        $oldTerm = $params['values'][$val];
        $term = $termMap[$fldName]['oldterm'][$oldTerm];
        $out = $termMap[$fldName]['newterm'][$term];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'http2link':
        $url = strtolower(trim($val));
        if (!isset($params['title'])) {
          $title = $url;
        } else {
          $title = $params['title'];
        }
        if ($url) {
          $parsed = parse_url($url);
          if (empty($parsed['scheme'])) {
            $url = 'http://' . ltrim($url, '/');
          }               
          if (!$url) {
            $wrapper->$dstFldName->set(array(
              'title' => '',
              'url' => '',
            ));
          } else {
            $wrapper->$dstFldName->set(array(
              'title' => $title,
              'url' => $url,
            ));

            //$wrapper->$dstFldName->url = $out;
            //$wrapper->$dstFldName->title = $url;
            //$wrapper->$dstFldName->attributes = array('title'=>'Go Here', 'target'=>'_new');
          }
        }
      break;
      case 'http2linknotitle':
        if (!empty($val)) {
          $url = strtolower(trim($val));
          if (!empty($url)) {
            $parsed = parse_url($url);
            $http = stripos($url, 'ttp:');
            if (empty($parsed['scheme']) || empty($http)) {
              $url = 'http://' . ltrim($url, '/');
            }               
//$message = "URL: ".$url."|NID: ".$entity->nid;
//watchdog('DEBUGXX', $message, array(), WATCHDOG_INFO);
            
            if (!empty($url)) {
              //$wrapper->{$dstFldName}->url = $url;
              $wrapper->{$dstFldName}->set(array('url'=>$url));
              //$wrapper->{$dstFldName}->url = array($url);
              //$wrapper->{$dstFldName}->url = $url;
              //$wrapper->{$dstFldName}->set( array(array('aurl'=>$url)) );
            }
          }
        }
      break;
      case 'http2linksnotitle':
        if (!empty($val)) {
          $url = strtolower(trim($val));
          if (!empty($url)) {

//$message = "URL: ".$url."|NID: ".$entity->nid;
//watchdog('DEBUGXX', $message, array(), WATCHDOG_INFO);

            $parsed = parse_url($url);
            $http = stripos($url, 'ttp:');
            if (empty($parsed['scheme']) || empty($http)) {
              $url = 'http://' . ltrim($url, '/');
            }               
            if (!empty($url)) {
              $wrapper->{$dstFldName}[] = array('url'=>$url);
              //$wrapper->{$dstFldName}->set(array('url'=>$url));
              //$wrapper->{$dstFldName}->url = array($url);
              //$wrapper->{$dstFldName}->url = $url;
              //$wrapper->{$dstFldName}->set( array(array('aurl'=>$url)) );
            }
          }
        }
      break;
      case 'mixed2link':
        $url = strtolower(trim($val));
        if (!isset($params['title'])) {
          $title = $url;
        } else {
          $title = $params['title'];
        }
        if ($url) {
          $parsed = parse_url($url);
          if ($parsed) {
            $message = $dstFldName ." may have URL. Data: ".print_r($parsed,true);
            watchdog('FIN_MIGRATE_URL_CHECK', $message, array(), WATCHDOG_INFO);

            if (empty($parsed['scheme'])) {
              $url = 'http://' . ltrim($url, '/');
            }               
            if (!$url) {
              $wrapper->$dstFldName->set(array(
                'title' => '',
                'url' => '',
              ));
            } else {
              $wrapper->$dstFldName->set(array(
                'title' => $title,
                'url' => $out,
              ));
            }
          }
        }
      break;
      case 'text2email':
        if ($val) {
          $out = trim($val);
          //$entity->$dstFldName['und'][0]['email'] = $val;
          //entity_save($entity);
          $wrapper->$dstFldName = $val;
        }
      break;
      case 'foia2notes':
        if (isset($params['names'])) {
          $names = $params['names'];
          $notes = array();
          foreach ($names as $fld) {
              $notes[] = $inData->{$fld};
          }
          if (!empty($notes)) {
            $out = implode(" | ", $notes);
            if ($out) {
              $wrapper->{$dstFldName} = $out;
            }
          }
        }
      break;
      case 'html2history':
        if ($val) {
          $out = array();
          $items = explode('<br/>', $val);
          foreach ($items as $item) {
            $date = strtotime(substr($item, 0, 10));
            $wrapper->$dstFldName = $out;
          }
        }
      break;
      case 'picture':
        if (!empty($val)) {
          // PLW 052216 Replace spaces w/underscorews
          $val = strtolower($val);
          $val = str_replace(" ", "_", $val);
          $val = str_replace("+¦", "oe", $val);

          //$filepath = base_path() .'migration/'.$val;
          $filepath =  $_SERVER['DOCUMENT_ROOT'].base_path().'migration/'.$val;
          $pieces = explode("/",$filepath);
          $ind = count($pieces)-1;
          $fn = strtolower($pieces[$ind]);
          $rawfile = (object) array(
            'uid' => 1,
            'uri' => $filepath,
            'filemime' => file_get_mimetype($filepath),
            'status' => 1,
          );

          $file = file_copy($rawfile, 'public://images/contacts/'.$fn, FILE_EXISTS_REPLACE);
         
          // We save the file to the root of the files directory.
          //$file = file_copy($rawfile, 'private://'.$fn, FILE_EXISTS_REPLACE);
          //$file = file_copy($rawfile, 'private://'.$fn);
          if (isset($file->fid)) {
            $wrapper->$dstFldName = (array) $file;
          } else {
            $message = $val ." NOT FOUND.<br /><br />Rawfile: ".print_r($rawfile,true)."<br /><br />FN: ".$fn."<brr /><br />Data: ".print_r($inData,true);
            watchdog('FIN_MIGRATE_PHOTO_FAIL', $message, array(), WATCHDOG_ERROR);
          }
/*
          $source_path = base_path() .'sites/default/files/private/';
          $imgpath = $source_path .'/'. $val;
          //file_prepare_directory($dirname, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
          $image = file_get_contents($imgpath);
          $file = file_save_data($image, $local_path);
          if (isset($file->fid)) {
            $wrapper->$dstFldName = array('fid' => $file->fid);
          }
*/
        }
/*        
        $imgpath = base_path() . 'migration/' . $val;
        $filename = basename($imgpath);
        $title = $wrapper->title_field;
        if (file_exists($imgpath)) {
          $file = (object) array(
            'uri' => $imgpath,
            'filemime' => file_get_mimetype($imgpath),
            'status' => 1,
            'title' => $title,
          );
          $drupalfile = file_copy($file, 'private://pictures/');
          $wrapper->dsfFldName = (array) $drupalfile;
        }
*/
      break;
      case 'address':
        $out = _fin_migrate_handler_address($dstFldName, $params, $inData, $wrapper, $termMap);
        //$wrapper->$dstFldName = $out;
        //$entity->$dstFldName['und'][0] = $out;
        //entity_save($entity);
        foreach ($out as $fldName => $val) {
          if (!empty($val)) {
            $wrapper->$dstFldName->$fldName = trim($val);
          }
        }
      break;
      case 'comma-delimited-reference':
        if (!empty($val)) {
          $refArray = array(
            'ConsultantOfficeID'=>'office',
            'ConsultantFirmID' => 'consultant firm',
            'ConsultantContactID' => 'consultant contact',
            'ManagerContactID' => 'manager contact',
            'ManagerFirmID' => 'manager firm',
            'FundContactID' => 'plan contact',
            'FundID' => 'plan',
            'MandateID' => 'mandate'
          );
          $oldKeyFldName = $params['fldname'];
          if (isset($params['pseudonym'])) {
            $pseudo = $params['pseudonym'];
          } else {
            $pseudo = $refArray[$oldKeyFldName];
          }
          $oldids = explode(",", $val);
          if (empty($oldids)) {
            $oldids = array($val);
          }          
          $newids = array();
          foreach ($oldids as $oldidStr) {
            if (!empty($oldidStr)) {
              $oldid = (int) $oldidStr;
              $newids[] = _fin_migrate_gotIdgetNid($oldid, $pseudo);        
            }
          }          
          if (!empty($newids)) {
            $wrapper->$dstFldName = $newids;
          }
        }
      break;
      case 'comma-delimited-reference-classic':
        if (!empty($val)) {
          $refArray = array(
            'ConsultantOfficeID'=>'office',
            'ConsultantFirmID' => 'consultant firm',
            'ConsultantContactID' => 'consultant contact',
            'ManagerContactID' => 'manager contact',
            'ManagerFirmID' => 'manager firm',
            'FundContactID' => 'plan contact',
            'FundID' => 'plan',
            'MandateID' => 'mandate'
          );
          $oldKeyFldName = $params['fldname'];
          if (isset($params['pseudonym'])) {
            $pseudo = $params['pseudonym'];
          } else {
            $pseudo = $refArray[$oldKeyFldName];
          }
          $oldids = explode(",", $val);
          $newids = array();
          foreach ($oldids as $oldid) {
            if (!empty($oldid)) {
              $newids[] = _fin_migrate_gotIdgetNid($oldid, $pseudo);        
            }
          }          
          if (!empty($newids)) {
            $wrapper->$dstFldName = $newids;
          }
        }
      break;
      case 'reference':
        $refArray = array(
          'ConsultantOfficeID'=>'office',
          'ConsultantFirmID' => 'consultant firm',
          'ConsultantContactID' => 'consultant contact',
          'ManagerContactID' => 'manager contact',
          'ManagerFirmID' => 'manager firm',
          'FundContactID' => 'plan contact',
          'FundID' => 'plan',
          'MandateID' => 'mandate'
        );
        $oldKeyFldName = $params['fldname'];
        if (isset($params['pseudonym'])) {
          $pseudo = $params['pseudonym'];
        } else {
          $pseudo = $refArray[$oldKeyFldName];
        }
        $oldid = $val;
        if (!empty($oldid)) {
          $newid = _fin_migrate_gotIdgetNid($oldid, $pseudo);        
          if (!empty($newid)) {
            //$entity->$dstFldName['und'][0]['target_id'] = $new;
            //entity_save($entity);
            $wrapper->$dstFldName = $newid;
          }
          else {
            $message = "ID: ".$val." |DST: ".$dstFldName." |Pseudonym: ".$pseudo;
            watchdog('FIN_MIGRATE_REFERENCE_FAILURE', $message, array(), WATCHDOG_ERROR);
          }
        }
      break;
      case 'inactive2term':
        $name = 'Active';
        // if TRUE, inactive. Booleans should be positive, not negative, this is why 
        // we have special handling here
        if ($val) {
          $name = 'Inactive';
        }
        //$vid = intval($params['voc']);
        //$term = _fin_migrate_get_tid_by_name($name, $vid);
        //$out = $term->tid;
        $out = $statusArr[$name];
        $wrapper->$dstFldName = $out;
      break;
      case 'status2term':
        $name = 'Active';
        // if TRUE, inactive. Booleans should be positive, not negative, this is why 
        // we have special handling here
        if (!$val) {
          $name = 'Inactive';
        }
//$out = $termMap[$fldName]['newterm'][$term];
        //$vid = intval($params['voc']);
        //$term = _fin_migrate_get_tid_by_name($name, $vid);
        //$out = $term->tid;
        $out = $statusArr[$name];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'date2timestamp2':
        if($val && $val<>'0000-00-00 00:00:00') {
          $out = strtotime($val);
          $wrapper->$dstFldName->set(intval($out));
        }
      break;
      case 'date2timestamp':
        if($val && $val<>'0000-00-00 00:00:00') {
          $out = strtotime($val);
          $wrapper->$dstFldName->set($out);
        }
      break;
      case 'date2date':
        // code below based on case 'employmentdate', which works, though it is a different field
        if (!empty($val)) {  
          //$format = 'Y-m-d G:i:s';  // 1:05:45     
          $format = 'Y-m-d g:i:s';    // 01:05:45
          $date1 = strtotime($val);
          if (trim($val=='0000-00-00 00:00:00')) {
            $date1 = 0;
          }
          if (!empty($date1)) {
            $wrapper->{$dstFldName} = $date1;
          }
        }
      break;
      case 'timestamp2date':
        if (!empty($val)) {
          $wrapper->{$dstFldName} = $val;
        }
      break;
      case 'timestamp2datexxx':
        // code below based on case 'employmentdate', which works, though it is a different field
        if (!empty($val)) {  
          //$format = 'Y-m-d G:i:s';  // 1:05:45     
          $format = 'Y-m-d g:i:s';    // 01:05:45
          $fdate1 = date($format, $val);
          $date2 = NULL;
          if (empty($date2)) {
            $fdate2 = NULL;
          } else {
            $fdate2 = date($format, $date2);
          }
          // final check of first date, ran into year 0001
          $pieces = explode("-", $fdate1);
          $yr = (int) $pieces[0];
          if ($yr<1970) {
            $fdate1 = NULL;
          }
          $arr = array(
            'value' => $date1,
            'value2' => NULL);
          //$wrapper->{$dstFldName}->set($arr);
          //$wrapper->{$dstFldName} = $arr;
          $wrapper->{$dstFldName}->value = $fdate1;
/*          
          if ($wrapper->validate($arr)) {
            //others I tried, did not work
            //$wrapper->{$dstFldName} = $date1; //timestamp error
            //$wrapper->{$dstFldName} = $fdate1; //formatted error
            //$wrapper->{$dstFldName}->value = $date1; //timestamp no error, no value either
            //$wrapper->{$dstFldName}->value = $fdate1; //formatted, no error, no value either
            $wrapper->{$dstFldName} = $arr;
          } else {
            $message = "FAILED. ".$dstFldName."|Val: ".$val." |Assigned: ".print_r($arr,true);
            watchdog('FIN_MIGRATE_DATE_FAIL', $message, array(), WATCHDOG_ERROR);
          }
*/
        }
      break;

/////////////////////
/*
case 'comma-delimited-delta-default':
break;
case 'field_manager_firm_er':
break;

*/
      case 'comma-delimited-delta-default':
        $delta = $inData->fin-delta;
        $arr = explode(',',$arr);
        $out = $arr[$delta];
        $wrapper->$dstFldName = $out;
      break;
      case 'employmentdate':
        if ($val) {
          $format = 'Y-m-d G:i:s';          
          $date1 = $val;
          $fdate1 = date($format, $date1);
          $date2 = $inData->end;
          if (empty($date2)) {
            $fdate2 = NULL;
          } else {
            $fdate2 = date($format, $date2);
          }
          // final check of first date, ran into year 0001
          $pieces = explode("-", $fdate1);
          $yr = (int) $pieces[0];
          if ($yr<1970) {
            $fdate1 = $fdate2;
          }
          $arr = array(
            'value' => $fdate1,
              'value2' => $fdate2);
          $wrapper->{$dstFldName}->set($arr);

          //$entity->{$dstFldName}['und'][0] = $arr;
          //entity_save($entity);
  
          //$wrapper->{$dstFldName}->set(array(
          //  'value' => $date1,
          //  'value2' => $date2
          //));
        }
      break;
    

      case 'collection':
        $collections = $params['sets'];
        $pseudonym = $params['params']['pseudonym'];
        foreach ($collections as $collection) {
          _fin_migrate_handler_collection($pseudonym, $dstFldName, $collection, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey);
        }
      break;
      case 'major2term':        
        $majorTid = $inData->MajorStyleID;
        $majorTerm = '';
        if ($majorTid) {
          $majorTerm = $termMap['MajorStyleID']['oldterms'][$majorTid];
          $wrapper->field_old_major_style = $majorTerm;
        }
      break;
      case 'minor2term':        
        $minorTid = $inData->MinorStyleID;
        $minorTerm = '';
        if ($minorTid) {
          $minorTerm = $termMap['MinorStyleID']['oldterms'][$minorTid];
          $wrapper->field_old_minor_style = $minorTerm;
        }
      break;
      case 'collectionxxx':
        $newInData[] = $inData;
        if (isset($params['multiplier'])) {
          $multi = $params['multiplier'];
          $handlr = $multi['handler'];
          $parms = $multi['params'];
          $tbl = $multi['oldtable'];
          $kyfld = $multi['oldkeyfldname'];
          $ky = $inData[$kyfld];
          $fld = $multi['oldfldname'];
          $multiArr = _fin_migrate_get_multiplier($handlr, $tbl, $kyfld, $ky, $fld);
          $newInData = array();
          foreach ($multiArr as $multiFld => $multiVal) {
            $inData->$multiFld = $multiVal;
            $newInData[] = $inData;
          }
        }
        $collections = $params['sets'];
        foreach ($newInData as $inData) {
          foreach ($collections as $collection) {
            _fin_migrate_handler_collection($dstFldName, $collection, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey);
          }
        }
      break;
      case 'comment2comment':
        if (!empty($val)) {
          $date = $inData->UpdatedOn;
          if ($date=="0000-00-00 00:00:00") {
            $date = $inData->CreatedOn;
          }
          if ($date=="0000-00-00 00:00:00") {
            $date = time();
          }
          $date2 = strtotime($date);
          
          $comment = new stdClass();
          $nid = $entity->nid;
          $comment->nid = $nid; // nid of a node you want to attach a comment to
          //$comment = new stdobj();
          $comment->cid = 0; // leave it as is
          $comment->pid = 0; // parent comment id, 0 if none 
          $comment->uid = 109; // user's id, who left the comment
          $comment->mail = 'email@example.com'; // user's email
          $comment->name = 'FIN Editor'; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
          //$comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
          //$comment->hostname = '127.0.01';
          $comment->created = $date2; 
          $comment->field_date['und'][0]['value'] = $date;
          $comment->is_anonymous = 0; // leave it as is
          $comment->homepage = ''; // you can add homepage URL here
          $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
          $comment->language = LANGUAGE_NONE; // The same as for a node
          $comment->subject = ' '; 
          $comment->comment_body[$comment->language][0]['value'] = $val; // Everything here is pretty much like with a node
          $comment->comment_body[$comment->language][0]['format'] = 'advanced_input'; 
          comment_submit($comment);
          comment_save($comment);
          
          // have to force create date
          $comment->created = $date2;          
          $comment->changed = $date2;          
          comment_save($comment);        
        }
      break;
      case 'mandatecomments2comment':
        //if (!empty($val)) {
          $mysql = "SELECT Comments as comment, Created as date FROM tblmandatecomments WHERE MandateID=%key";
          $key = $inData->MandateID;
          $mysql = str_replace("%key", $key, $mysql);
          db_set_active('legacy');
          $res = db_query($mysql);
          db_set_active();
          if ($res) {
            foreach ($res as $row) {
//$message = "ROW: ".print_r($row,true);
//watchdog('DEBUG_WWW', $message, array(), WATCHDOG_INFO);

              $timestamp = $row->date;
              if ($timestamp==0) {
                $timestamp = time();
              }
              $format = 'Y-m-d g:i:s';    // 01:05:45
              $date = date($format, $timestamp);
              $text = $row->comment;
              $comment = new stdClass();
              $nid = $entity->nid;
              $comment->nid = $nid; // nid of a node you want to attach a comment to
              $comment->cid = 0; // leave it as is
              $comment->pid = 0; // parent comment id, 0 if none 
              $comment->uid = 109; // user's id, who left the comment
              //$comment->mail = 'email@example.com'; // user's email
              $comment->name = 'FIN Editor'; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
              //$comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
              //$comment->hostname = '127.0.01';
              //$comment->created = $date; 
              unset($comment->field_date['und'][0]['value']);
              $comment->field_date['und'][0]['value'] = $date;
              $comment->is_anonymous = 0; // leave it as is
              $comment->homepage = ''; // you can add homepage URL here
              $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
              $comment->language = LANGUAGE_NONE; // The same as for a node
              $comment->subject = ' '; 
              $comment->comment_body[$comment->language][0]['value'] = $text; // Everything here is pretty much like with a node
              $comment->comment_body[$comment->language][0]['format'] = 'advanced_input'; 
              comment_submit($comment);
              comment_save($comment);
          
              // have to force create date
              $comment->created = $timestamp;          
              $comment->changed = $timestamp;          
              comment_save($comment);        
            }
          }
      break;
      case 'comment2comment2xxx': 
        $oldTable = $params['oldtable'];
        $oldKeyFldnName = $params['oldkeyfldname'];
        $dateFldName = $params['date'];
        $key = $inData->$oldKeyFldName;
        $mysql = "SELECT %comment, %date FROM %oldtable WHERE %oldkey=%key";
        $mysql = str_replace("%comment", $commentFldName, $mysql); 
        $mysql = str_replace("%date", $dateFldName, $mysql);
        $mysql = str_replace("%table", $oldTable, $mysql);
        $mysql = str_replace("%oldkey", $oldKeyFldName, $mysql);
        $mysql = str_replace("%key", $key, $mysql);
        db_set_active('legacy');
        $myres = db_query($mysql);
        db_set_active();
        if (!empty($res)) {
          foreach ($res as $row) {
            $nid = $entity->nid;
            $date = $row->$dateFldName;
            $text = $row->$commentFldName;
            $comment = (object) array(
              'nid' => $nid,
              'cid' => 0,
              'pid' => 0,
              'uid' => 109,
              'mail' => '',
              'is_anonymous' => 0,
              'homepage' => '',
              'status' => COMMENT_PUBLISHED,
              'subject' => ' ',
              'language' => LANGUAGE_NONE,
              'comment_body' => array(
                LANGUAGE_NONE => array(
                  0 => array (
                    'value' => $text,
                    'format' => 'advanced_input'
                  )
                )
              ),
            );
            comment_submit($val);
            comment_save($comment);
          }
        }
      break;
      case 'mandate-notesxxx':
        $notes = $inData->Comments;
        $strArr = array();
        if (!empty($notes)) {
          $strArr[] = 'Migrated Comment: '.$notes;
          $empty = FALSE;
        }
        $history = $inData->History;
        if (!empty($history)) {
          $strArr[] = 'History: '.$history;
          $empty = FALSE;
        }
        $combined = implode(" | ", $strArr);
        $out = array();
        if (!empty($combined)) {
          $wrapper->{$dstFldName}->value = $combined;
        }
      break;
      case 'news-bit':
        $type = $inData->Type;
        switch ($type) {
          case 'consultant':
            $bundle = 'consultant_news';
            $ps = 'consultant firm';
            $pseudo = 'consultant news';
            $fld = 'field_consultant_firm_er';
          break;
          case 'fund':
            $bundle = 'plan_news';
            $ps = 'plan';
            $pseudo = 'plan news';
            $fld = 'field_plan_er';
          break;
          case 'manager':
            $bundle = 'manager_news';
            $ps = 'manager firm';
            $pseudo = 'manager news';
            $fld = 'field_manager_firm_er';
          break;
        }
        $id = $inData->NewsID;
        $hostnid = _fin_migrate_gotIdGetNid($id, 'news');
        $firmid = $inData->FirmID;
        $firmnid = _fin_migrate_gotIdGetNid($firmid, $ps);
        
        //Now, a second paragraph for cover art, default values
        $source = $inData->Source;
        switch ($source) {
          case 'emm':
            $bundle2 = 'emerging_manager_monthly';
            $pseudo2 = 'emm news';
            $tid = 1058;
          break;
          case 'npnews':
            $bundle2 = 'nonprofit_news';
            $pseudo2 = 'nonprofit news';
            $tid = 1060;
          break;
          case 'findaily':
            $bundle2 = 'fin_daily';
            $pseudo2 = 'findaily news';
            $tid = 1059;
          break;
        }
        $newParagraph = new ParagraphsItemEntity(array('field_name' => 'field_news_type', 'bundle' => $bundle));
        $newParagraph->is_new = TRUE;
        //$newParagraph->setHostEntity('node', $hostnid);
        $newParagraph->setHostEntity('node', $entity);
        $p_wrapper = entity_metadata_wrapper('paragraphs_item', $newParagraph);
        $p_wrapper->{$fld} = $firmnid;
        $p_wrapper->save();

        if (!empty($bundle2)) {
          $newParagraph2 = new ParagraphsItemEntity(array('field_name' => 'field_source_site', 'bundle' => $bundle2));
          $newParagraph2->is_new = TRUE;
          $newParagraph2->setHostEntity('node', $entity);
          $p_wrapper2 = entity_metadata_wrapper('paragraphs_item', $newParagraph2);
          $p_wrapper2->save();
        }
      break;
      case 'paragraph':          
        //$paragraphs = $map['paragraph'];
        $bundle = $params['param']['bundle'];
        $newInData[] = $inData;
        if (isset($params['multiplier'])) {
          $multi = $params['multiplier'];
          $handlr = $multi['handler'];
          $parms = $multi['params'];
          $tbl = $multi['oldtable'];
          $kyfld = $multi['oldkeyfldname'];
          $ky = $inData[$kyfld];
          $fld = $multi['oldfldname'];
          $multiArr = _fin_migrate_get_multiplier($handlr, $tbl, $kyfld, $ky, $fld);
          $newInData = array();
          foreach ($multiArr as $multiFld => $multiVal) {
            $inData->$multiFld = $multiVal;
            $newInData[] = $inData;
          }
        }
        $paragraphs = $params['sets'];
        foreach ($newInData as $inData) {
          foreach ($paragraphs as $paragraph) {
            _fin_migrate_handler_paragraph($bundle, $dstFldName, $paragraph, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey);
          }
        }
      break;
      case 'note-comment-to-note':
        $deltas = count($wrapper->$dstFldName);
        $sources = array(
          '242' => 'mccue@fin-news.com',
          '260' => 'gar guymoso@Yahoo.com',
        );
        $sourceid = $inData->SourceID;
        $sql = 'select uid from {users} where mail="'.$sources[$sourceid].'"';
        db_set_active();
        $res = db_query($sql);
        foreach ($res as $item) {
          $uid = $item->uid;
        }
        $sourcedate = $inData->SourceDate;
        if (stripos($sourcedate, 'ear)-(Month-Day')) {
          $date = time(0);
        } else {
          $date = strtotime($sourcedate);
        }
        $comment = $inData->Comments;
        $wrapper->$dstFldName[$delta]->field_mandate_note_author = $uid;
        $wrapper->$dstFldName[$delta]->field_note_author = $uid;
        $wrapper->$dstFldName[$delta]->field_date = $date;
        $wrapper->$dstFldName[$delta]->field_mandate_note = $comment;
      break;
      case 'note-history-to-note':
        $sourceid = $inData->SourceID;
        $sql = 'select uid from {users} where mail="'.$sources[$sourceid].'"';
        db_set_active();
        $res = db_query($sql);
        foreach ($res as $item) {
          $uid = $item->uid;
        }
        $history = $inData->History;
        $split_pattern = "/^|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])|[0-9]{4}-(0[1-9]$/";
        $raw = preg_split($pattern, $history, NULL, PREG_SPLIT_DELIM_CAPTURE);
        $count = count($raw);
        $raw[] = '';
        $content = array();
        for ($x=0; $x<$count; $x+2) {
          $date = $raw[$x];
          $entry = $raw[$x+1];
          if ($date) {
            $time = strtotime($date);
            $content[$time] = $entry;
          }
        }
        if ($content) {
          $set = array();
          $delta = count($wrapper->$dstFldName);
          foreach ($content as $time => $entry) {
            $wrapper->$dstFldName[$delta]->field_date = $time;
            $wrapper->$dstFldName[$delta]->field_note_author = $uid;
            $wrapper->$dstFldName[$delta]->field_mandate_note_author = $uid;
            $wrapper->$dstFldName[$delta]->field_mandate_note = $entry;
            $delta++;
          }
        }
      break;
      case 'note-comments-to-note':        
        $uid = 1;
        $delta = count($wrapper->$dstFldName);
        foreach ($inData as $row) {
          $entry = $row->Comment;
          $date = $row->Created;
          $wrapper->$dstFldName[$delta]->field_date = $time;
          $wrapper->$dstFldName[$delta]->field_note_author = $uid;
          $wrapper->$dstFldName[$delta]->field_mandate_note_author = $uid;
          $wrapper->$dstFldName[$delta]->field_mandate_note = $entry;
          $delta++;
        }
      breakl;
      case 'disabled':
      break;
      case 'mom':
        $pseudonym = 'manager firm';
        $mom = $inData->ManagerFirmID;
        $sql = 'SELECT ManagerFirmID FROM tblmommanagers WHERE MoMID='.$mom;
        db_set_active('legacy');
        $res = db_query($sql);
        db_set_active();
        if ($res->rowCount()>0) {
          //$oldNews = _fin_migrate_get_best_map();
          //$ref = unserialize($oldNews['oldnew']);
          $out = array();
          foreach ($res as $item) {
            $oldid = $item->ManagerFirmID;
            $newid = _fin_migrate_gotIdgetNid($oldid, $pseudonym);
            $out[] = $newid;
            //$out[]['target_id'] = $item->ManagerFirmID;
          }
          $wrapper->{$dstFldName} = $out;
          $wrapper->field_manager_of_managers = 1;
        }
      break;
      case 'onwatch':
        $refArray = array(
          'ConsultantOfficeID'=>'office',
          'ConsultantFirmID' => 'consultant firm',
          'ConsultantContactID' => 'consultant contact',
          'ManagerContactID' => 'manager contact',
          'ManagerFirmID' => 'manager firm',
          'FundContactID' => 'plan contact',
          'FundID' => 'plan',
          'MandateID' => 'mandate'
        );

        // val is a single oldid or comma delimited id
        if (!empty($val)) {
          $oldids = explode("," , $val);
          //$oldKeyFldName = $params['oldkeyfldname'];
          $oldKeyFldName = $params['oldkeyfldname'];
          $pseudonym = $refArray[$oldKeyFldName];
          //$oldNews = _fin_migrate_get_best_map();
          //$ref = unserialize($oldNews['oldnew']);
          $out = array();
          foreach ($oldids as $oldid) {
            //$newid = $ref[$pseudonym][$oldid];
            $out[] = _fin_migrate_gotIdgetNid($oldid, $pseudonym);
            //$out[]['target_id'] = $item->{$oldKeyFldName};
          }
          if (!empty($out)) {
            $wrapper->{$dstFldName} = $out;
          }
        }
      break;
      case 'asset-allocation':
        //          '7' => 'field_aa_international_fixed_income',
        $allocationFieldMap = array(
          '2' => 'field_aa_domestic_equities',
          '3' => 'field_aa_domestic_fixed_income',
          '4' => 'field_aa_alternative_strategies',
          '5' => 'field_aa_hedge_fund_strategies',
          '6' => 'field_aa_international_equities',
          '7' => 'field_aa_intl_fixed_income',
          '8' => 'field_aa_mutual_fund',
          '10' => 'field_aa_private_equity',
          '11' => 'field_aa_real_estate',
          '12' => 'field_aa_real_assets',
          '13' => 'field_aa_cash_other',
          '14' => 'field_aa_balanced',
          '15' => 'field_aa_global_equities',
          '16' => 'field_aa_absolute_return',
          '18' => 'field_aa_global_fixed_income',
          '19' => 'field_aa_credit_opportunities',
          '20' => 'field_aa_real_return',
          '21' => 'field_aa_multi_asset',
          '22' => 'field_aa_emerging_markets_equity',
          '23' => 'field_aa_risk_parity',
          '24' => 'field_aa_canadian_equities',
        );
        $messageArr = array();
        foreach ($inData as $ky => $vl) {
          if (!empty($vl) && $ky<>'srcid') {
            $fldName = $allocationFieldMap[$ky];
            $wrapper->{$fldName} = $vl;
            $messageArr[] = "Fieldname: ".$fldName." = ".$vl."%";   
          }
        }
        $message = "For ".$wrapper->label()." assign ".print_r($messageArr,true);
        watchdog("FIN_MIGRATE Asset Allocation", $message, array(), WATCHDOG_INFO);

        //$keyFldName = $params['keyfldname'];
        //$fid = $inData->$keyFldName;
        //$dstFldName = $allocationFieldMap[$fid];
        //$out = $inData->percentage;
        //if ($out) {
          //$wrapper->$dstFldName = $out;
        //}

//bugBrrrk();

      break;
      
      case 'asset-allocationxxx':
        $allocationFieldMap = array(
          '2' => 'field_aa_domestic_equities',
          '3' => 'field_aa_domestic_fixed_income',
          '4' => 'field_aa_alternative_strategies',
          '5' => 'field_aa_hedge_fund_strategies',
          '6' => 'field_aa_international_equities',
          '7' => 'field_aa_international_fixed_income',
          '8' => 'field_aa_mutual_fund',
          '10' => 'field_aa_private_equity',
          '11' => 'field_aa_real_estate',
          '12' => 'field_aa_real_assets',
          '13' => 'field_aa_cash_other',
          '14' => 'field_aa_balanced',
          '15' => 'field_aa_global_equities',
          '16' => 'field_aa_absolute_return',
          '18' => 'field_aa_global_fixed_income',
          '19' => 'field_aa_credit_opportunities',
          '20' => 'field_aa_real_return',
          '21' => 'field_aa_multi_asset',
          '22' => 'field_aa_emerging_markets_equity',
          '23' => 'field_aa_risk_parity',
          '24' => 'fi_aa_canadian_equities',
        );
        $keyFldName = $params['keyfldname'];
        $dstFldName = $allocationFieldMap[$keyFldName];
        $wrapper->$dstFldName = $val;
      break;
      case 'comma-delimited-rounded':
        if (!empty($val)) {
          $pieces = explode(',', $val);
          if (empty($pieces)) {
            $pieces = array($val);
          }
          $tot = round(array_sum($pieces));
          if (!empty($tot)) {
            $out = intval($tot);
            /// PLW 022916 - I cannot satisfy this wrapper, disable for now
            $wrapper->$dstFldName = $out;
          }
        }
      break;
      case 'rounded':
        if (!empty($val)) {
          $out = intval($val);
          /// PLW 022916 - I cannot satisfy this wrapper, disable for now
          $wrapper->$dstFldName = $out;
        }
      break;
      case 'plan-status':
        $vl = $inData->Status;
        $tid = 340;
        if ($vl=="1" || $vl=="2") {
          $tid = 341;
        }
        $wrapper->field_status_tr = $tid;
      break;
      case 'longtext':
        $wrapper->$dstFldName->value = $val;
        $wrapper->$dstFldName->format = 'advanced_input';
      break;
      case 'shortcode':
        $refArray = array(
          "CF"=>1033,
          "C"=>1034,
          "M"=>1035,
          "MF"=>1036,
          "N"=>1037,
          "O"=>1038,
          "P"=>1039,
        );
        $shortcode = $params['shortcode'];
        $tid = $refArray[$shortcode];
        $wrapper->{$dstFldName} = $tid;
      break;
      case 'wuin':
        if (!empty($val)) {
          $tbl = $params['tbl'];
          $hash = md5($tbl . $val);
          $wrapper->{$dstFldName} = $hash;
        }
      break;
      default:
        if (!empty($val)) {
          $wrapper->$dstFldName = $val;
        }
      break;
    }
    //return $out;
    return TRUE;
  }
}

function _fin_migrate_get_multiplier($handler, $oldTable, $oldKeyFldName, $oldKey, $returnFldName) {
  switch($handler) {
    case 'external-table':
      $rs = _fin_migrate_get_best_additional_table_data($oldTable, $oldKeyFldName, $oldKey);
      $out = array();
      foreach ($rs as $r) {
        $out[] = array('fldname'=>$returnFldName, 'value'=>$r->$returnFldName);
      }
      break;
    }
    if ($out) {
      return $out;
    }
}

function _fin_migrate_get_tid_by_name($name, $vid) {
  db_set_active();
  $sql = "select tid from {taxonomy_term_data} where vid=".$vid." and name='".$name."' limit 1";
  $res = db_query($sql);
  foreach ($res as $item) {
    $tid = $item->tid;
  }
  return $tid;
}

function _fin_migrate_handler_system($inArr, $inData, &$wrapper, &$entity, $termMap) {
  $fields = $inArr['fields'];
  // currently we only have fields section to process
  _fin_migrate_process_fields($fields, $inData, $wrapper, $entity, $termMap);
}

/*
 * Helper function to grab data from secondary tables as needed
 * Features:
 *  - Grabs entire secondary tables from old database
 *  - Caches tables for repeated use, especially key tables
 *    Returns only rows related to current parent table movement
 *
 * @parameters 
 *  $srcTable - Secondary table to read or pull from cache
 *  $primeKeyFldName - Name of parent table prime, or this table foreign key
 *    We use this for indexing the cached array, and for selecting data we need
 *  $primeKey - the actual maching value we are looking for
 * @returns
 *  $res - an array of query resultsets, fetched
 *  
 */
function _fin_migrate_get_best_additional_table_data($srcTable, $primeKeyFldName, $primeKey, $force=FALSE) {
  $res = array();
  $tabls = unserialize(variable_get('fin-migrate-tabl'));
  $resArray = array();

  if (!isset($tabls[$srcTable]) or $force) {
    //if (!$tabls[$srcTable]) {
      // we cannot use indata here, we have to selectively read another table
      $sql = "select * from ".$srcTable;
      db_set_active('legacy');
      $res = db_query($sql);
      db_set_active();

      // as is, res is not useful, we need to index it by oldkeys for quick access later
      //$ref = array();
      $ref = '';
      foreach ($res as $rs) {
        $pk = $rs->$primeKeyFldName; 
        $ref[$pk][] = $rs;
      }

      $message = "ADDT TABLE REF: ".print_r($ref,true);
      watchdog('DEBUG_4', $message, array(), WATCHDOG_INFO);

      // save table to the database in case we need it later
      $tabls[$srcTable] = $ref;
      variable_set('fin-migrate-tabl', serialize($tabls));
           
      // we still need the rows pretaining to our current parent data
      if (isset($ref[$primeKey])) {
        $resArray = $ref[$primeKey];
      }
    //}
  } else {
    //$ind = (int) $primeKey;
    if (isset($tabls[$srcTable][$primeKey])) {
      $resArray = $tabls[$srcTable][$primeKey];  
    }
$message = "TRYING TO GET SUBTABLE: TBL: ".$srcTable." | Rows: ".count($resArray)." | key: ".$primeKey."<br><br>GOT: ".print_r($resArray,true);
watchdog('ADDT_DATA_3', $message, array(), WATCHDOG_INFO);
  
  }   
  return $resArray;
}

/*
 * Wrapper Table to check majorminor import table for new major/minors
 */
function _fin_migrate_get_import_majorminor($mandateID) {
  $sql = "SELECT * FROM {tblmajorminormap} where MandateID=".$mandateID;
  $out = array();
  $res = db_query($sql);
  foreach ($res as $row) {
    $out['major'] = $row->MajorStyle;
    $out['minor'] = $row->MinorStyle;
    return $out;
  }
  return FALSER;
}

/*
 * Wrapper Function to make a common id for nid operation consistent
 */
function _fin_migrate_gotIdgetNid($id, $pseudonym, $oldNew=array()) {
  
  $pseudoArr = array(
    'plan-history' => 'plan',
    'mandate-history' => 'mandate',
  );
  if (isset($pseudoArr[$pseudonym])) {
    $pseudonym = $pseudoArr[$pseudonym];
  }
  $sql = "SELECT nid FROM {fin_migrate_node} WHERE srcid=".$id." and pseudonym='".$pseudonym."'";
  db_set_active();
  $res = db_query($sql);
  $nid = 0;
  foreach ($res as $row) {
    $nid = $row->nid;
  }
  return $nid;
}

function _fin_migrate_add_to_oldnew_node_table($pseudonym, $id, $nid, $contactname) {
  $tableArr = array(
    'consultant firm' => 'tblconsultantfirms',
    'office' => 'tblconsultantoffices',
    'manager firm' => 'tblmanagerfirms',
    'plan' => 'tblfunds',
    'plan-history' => 'tblfunds',
    'mandate' => 'tblmandates',
    'mandate-history' => 'tblmandates',
    'consultant contact' => 'tblconsultantcontacts',
    'fund contact' => 'tblfundcontacts',
    'manager contact' => 'tblmanagercontacts',
    'news' => 'tblnews',
  );
  
  $pseudoArr = array(
    'plan-history' => 'plan',
    'mandate-history' => 'mandate',
  );
  if (isset($pseudoArr[$pseudonym])) {
    $pseudonym = $pseudoArr[$pseudonym];
  }

  $table = '';
  if (isset($tableArr[$pseudonym])) {
    $table = $pseudoArr[$pseudonym];
  }
  try{
    $sql = "INSERT INTO {fin_migrate_node} (pseudonym, srcid, nid, contactname, tbl) VALUES('%pseudonym', %srcid, %nid, '%contactname', '%table')";
    $sql = str_replace('%pseudonym', $pseudonym, $sql);
    $sql = str_replace('%srcid', $id, $sql);
    $sql = str_replace('%nid', $nid, $sql);
    $sql = str_replace('%contactname', $contactname, $sql);
    $sql = str_replace('%table', $table, $sql);
    $res = db_query($sql);
  }

  catch (Exception $e) {
    $message = "Fin Migrate Node table update failed. SQL = ".$sql."<br><br>Error: ".$e->getMesssage();;
    watchdog('FIN_MIGRATE_OLDNEW_NODE_TABLE', $message, array(), WATCHDOG_CRITICAL);
  }
}

///////// FIN_MIGRATE_COLLECTION TABLE /////////////////////

function _fin_migrate_gotIdgetFieldid($id, $pseudonym) {
  $sql = "SELECT field_id FROM {fin_migrate_collection} WHERE srcid=".$id." and pseudonym='".$pseudonym."'";
  $res = db_query($sql);
  $field_id = 0;
  foreach ($res as $row) {
    $field_id = $row->field_id;
  }
  return $field_id;
}

function _fin_migrate_add_to_oldnew_collection_table($pseudonym, $srcid, $nid, $contactname, $host_field, $entity_id) {

// host_field, field_id  
  $tableArr = array(
    'consultant job' => 'tblconsultantcontacts',
    'plan job' => 'tblfundcontacts',
    'manager job' => 'tblmanagercontacts',
    'plan consultant roster' => 'tblfundconsultants',
    'plan manager roster' => 'tblfundmanagers',
    'emm news' => 'tblnews',
    'findaily news' => 'tblnews',
    'nonprofit news' => 'tblnews',
  );
  $table = '';
  if (isset($tableArr[$pseudonym])) {
    $table = $tableArr[$pseudonym];
  }
  try{
    $sql = "INSERT INTO {fin_migrate_collection} (pseudonym, srcid, nid, contactname, host_field, field_id, tbl) VALUES('%pseudonym', %srcid, %nid, '%contactname', '%host_field', '%entity_id', '%table')";
    $sql = str_replace('%pseudonym', $pseudonym, $sql);
    $sql = str_replace('%srcid', $srcid, $sql);
    $sql = str_replace('%nid', $nid, $sql);
    $sql = str_replace('%contactname', $contactname, $sql);
    $sql = str_replace('%host_field', $host_field, $sql);
    $sql = str_replace('%entity_id', $entity_id, $sql);    
    $sql = str_replace('%table', $table, $sql);    
    $res = db_query($sql);
  } 
  catch (Exception $e) { 
    $message = "Fin Migrate Node table update failed. SQL = ".$sql."<br /><br />".$e->getMessage();
    watchdog('FIN_MIGRATE_OLDNEW_NODE_TABLE', $message, array(), WATCHDOG_CRITICAL);
  }
}

function _fin_migrate_node_step2_updated($nid, $failed=FALSE) {
  if (!empty($nid)) {
    $flag = 1;
    $sql = "UPDATE {fin_migrate_node} set step2=".$flag." where nid=".$nid;
    $res = db_query($sql);
  }
}

/*
 * Function to postdate node timestgampes to avoid new/update
 */
function _fin_migrate_postdate($node) {
  //0604 set original date back, just match updated=created now
  //$aged = 32*24*60*60;
  //$created = $node->created-$aged;
  $created = $node->created;
  $nid = $node->nid;
  $sql = "UPDATE {node} SET changed=".$created." WHERE nid=".$nid;
  $res = db_query($sql);
}

/*
  if (isset($oldNew[$pseudonym][$id]['nid'])) {
    return $nid;
  } else {
    $message = $pseudonym ." |id: ".$id." missing from OldNew: ".print_r($oldNew,true);
    watchdog('FIN_MIGRATE_NID4ID', $message, array(), WATCHDOG_INFO);
  }
*/

/*
 * //////////////////// Helper Functions ///////////////////
 */
function fin_migrate_update_map($name, $oldNew, $newOld) {
  $var1 = $name .'1';
  $var2 = $name . '2';
  $saveArr = array(
    'oldnew' => serialize($oldNew),
    'newold' => serialize($newOld),
  );
  variable_set($var1, serialize($saveArr));
  variable_set($var2, serialize($saveArr));
}

function fin_migrate_get_nodemaps($mode='step1') {

$nm_co = array(
    'office' => array(
      'params' => array(
        'oldtable' => 'tblconsultantoffices',
        'oldkeyfldname' => 'ConsultantOfficeID',
        'dst' => 'office',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantOfficeName'), 
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'title-field' => array(
          'title_field' => array('fldname'=>'ConsultantOfficeName'),
        ),
        'default' => array(
          'field_legendid' => array('fldname'=>'ConsultantOfficeID'),
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'ConsultantOfficeID', 'tbl'=>'tblconsultantoffices'),
        ),
        'lu2term' => array(
          'field_office_type_tr' => array('fldname'=>'OfficeType'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'reference' => array(
          'field_consultant_firm_er'=>array('fldname'=>'ConsultantFirmID'),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'ZIP'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  /////////////////////////////////////
/****

field_invest_mgr_research
 'field_consultant_firm_er'
  'field_consultant_contact_er'
  'field_client_type_tr'
  'field_asset_class_tr'
  'field_databases_used_tr'
                  'longtext' => array(
                    'field_notes' => array('fldname'=>'Notes'),
                  ),

  'field_note' 'Notes'
xxxxxxxxxxxxxxxxxx

          'field_invest_mgr_research' => array(
            'params' => array(
              'pseudonym' => 'consultant investment research',                                
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblinvestmentmanagerresearch',
                  'rowkeyfldname' => 'InvestmentResearchManagerId',
                ),
                'fields' => array(
                  'comma-delimited-lu2term' => array(
                    'field_client_type_tr' => array('fldname'=>'ClientTypeID'),
                    'field_asset_class_tr' => array('fldname'=>'AssetClassID'),
                    'field_databases_used_tr' => array('fldname'=>'DatabasesUsedID'),
                  
                  'http2linksnotitle' => array(
                    'field_questionnaire' => array('fldname'=>'Questionnaire'),
                  ),
                  'longtext' => array(
                    'field_notes' => array('fldname'=>'Notes'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
                  ),
                ),
              ),
            ),              
          ),

***/  

  ///////////////////////////////////
  $nm_cf = array(
    'consultant firm' => array(
      'params' => array(
        'oldtable' => 'tblconsultantfirms',
        'oldkeyfldname' => 'ConsultantFirmID',
        'rowkeyfldname' => 'ConsultantFirmID',
        'dst'=>'consultant_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantFirmName'),
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'title-field' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
        ),
        'default' => array(  
          'field_aua' => array('fldname'=>'AUA'),
          'field_legendid' => array('fldname'=>'ConsultantFirmID'),        
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'ConsultantFirmID', 'tbl'=>'tblconsultantfirms'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'collection' => array(
          'field_consultant_comments_fc' => array(
            'params' => array(
              'pseudonym' => 'consultant comment',
              'rowidfldname' => 'id',                        
            ),
            'sets' => array(
              array(
                'params' => array(
                  'gather-consultant-comment' => array(),              
                ),
                'fields' => array(
                  'default' => array(
                    'field_author_er' => array('fldname'=>'author'),
                    'field_subject' => array('fldname'=>'subject'),
                  ),
                  'longtext' => array(
                    'field_comment' => array('fldname'=>'comment'),
                  ),
                  'timestampe2date' => array(
                    'field_date' => array('fldname'=>'date'),                  
                  ),
                ),
              ),
            ),
          ),
          'field_invest_mgr_research' => array(
            'params' => array(
              'pseudonym' => 'consultant investment research',                                
              'rowidfldname' => 'ConsultantFirmID',            
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblinvestmentmanagerresearch',
                  'rowkeyfldname' => 'InvestmentResearchManagerId',
                ),
                'fields' => array(
                  'comma-delimited-lu2term' => array(
                    'field_client_type_tr' => array('fldname'=>'ClientTypeID'),
                    'field_asset_class_tr' => array('fldname'=>'AssetClassID'),
                    'field_databases_used_tr' => array('fldname'=>'DatabasesUsedID'),
                  ),
                  'http2linksnotitle' => array(
                    'field_questionnaire' => array('fldname'=>'Questionnaire'),
                  ),
                  'longtext' => array(
                    'field_note' => array('fldname'=>'Notes'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                  ),
                  'comma-delimited-reference' => array(
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
                  ),
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );

  $nm_mf = array(
    'manager firm' => array(
      'params' => array(
        'oldtable' => 'tblmanagerfirms',
        'oldkeyfldname' => 'ManagerFirmID',
        'dst'=>'manager_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ManagerFirmName'),
          ),
        ),
      ),
      'fields' => array(
        'title-field' => array(
          'title_field' => array('fldname'=>'ManagerFirmName'),
        ),
        'default' => array(          
          'field_legendid' => array('fldname'=>'ManagerFirmID'),
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'ManagerFirmID', 'tbl'=>'tblmanagerfirms'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'comment2comment' => array(
          'this_is_not_a_field' => array('fldname'=>'Comments'),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  $nm_mfpfix = array(
    'manager firm' => array(
      'params' => array(
        'oldtable' => 'tblmanagerfirms',
        'oldkeyfldname' => 'ManagerFirmID',
        'dst'=>'manager_firm',
      ),
      'fields' => array(
        'collection' => array(
          'field_sub_manager_firms_fc' => array(
            'params' => array(
              'pseudonym' => 'mom',                                
              //'rowkeyfldname' => 'ManagerFirmID',
              'rowkeyfldname' => 'MoMID',            
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblmommanagers',
                  'key-alias' => 'MoMID',                  
                  'fldname' => 'MoMID',
                  'primeKeyfldname' => 'MomID',
                  'rowkeyfldname' => 'MoMManagerID',
                  'rowkeycheckfldname' => 'MoMID',
                  'rowkeycheck' => TRUE,
                  'blankcheck' => TRUE,
                  'blankcheckfldname' => 'ManagerFirmID',
                  'rowidfldname' => 'MoMManagerID',                
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),
                  'majorminor' => array(
                    'field_major_minor_style_tr' => array(),
                  ), 
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );

  //'address3' => array('fldname'=>array('Address3')),
  $nm_p = array(
    'plan' => array(
      'params' => array(
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
        'rowkeyfldname' => 'FundID',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'FundName'),
          ),
          'node-body' => array(
            'body' => array(),      
          ),
        ),
      ),
      'fields' => array(
        'title-field' => array(
          'title_field' => array('fldname'=>'FundName'),
        ),
        'default' => array(
          'field_acronym' => array('fldname'=>'Acronym'),
          'field_old_lead_contact' => array('fldname'=>'ContactName'),
          'field_legendid' => array('fldname'=>'FundID'),
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'FundID', 'tbl'=>'tblfunds'),
        ),
        'plan-status' => array(
          'field_status_tr' => array('fndname'=>'Status'),    
        ),
        'http2linknotitle' => array(
          'field_website' => array('fldname'=>'Website'),
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink', 'title'=>'Placement Policy'),
        ),
        'lu2term' => array(
          'field_placement_policy_tr' => array('fldname'=>'PlacementPolicy'),
          'field_plan_type_tr' => array('fldname'=>'FundTypeID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
          'field_status_tr' => array('fldname'=>'Status', 'voc'=>'5'),
        ),          
        'text2email' => array(
           'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'comment2comment' => array(
          'this_is_not_a_field' => array('fldname'=>'Comments'),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
        'collection' => array(
          'field_manager_roster_fc' => array(
            'params' => array(
              'pseudonym' => 'plan manager roster',                                
              'rowkeyfldname' => 'FundID',
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundmanagers',
                  'rowkeyfldname' => 'FundManagerID',
                  'rowkeycheckfldname' => 'ManagerFirmID',
                  'rowkeycheck' => TRUE,
                  'blankcheck' => TRUE,
                  'blankcheckfldname' => 'ManagerFirmID',
                  'blankcheckbad' => TRUE,
                  'blankcheckbadpseudo' => 'manager firm',
                  'dupcheck' => FALSE,
                  'dupcheckfldname' => 'FundManagerID',
                  'rowidfldname' => 'FundManagerID',                
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'major2term' => array(
                    'field_old_major_style' => array('fldname'=>'MajorStyleID'),
                  ), 
                  'minor2term' => array(
                    'field_old_minor_style' => array('fldname'=>'MinorStyleID'),
                  ),
                  'majorminor' => array(
                    'field_major_minor_style_tr' => array(),
                  ), 
                ),
              ),
            ),              
          ),
          'field_consultant_roster_fc' => array(
            'params' => array(
              'pseudonym' => 'plan consultant roster',                                
              'rowkeyfldname' => 'FundID',            
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundconsultants',
                  'rowkeyfldname' => 'FundConsultantID',
                  'rowkeycheckfldname' => 'ConsultantFirmID',
                  'rowkeycheck' => TRUE,
                  'rowidfldname' => 'FundConsultantID',                
                  'blankcheckbad' => TRUE,
                  'blankcheckbadpseudo' => 'consultant firm',
                ),
                'fields' => array(
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantTypeID'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                  ),
                  'comma-delimited-reference' => array(
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_asset_allocation_history' => array(
            'params' => array(
              'pseudonym' => 'Plan Asset Allocation',                                
              'rowkeycheck' => FALSE,            
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'finsearch_asset_allocations',
                  'rowkeyfldname' => 'allocation_id',                  
                  'key-alias' => 'firm_id',
                  'onerow' => 'TRUE',
                  'onerowkeyname' => 'asset_class_id',
                  'onerowfldname' => 'percentage',
                  'dupcheck' => FALSE,
                  'dupcheckfldname' => 'srcid',
                  'rowidfldname' => 'srcid',
                ),
                'fields' => array(
                  'asset-allocation' => array(
                    'automatically-determined' => array('fldname'=>'percentage', 'keyfldname'=>'asset_class_id'),
                  ),
                ),
              ),
            ),              
          ),
          'field_plan_size_history' => array(
            'params' => array(
              'pseudonym' => 'plan plan size history',                                
            ),
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                  'rowidfldname' => 'FundID',
                  'blankcheck' => TRUE,
                  'blankcheckfldname' => 'FundSize',                
                ),
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundSizeAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_foia_history' => array(
            'params' => array(
              'pseudonym' => 'plan foia history',                                
            ),
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                  'rowidfldname' => 'FundID',                
                ),
                'fields' => array(
                  'mixed2link' => array(
                    'field_foia_form' => array('fldname'=>'FOIAForm')
                  ),
                  'foia2notes' => array(
                    'field_foia_notes' => array('names'=>array('FOIAMethod', 'FOIAForm'))
                  ),
                  'default' => array(
                    'field_full_name' => array('fldname'=>'FOIAContactName'),
                    'field_foia_required' => array('fldname'=>'FOIA'),
                  ),
                  'timestamp2date' => array(
                    'field_foia_date' => array('fldname'=>'FOIADate'),                
                  ),
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );
  // same as above, but called plan-history rather than plan, fir inactives
  $nm_ph['plan-history'] = $nm_p['plan'];
  //$nm_ph['plan-history']['fields']['plan-status'] = array  );

  $nm_ppfix = array(
    'plan' => array(
      'params' => array(
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
        'rowkeyfldname' => 'FundID',
      ),
      'fields' => array(
        'collection' => array(
          'field_manager_roster_fc' => array(
            'params' => array(
              'pseudonym' => 'plan manager roster',                                
              'rowkeyfldname' => 'FundID',
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundmanagers',
                  'rowkeyfldname' => 'FundManagerID',
                  'rowkeycheckfldname' => 'ManagerFirmID',
                  'rowkeycheck' => TRUE,
                  'blankcheck' => TRUE,
                  'blankcheckfldname' => 'ManagerFirmID',
                  // in addition to blanks, invalid ids too
                  // this depends on manager data already being
                  // migrated. Plans always go after firms.
                  'blankcheckbad' => TRUE,
                  'blankcheckbadpseudo' => 'manager firm',
                  'dupcheck' => FALSE,
                  'dupcheckfldname' => 'FundManagerID',
                  'rowidfldname' => 'FundManagerID',                
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'major2term' => array(
                    'field_old_major_style' => array('fldname'=>'MajorStyleID'),
                  ), 
                  'minor2term' => array(
                    'field_old_minor_style' => array('fldname'=>'MinorStyleID'),
                  ),
                  'majorminor' => array(
                    'field_major_minor_style_tr' => array(),
                  ), 
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );

  $nm_ppfix_truncated = array(
    'plan' => array(
      'params' => array(
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
        'rowkeyfldname' => 'FundID',
      ),
      'fields' => array(
        'collection' => array(
          'field_manager_roster_fc' => array(
            'params' => array(
              'pseudonym' => 'plan manager roster',                                
              'rowkeyfldname' => 'FundID',
            ),
            'sets' => array(
              array(
                'params' => array(
                  'fillmode' => TRUE,
                  'oldtable' => 'tblfundmanagers',
                  'rowkeyfldname' => 'FundManagerID',
                  'rowkeycheckfldname' => 'ManagerFirmID',
                  'rowkeycheck' => TRUE,
                  'blankcheck' => TRUE,
                  'blankcheckfldname' => 'ManagerFirmID',
                  // in addition to blanks, invalid ids too
                  // this depends on manager data already being
                  // migrated. Plans always go after firms.
                  'blankcheckbad' => TRUE,
                  'blankcheckbadpseudo' => 'manager firm',
                  'dupcheck' => FALSE,
                  'dupcheckfldname' => 'FundManagerID',
                  'rowidfldname' => 'FundManagerID',                
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'major2term' => array(
                    'field_old_major_style' => array('fldname'=>'MajorStyleID'),
                  ), 
                  'minor2term' => array(
                    'field_old_minor_style' => array('fldname'=>'MinorStyleID'),
                  ),
                  'majorminor' => array(
                    'field_major_minor_style_tr' => array(),
                  ), 
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );
 
/*** 040316 I do not know where this came from
/////////////////////////////////////////////////////////
        'title-field' => array(
          'title_field' => array('fldname'=>'FundName'),
        ),
        'default' => array(
          'field_account_size' => array('fldname'=>'Size'),
          'field_plan_size' => array('fldname'=>'FundSize'),
          'field_legendid' => array('fldname'=>'ConsultantFirmID'),
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'ConsultantFirmID', 'tbl'=>'tblconsultantfirms'),
        ),
        'rounded' => array(
          'field_managed_amount' => array('fldname'=>'FirmsHiredAmount'),
        ),
        'date2date' => array(
          'field_date' => array('fldname'=>'MandateDate'),
          'field_rfp_date' => array('fldname'=>'RFPDate'),
        ),
        'http2link' => array(
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink'),
          'field_rfp_link' => array('fldname'=>'RFPLink'),
          'field_website' => array('fldname'=>'Website'),
        ),
        'lu2term' => array(
          'field_mandate_status_tr' => array('fldname'=>'StatusID'),
          'field_geographic_tr' => array('fldname'=>'GeographicID'),
          'field_attribute_tr' => array(),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
        ),
        'reference' => array(
          'field_plan_er' => array('fldname'=>'FundID'),
          'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
          'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
        ),
////////////////////        

          'field_plan_size' => array('fldname'=>'FundSize'),
          'field_title' => array('fldname'=>'FundName'),
**/
  $nm_m = array(
    'mandate' => array(
      'params' => array(
        'oldtable' => 'tblmandates',
        'oldkeyfldname' => 'MandateID',
        'dst' => 'mandate',
      ),
      'system' => array(
        'fields' => array(
          'node-body' => array(
            'body' => array('fldname'=>'History'),      
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'title-field' => array(
          'title_field' => array('fldname'=>'ManagerFirmName'),
        ),
        'default' => array(
          'field_account_size' => array('fldname'=>'Size'),
          'field_legendid' => array('fldname'=>'MandateID'),
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'MandateID', 'tbl'=>'tblmandates'),
        ),
        'date2date' => array(
          'field_date' => array('fldname'=>'MandateDate'),
          'field_rfp_date' => array('fldname'=>'RFPDate'),
        ),
        'http2link' => array(
          'field_rfp_link' => array('fldname'=>'RFPLink'),
        ),
        'lu2term' => array(
          'field_mandate_status_tr' => array('fldname'=>'StatusID'),
          'field_geographic_tr' => array('fldname'=>'GeographicID'),
          'field_attribute_tr' => array(),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
        ),
        'comma-delimited-rounded' => array(
          'field_managed_amount' => array('fldname'=>'FirmsHiredAmount'),
        ),
        'majorminor' => array(
          'field_major_minor_style_tr' => array(),
        ), 
        'reference' => array(
          'field_plan_er' => array('fldname'=>'FundID'),
          'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
        ),
        'comma-delimited-reference' => array(
          'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
        ),
        'onwatch' => array(
          'field_consultants_finalists_er' => array(
            'fldname'=>'ConsultantFinalists', 
            'oldkeyfldname'=>'ConsultantFirmID'),
          'field_managers_onwatch_er' => array('fldname'=>'FirmsOnWatch', 'oldkeyfldname'=>'ManagerFirmID'),
          'field_managers_finalists_er' => array('fldname'=>'Finalists', 'oldkeyfldname'=>'ManagerFirmID'),
        ),
        'major2term' => array(
          'field_old_major_style' => array('fldname'=>'MajorStyleID'),
        ), 
        'minor2term' => array(
          'field_old_minor_style' => array('fldname'=>'MinorStyleID'),
        ), 
        'comment2comment' => array(
          'this_is_not_a_field' => array('fldname'=>'Comments'),
        ),
        'mandatecomments2comment' => array(
          'this_is_not_a_field' => array('fldname'=>'Comments', 'date'=>'Created', 'oldtable'=>'tblmandatecomments', 'oldkeyfldname'=>'MandateID'),
        ),
        'collection' => array(
          'field_consultants_hired' => array(
            'params' => array(
              'pseudonym' => 'mandate consultant hired',
              'rowidfldname' => 'MandateID',            
            ),
            'sets' => array(
              array(
                'params' => array(
                  'comma-delimited-field' => array(
                    'srcref' => 'ConsultantFirmsHired',
                    'dstref' => 'field_consultant_firm_er',
                    'oldkeyfldname' => 'ConsultantFirmID',
                  ),
                  //'rowidfldname' => 'MandateID',
                ),
                'fields' => array(
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID', 'pseudonym'=>'consultant firm'),
                  ),
                ),
              ),
            ),              
          ),
          'field_consultants_terminated' => array(
            'params' => array(
              'pseudonym' => 'mandate consultant terminated',
              'rowidfldname' => 'MandateID',            
              //'rowidfldname' => 'MandateID',                        
            ),
            'sets' => array(
              array(
                'params' => array(
                  'comma-delimited-field' => array(
                    'srcref' => 'ConsultantFirmsTerminated',
                    'dstref' => 'field_consultant_firm_er',
                    'oldkeyfldname' => 'ManagerFirmID'
                  ),
                  //'rowidfldname' => 'MandateID',                
                ),
                'fields' => array(
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ManagerFirmID','pseudonym'=>'consultant firm'),
                  ),
                ),
              ),
            ),              
          ),
          'field_managers_hired' => array(
            'params' => array(
              'pseudonym' => 'mandate manager hired',
              'rowidfldname' => 'MandateID',            
            ),
            'sets' => array(
              array(
                'params' => array(
                  'comma-delimited-field' => array(
                    'srcref' => 'FirmsHired',
                    'srcval' => 'FirmsHiredAmount',
                    'dstref' => 'field_manager_firm_er',
                    'oldkeyfldname' => 'ManagerFirmID',
                  ),
                  //'rowidfldname' => 'MandateID',                
                ),
                'fields' => array(
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID', 'pseudonym'=>'manager firm'),
                  ),
                  'rounded' => array(
                    'field_amount' => array('fldname'=>'srcval'),                  
                  ),
                ),
              ),
            ),              
          ),
          'field_managers_terminated' => array(
            'params' => array(
              'pseudonym' => 'mandate manager terminated',
              'rowidfldname' => 'MandateID',            
              //'rowidfldname' => 'MandateID',                        
            ),
            'sets' => array(
              array(
                'params' => array(
                  'comma-delimited-field' => array(
                    'srcref' => 'FirmsTerminated',
                    'srcval' => 'FirmsTerminatedAmount',
                    'dstref' => 'field_manager_firm_er',
                    'oldkeyfldname' => 'ManagerFirmID',
                  ),
                  //'rowidfldname' => 'MandateID',                
                ),
                'fields' => array(
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID', 'pseudonym'=>'manager firm'),
                  ),
                  'rounded' => array(
                    'field_amount' => array('fldname'=>'srcval'),                  
                  ),
                ),
              ),
            ),              
          ),       
        ),
      ),
    ),
  );
// 242 Matt | 260 Gar SourceID just make UID 1
// gar guymoso@Yahoo.com matt matt mmccue@fin-news.com
// 242 Matt | 260 Gar SourceID just make UID 1
// gar guymoso@Yahoo.com matt matt mmccue@fin-news.com
  $nm_mh['mandate-history'] = $nm_m['mandate'];  

/*
 ),
////////////////
          'field_mandate_comments_fc' => array(
            'params' => array(
              'pseudonym' => 'mandate comment',
              'rowidfldname' => 'MandateID',            
              //'rowidfldname' => 'id',                        
            ),
            'sets' => array(
              array(
                'params' => array(
                  'gather-mandate-notes-1' => array(), // no params needed
                  'rowidfldname' => 'id',                
                ),
                'fields' => array(
                  'default' => array(
                    'field_author_er' => array('fldname'=>'author'),
                    'field_subject' => array('fldname'=>'subject'),
                  ),
                  'longtext' => array(
                    'field_comment' => array('fldname'=>'comment'),
                  ),
                  'timestampe2date' => array(
                    'field_date' => array('fldname'=>'date'),                  
                  ),
                ),
              ),
            ),
          ),
//////////////////
*/
/*
 * Contacts - nm_cc, nm_mc, nm_pc used in step 1, nm_contact used in step 2
 
 */
  $nm_contact = array(
    'contact' => array(
      'params' => array(
        'dst'=>'contact',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
          ),
          //'node-body' => array(
          //  'body' => array('fldname'=>'Bio'),      
          //),
          'picture' => array(
            'field_photo' => array('fldname'=>'Picture'),
          ),
          'longtext' => array(
            'field_bio' => array('fldname'=>'Bio'),
          ),
        ),
      ),
      'fields' => array(        
      ),
      'job-history' => array(
        'params' => array(
          'hostfield' => 'field_job_history',
        ),
        'bundles' => array(
          'tblconsultantcontacts' => array(
            'params' => array(
              'bundle'=>'consultant_contact',
              'pseudonym' => 'consultant job',
              'rowkeyfldname' => 'rowid',
              'rowidfldname' => 'rowid',
            ),
            'fields' => array(
              'default'=>array(
                'field_job_title'=>array('fldname'=>'Title'),
                'field_legendid' => array('fldname'=>'rowid'),
                'field_old_inactive_job' => array('fldname'=>'Inactive'),
              ),
              'date2timestamp2' => array(
                'field_created_on_date' => array('fldname'=>'CreatedOn'),
                'field_updated_on_date' => array('fldname'=>'UpdatedOn'),
              ),
              'wuin' => array(
                'field_wuin' => array('fldname'=>'rowid', 'tbl'=>'tblconsultantcontacts'),
              ),
              'lu2consultanttype' => array(
                'field_consultant_contact_type_tr' => array('fldname'=>'ConsultantType'),
              ),
              'tid2tid' => array(
                'field_job_type_tr' => array('tid'=>1055),
              ),
              'employmentdate' => array(
                'field_employment_date' => array(
                  'fldname' => 'start',
                  'date2' => 'end',
                ),
              ),
              'inactive2term' => array(
                'field_status_tr' => array('fldname'=>'inactive'),
              ),
              'text2email' => array(
                'field_email' => array('fldname'=>'Email'),
              ),
              'reference' => array(
                'field_consultant_firm_er' => array('fldname'=>'er', 'pseudonym'=>'consultant firm'),
                'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID', 'pseudonym'=>'office'),
              ),
              'address' => array(
                'field_address' => array(
                  'fields' => array(
                    'default' => array(
                      'thoroughfare' => array('fldname'=>array('Address')),
                      'locality' => array('fldname'=>'City'),
                      'postal_code' => array('fldname'=>'ZIP'),
                    ),
                    'phone' => array(
                      'phone_number' => array('fldname'=>'Phone'),
                      'fax_number' => array('fldname'=>'Fax'),
                    ),
                    'lu2state' => array(
                      'administrative_area' => array('fldname'=>'StateID'),
                    ),
                    'lu2country' => array(
                      'country' => array('fldname'=>'CountryID'),
                    ),
                  ),
                ),
              ),       
            ),
          ),
          'tblmanagercontacts' => array(
            'params' => array(
              'bundle'=>'manager_contact',
              'pseudonym' => 'manager job',
              'rowkeyfldname' => 'rowid',            
              'rowidfldname' => 'rowid',            
            ),
            'fields' => array(
              'default' => array(
                'field_job_title' => array('fldname'=>'Title'),
                'field_legendid' => array('fldname'=>'rowid'),
                'field_old_inactive_job' => array('fldname'=>'Inactive'),
              ),
              'date2timestamp2' => array(
                'field_created_on_date' => array('fldname'=>'CreatedOn'),
                'field_updated_on_date' => array('fldname'=>'UpdatedOn'),
              ),
              'wuin' => array(
                'field_wuin' => array('fldname'=>'rowid', 'tbl'=>'tblmanagercontacts'),
              ),
              'employmentdate' => array(
                'field_employment_date' => array(
                  'fldname' => 'start',
                  'date2' => 'end',
                ),
              ),
              'tid2tid' => array(
                'field_job_type_tr' => array('tid'=>1056),
              ),
              'inactive2term' => array(
                'field_status_tr' => array('fldname'=>'inactive'),
              ),
              'text2email' => array(
                'field_email' => array('fldname'=>'Email'),
              ),
              'reference' => array(
                'field_manager_firm_er' => array('fldname'=>'er', 'pseudonym'=>'manager firm'),
              ),
              'address' => array(
                'field_address' => array(
                  'fields' => array(
                    'default' => array(
                      'thoroughfare' => array('fldname'=>array('Address')),
                      'locality' => array('fldname'=>'City'),
                      'postal_code' => array('fldname'=>'ZIP'),
                    ),
                    'phone' => array(
                      'phone_number' => array('fldname'=>'Phone'),
                      'fax_number' => array('fldname'=>'Fax'),
                    ),
                    'lu2state' => array(
                      'administrative_area' => array('fldname'=>'StateID'),
                    ),
                    'lu2country' => array(
                      'country' => array('fldname'=>'CountryID'),
                    ),
                  ),
                ),
              ),
            ),
          ),       
          'tblfundcontacts' => array(
            'params'=> array(
              'bundle' => 'plan_contact',
              'pseudonym' => 'plan job',            
              'rowkeyfldname' => 'rowid',
              'rowidfldname' => 'rowid',            
            ),
            'fields' => array(
              'default' => array(
                'field_job_title' => array('fldname'=>'Title'),
                'field_legendid' => array('fldname'=>'rowid'),
                'field_old_inactive_job' => array('fldname'=>'Inactive'),
              ),
              'date2timestamp2' => array(
                'field_created_on_date' => array('fldname'=>'CreatedOn'),
                'field_updated_on_date' => array('fldname'=>'UpdatedOn'),
              ),
              'wuin' => array(
                'field_wuin' => array('fldname'=>'rowid', 'tbl'=>'tblfundcontacts'),
              ),
              'employmentdate' => array(
                'field_employment_date' => array(
                  'fldname' => 'start',
                  'date2' => 'end',
                ),
              ),
              'inactive2term' => array(
                'field_status_tr' => array('fldname'=>'inactive'),
              ),
              'tid2tid' => array(
                'field_job_type_tr' => array('tid'=>1057),
              ),
              'text2email' => array(
                'field_email' => array('fldname'=>'Email'),
              ),
              'date2timestamp' => array(
                'field_old_contact_creation_date'=>array('fldname'=>'CreatedOn'),
              ),
              'reference' => array(
                'field_plan_er' => array('fldname'=>'er', 'pseudonym'=>'plan'),
              ),       
              'address' => array(
                'field_address' => array(
                  'params' => array(
                    'oldtable' => 'tblManagerFirms',
                    'oldkeyfldname' => 'ManagerFirmID',
                  ),
                  'fields' => array(
                    'default' => array(
                      'thoroughfare' => array('fldname'=>array('Address')),
                      'locality' => array('fldname'=>'City'),
                      'postal_code' => array('fldname'=>'ZIP'),
                    ),
                    'phone' => array(
                      'phone_number' => array('fldname'=>'Phone'),
                      'fax_number' => array('fldname'=>'Fax'),
                    ),
                    'lu2state' => array(
                      'administrative_area' => array('fldname'=>'StateID'),
                    ),
                    'lu2country' => array(
                      'country' => array('fldname'=>'CountryID'),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),     
    ),
  );

// fundcontact Inactive,   
  $nm_cc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblconsultantcontacts',
        'oldkeyfldname' => 'ConsultantContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
    ),
  );

  $nm_mc = array(
    'manager contact' => array(
      'params' => array(
        'oldtable' => 'tblmanagercontacts',
        'oldkeyfldname' => 'ManagerContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
    ),
  );

  $nm_pc = array(
    'fund contact' => array(
      'params' => array(
        'oldtable' => 'tblfundcontacts',
        'oldkeyfldname' => 'FundContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),      
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
    ),
  );

/*
        'lu2newstype' => array(
          'field_news_type' => array('fldname'=>'Type'),
        ), 

*/
  $nm_news = array(
    'news' => array(
      'params' => array(
        'oldtable' => 'tblnews',
        'oldkeyfldname' => 'NewsID',
        'dst'=>'news',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'Title'),
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Body'),      
          ),
          'node-created' => array(
            'created' => array('fldname'=>'Time'),
          ),
        ),
      ),
      'fields' => array(        
        'default' => array(
          'field_legendid' => array('fldname'=>'NewsID'),
        ),
        'wuin' => array(
          'field_wuin' => array('fldname'=>'NewsID', 'tbl'=>'tblnews'),
        ),
        'timestamp2date' => array(
          'field_date' => array('fldname'=>'Time'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Link', 'title'=>'Source'),          
        ),
        'news-bit' => array(
          'field_source_site' => array(
            'fldname' => 'FirmID',
          ),
        ),
      ),         
    ),
  );

//////////////////////////
  $nm_pfix = array(
    'plan' => array(
      'params' => array(
        'step3' => TRUE,
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
        'rowkeyfldname' => 'FundID',
      ),
      'fields' => array(
        'default' => array(
          'field_acronym' => array('fldname'=>'Acronym'),
          'field_plan_acronym' => array('fldname'=>'Acronym'),
          'field_old_lead_contact' => array('fldname'=>'ContactName'),
          'field_legendid' => array('fldname'=>'FundID'),
        ),
        'http2linknotitle' => array(
          'field_website' => array('fldname'=>'Website'),
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink', 'title'=>'Placement Policy'),
        ),
      ),
    ),
  );
  $nm_phfix['plan-history'] = $nm_pfix['plan'];

  $nodeMapArr = FALSE;
  switch($mode) {
    case 'step1a':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_cf,
          $nm_co,
          $nm_mf,
          $nm_news,
        ),
        'limit'=>0,
      );
    break;
    case 'step1b':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_m,
          $nm_p,
        ),
        'limit'=>0,
      );
    break;
    case 'step1c':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_cc,
          $nm_pc,
          $nm_mc,
        ),
        'limit'=>0,
      );
    break;
    case 'contacts':
      $nodeMapArr = array(
        'maps' => array(
          $nm_contact,
        ),
        'limit'=>10000,
      );
    break;
    case 'step2_news':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_news,
        ),
        'limit'=>0,
      );
    break;
    case 'step2_basic':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_cf,
          $nm_co,
          $nm_mf,
        ),
        'limit'=>0,
      );
    break;
    case 'step2_sample':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_p,
          $nm_m,
        ),
        'limit'=>0,
      );
    break;
    case 'step2_plan':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_ph,
        ),
        'limit'=>6500,
      );
    break;
    case 'postfix_plan':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_ppfix,
        ),
        'limit'=>0,
      );
    break;    
    case 'postfix_plan_truncated':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_ppfix_truncated,
        ),
        'limit'=>0,
      );
    break;        
    case 'postfix_mom':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_mfpfix,
        ),
        'limit'=>12000,
      );
    break;
    case 'step2_mandate':
      $nodeMapArr = array(
        'maps'=>array(
          $nm_mh,
        ),
        'limit'=>12000,
      );
    break;
  }
  return $nodeMapArr;

  /*** 05/15/16 deprecate
  if ($mode=="step1") {
    $nodeMapArr = array(
    );      
    $mymap = array(  
      $nm_cf,
      $nm_co,
      $nm_mf,
      $nm_p,
      $nm_m,  
      $nm_cc,
      $nm_mc,
      $nm_pc, 
      $nm_news,
    );
    return $nodeMapArr;
  }
  else if ($mode=="step2") {
    $nodeMapArr = array(
      $nm_ph,
    );
    return $nodeMapArr;
  }
  else if ($mode=="step2a") {
    return $nm_contact;
    //return FALSE;
  }
// END BIG NODE MAP ARRAY
***/
}

/**
 * Implements hook_form_submit().
 */
//function fin_migrate_form_submit($form, &$form_state) {
function fin_migrate_form_submit_import($form, &$form_state) {
}
function fin_migrate_form_submit_import_step1a($form, &$form_state) {
  _fin_migrate_setup_batch('step1a');
}
function fin_migrate_form_submit_import_step1b($form, &$form_state) {
  _fin_migrate_setup_batch('step1b');
}
function fin_migrate_form_submit_import_step1c($form, &$form_state) {
  _fin_migrate_setup_batch('step1c');
}
function fin_migrate_form_submit_import_contacts($form, &$form_state) {
  _fin_migrate_setup_batch('contacts');
}
function fin_migrate_form_submit_import_step2_news($form, &$form_state) {
  _fin_migrate_setup_batch('step2_news');
}
function fin_migrate_form_submit_import_step2_basic($form, &$form_state) {
  _fin_migrate_setup_batch('step2_basic');
}
function fin_migrate_form_submit_import_step2_sample($form, &$form_state) {
  _fin_migrate_setup_batch('step2_sample');
}
function fin_migrate_form_submit_import_step2_plan($form, &$form_state) {
  _fin_migrate_setup_batch('step2_plan');
}
function fin_migrate_form_submit_import_step2_mandate($form, &$form_state) {
  _fin_migrate_setup_batch('step2_mandate');
}

function _fin_migrate_setup_batch($mode) {
  $batch = array(
    'title' => t('Importing data'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  switch ($mode) {
    case 'step1a':
    case 'step1b':
    case 'step1c':
      fin_migrate_do_step1($batch, $mode);
    break;
    case 'contacts':
      fin_migrate_do_step2a($batch, $mode);
    break;
    default:
      fin_migrate_do_step2($batch, $mode);
    break;
  }
  
  //// PLW $state_user = fin_migrate_move_users($batch);
  //$state_node_step_1 = fin_migrate_do_step1($batch);
  //$state_node_step_2 = fin_migrate_do_step2($batch);
  //$state_node_step_2a = fin_migrate_do_step2a($batch);
  batch_set($batch);

}

function fin_migrate_form_submit_mass_save($form, &$form_state) {
  $batch = array(
    'title' => t('Mass Saving 4/29/16'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );

  //// PLW $state_user = fin_migrate_move_users($batch);
  //$state_node_step_1 = fin_migrate_do_step1($batch);
  $state = fin_migrate_feed_saves($batch);
  batch_set($batch);
}

function fin_migrate_feed_saves(&$batch) {
  $sql = "SELECT nid, type from node WHERE type='office' or type='manager' or type='plan' ";
  db_set_active();
  $res = db_query($sql);
  if ($res) {
    $rowCount = 0;
    $start = time();
    foreach ($res as $row) {
      $nid = $row->nid;
      $type = $row->type;
      $batch['operations'][] = array('fin_migrate_do_batch_save',
        array(
          $nid,
          $type,
          $start,
        ),
      );
      $rowCount++;
if ($rowCount>2500) {
  return;
}
    }
  }
}

function fin_migrate_do_batch_save($nid, $type, $start, &$context) {
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);  
  $addarr = $wrapper->field_address;
  if (!empty($addarr)) {
    $addr = implode(" ",$addarr);  
    $point = geocoder('google',$addr);
    $geoJSON = $point->out('json');

    // List all available handlers
    $handlers = geocoder_handler_info(); 
    
    $message = "HANDLERS: ".print_r($handlers,true);
    watchdog('DEBUG_WHO',$message,array(),WATCHDOG_INFO);

    $lat = $point['coords'][1];
    $lng = $point['coords'][0];
    $node->field_location['und'][0]['lat'] = $lat;
    $node->field_location['und'][0]['lng'] = $lat;    
    
    $message = "NID: ".$nid." |LAT: ".$lat." LNG: ".$lng;
    watchdog('DEBUG WHERE', $message, array(), WATCHDOG_INFO);
    //$wrapper->field_location
    //$wrapper->save();
    node_save($node);
    //entity_save('node', $entity);
    $now = time();
    $elapsed = $now-$start;
    $context['message'] = "[T+".$elapsed."] Saving Node ".$nid;
  }
}

/***
  HOW TO USE
    Migration is carried out in multiple stages, each requiring changes in the code above.

  BACKGROUND:
  The Migration is composed of 'movements', with names. I did this for flexibility. Each 'movement has its own configuration array and is represented by a variable.  We have the following movements:
  'consultant firm' | $nm_cf
  'office' | $nm_co
  'manager firm' | $nm_mf
  'consultant contact' | $nm_cc (Step1)
  'manager contact | $nm_mc (step1)
  'plan contact' | $nm_pc (step1)
  'plan' | $nm_p (active)
  'mandate' | $nm_m (active)
  'plan-history' | $nm_ph
  'mandate-history' | $nm_mh
  'contact' | $nm_cc (step2 only)

  We process these in 3 steps:
  Step1 - create blank nodes
  Step2 - populate and connect nodes w/er fields
  Step2a - Contacts

  Step1
   2 or 3 parts.  Process $nm_cf, $nm_co, $nm_mf, $nm_cc, $nm_mc, $nm_pc. Then, $nm_p, $nm_m, $nm_news.  Batch API has limits on how many nodes to move, this split represents about 30k-40k chunks

   Step2a
    Process Contacts.  Odd duck of the bunch. It's specific to contacts so there's no variables involved here. Just run it, it creates a big combined array of all 3 contact tables into paragaphs assigned to a node for each person.  There are multiples of people in the old database, they become 1 contact node/person, with a paragraph for each row, or 'job' since they represent a job histgory.

  Step2
    Process $nm_cc, $nm_co, $nm_mf "basics"
    Process $nm_news, then $nm_p, $nm_m "actives" About 300 nodes
    Process $nm_ph, $nm_mh, "inactives", about 36,000 nodes.

    Going through Step1 & Step2 involves adding variables to arrays above. I have a bunch in an array $mymap for convenient copy and pasting.

    In addition, you can unrem lines in the function directly above.
  
    Some steps involve too many nodes, so I added code above function process_batch<step2 to limit the number.  Just run again and again until each movement is complete.

  TIME
    The whole process takes 50-60 hours.
    Preliminaries
      Get a website cloned from dev, w/dev database
      Get your own copy from the repo, use phpmyadmin only to get data
      Turn off cron (admin/config/cron)
      Turn off auto emails (admin/config/people/user settings)
      Activate custom migration modules, including queue manager

      Step1 taks about 7 hours total.  You can backup your own data between steps. About 90k nodes
      Step2a takes about 8-10 hours, do About 32k nodes, do 12k each
      Step2 Basics, News and Actgives takes about 3-4 hours
      Step2 Plan history & mandate history takes about 30 hours
***/

/**
 * Put all node in to delete queue and process with batch.
 */
function _fin_migrate_delete_all_bundle($entity_type, $bundle_type) {
  $batch = array();
  $einfo = entity_get_info($entity_type);
  $keycolumn = $einfo['entity keys']['id'];
  $entityQuery = new EntityFieldQuery();
  $entities= $entityQuery->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle_type)
    ->execute();
  $count = 0;
  $nids = array();
  $nidss = array();

  if (isset($entities[$entity_type])) {
    $eids= array_keys($entities[$entity_type]);
    foreach ($eids as $eid) {
      $count++;
      $nids[] = $eid;
      if ($count > 99) {
        $count = 0;
        $nidss[] = $nids;
        $nids = array();
      }
    }
  }

  if (!empty($nids)) {
    $nidss[] = $nids;
  }

  if (!empty($nidss)) {
    foreach ($nidss as $nids) {
      $batch['operations'][] = array(
        'entity_delete_multiple',
        array($entity_type, $nids),
      );
    }
  }
  if (!empty($batch['operations'])) {
    batch_set($batch);
  }
}

function _fin_migrate_delete_content() {
  _fin_migrate_delete_all_bundle('node',‘office’);
  //_fin_migrate_delete_all_bundle('node',‘consultant_firm’);
}

/*
  TESTING SQLS

  select a.MandateID, a.MajorStyle, a.MinorStyle, b.field_major_minor_style_tr.field_major_minor_style_tr_tid as tida, b.field_major_minor_style2_tr.field_major_minor_style_tr_tid as tidb
  from tblmajorminormap a, field_data_field_major_minor_style_tr b, field_major_minor_style2_tr c 
  fin_migrate d
  WHERE a.MandateID=d.srcid and d.pseudonym="mandate" and b.entity_id=d.nid and c.entity_id=d.nid
*/
//function fin_migrate_form2_submit($form, &$form_state) {
function fin_migrate_form_submit_dopple1($form, &$form_state) {
  _fin_migrate_split_dopples();
}  
function _fin_migrate_split_dopples() {
  $dopples = _fin_migrate_get_dopples();
  $messages = array();
  foreach ($dopples as $id => $data) {
    $name = $data['name'];
    $mid = $data['mid'];
    $tmpname = str_replace(" ", " ".$mid." ", $name);
    $sql = "UPDATE {tblfundcontacts} SET ContactName='%tmpname' WHERE ContactName='%name' AND FundID=".$id;
    $sql = str_replace("%tmpname", $tmpname, $sql);
    $sql = str_replace("%name", $name, $sql);
    db_set_active('legacy');
    $res = db_query($sql);
    db_set_active();
    $messages[] = $sql;
  }
  $message = implode("<br><br>",$messages);
  watchdog('FIN_MIGRATE_SHARED_NAMES', $message, array(), WATCHDOG_INFO);
}

function fin_migrate_form_submit_import_mm($form, &$form_state) {
  $batch = array(
    'title' => t('Importing new Major/Minors'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );

  $state = _fin_migrate_feed_batch_mm($batch);
  batch_set($batch);
}

/*
 SRCID: 24661 NID 357408 Real Estate->Mortgage Backed to
  Active Equity -> Mortgage backed
*/
function _fin_migrate_feed_batch_mm(&$batch) {
//zzzzzz
  $sql = "SELECT srcid FROM fin_migrate WHERE step2=2 and pseudonym='mandate'";
  db_set_active();
  $res = db_query($sql);
  $done = array();
  if ($res) {
    foreach ($res as $row) {
      $done[] = $row->srcid;
    }
  }
  $doneStr = '';
  $where = '';
  if (!empty($done)) {
    //$where = "WHERE MandateID NOT IN (".implode(", ", $done).")";
    //$where = "WHERE MandateID NOT IN (".implode(", ", $done).") AND MinorStyle=0";
    $where = "WHERE MandateID NOT IN (".implode(", ", $done).")";  
  }
  $sql = "SELECT MandateID as id, MajorStyle, MinorStyle from {tblmajorminormap} ".$where." ORDER BY MandateID DESC";
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();
  if ($res) {
    $rowCount = 0;
    $start = time();
    foreach ($res as $row) {
      $mid = $row->id;
      $major = trim($row->MajorStyle);
      $minor = trim($row->MinorStyle);
      $nid = _fin_migrate_gotIdGetnid($mid, 'mandate');
      $batch['operations'][] = array('_fin_migrate_do_batch_mmm',
        array(
          $mid,
          $major,
          $minor,
          $nid,
          $start,
        ),
      );
      $rowCount++;
if ($rowCount>1500) {
  return;
}
    }
  }
}
/*
  SELECT m.srcid as MdnateID, m.nid as Nid, omag.MajorStyle as NewMajor, o.MinorStyle as NewMinor, maj.field_old_major_style as oldMajor, min.field_old_minor_style as oldMinor 
  FROM fin_migrate m, tblmajorminormap o, field_data_field_old_major_style omaj, field_data_field_old_minor_style omin
  WHERE n.field_old_mionor_style<>o.MajorStyle
*/
function _fin_migrate_do_batch_mmm($mid, $major, $minor, $nid, $start, &$context) {
  
  $vid = 'major_minor_styles';
  if (!empty($nid)) {
    $minortid = NULL;
    if (empty($minor)) {
      $minor = 'None';
    }
    $term = taxonomy_get_term_by_name($major,$vid);
    $keys = array_keys($term);
    //Find which one is level 0
    $count = count($keys);
    if ($count>1) {
      foreach ($term as $tid=>$trm) {
        $parent = taxonomy_get_parents($tid);
        if (empty($parent)) {
          $majortid = $tid;
        }
      }
    } else {
      $majortid = $keys[0];
    }
    if (!empty($minor) && !empty($majortid)) {
      $sql = "SELECT d.name, d.tid from taxonomy_term_data d, taxonomy_term_hierarchy h where h.tid=d.tid and h.parent=".$majortid;
      db_set_active();
      $res = db_query($sql);
      if ($res) {
        $children = array();
        foreach ($res as $row) {
          $name = trim($row->name);
          $children[$name] = $row->tid;
        }
        if (!empty($children)) {
          //$minortid = $children[$minor];
          foreach ($children as $name => $tid) {
            $tgtname = utf8_decode($minor);
            $childname = utf8_decode($name);
            if ($tgtname==$childname) {
              $minortid = $tid;
            }
          }
          $message = "MINORTID NOW: ".$minortid."<br>Children[".$minor."] MINOR: ".$minor."<br><br>";
          if (isset($children[$minor])) {
            $minortid = $children[$minor];
          }
          $message = "PTID: ".$majortid."|MINOR:".$minor."/".$minortid."|Children: <br><br>SQL: ".$sql."<br><br>".print_r($children,true);
          watchdog('DEBUG2', $message, array(), WATCHDOG_INFO);
        }
      }
      if (empty($majortid)) {
        $message = "MID: ".$mid." |NID: ".$nid." |Major: ".$major."[".$majortid."] |Minor: ".$minor."[".$minortid."]";
        watchdog('MAJOR/MINOR MISMATCH', $message, array(), WATCHDOG_ERROR);
      }
      if (empty($minortid) ) {
        $message = "MID: ".$mid." |NID: ".$nid." |Major: ".$major."[".$majortid."] |Minor: ".$minor."[".$minortid."]";
        watchdog('MINOR MISS', $message, array(), WATCHDOG_ERROR);
      }

      //$children = taxonomy_get_children_all($majortid);
      //$minortid = NULL;
      /*
      foreach ($children as $tid => $child) {
        if ($child->name==$minor) {
          $minortid = $tid;
        }
      }
      */
      //$term = taxonomy_get_term_by_name($minor,$vid);
      //$minortid = $term->tid;
    }
    $message = $mid."|".$nid."|".$major."/".$majortid."|".$minor."/".$minortid;
    watchdog('DEBUG_MM',$message,array(),WATCHDOG_INFO);
    $node = node_load($nid);
    if (!$node) {
      //$nid=0;
    }
    if ( !empty($nid) && !empty($majortid) && !empty($minortid) ) {
      $wrapper = entity_metadata_wrapper('node', $node);
      
      // 052016 by bills request
      //$wrapper->field_major_minor_style_tr = array($majortid,$minortid);
      $wrapper->field_major_minor_style_tr = array($minortid);
      $wrapper->save();
      _fin_migrate_postdate($node);

      $oldMajor = $wrapper->field_old_major_style->label();
      $oldMinor = $wrapper->field_old_minor_style->label();
      db_set_active();
      $sql = "UPDATE fin_mig2 set step2=2, newmajor='".$major."', newminor='".$minor."', oldmajor='".$oldMajor."', oldminor='".$oldMinor."' WHERE nid=".$nid." and pseudonym='mandate'";
      $res = db_query($sql);
      $now = time();
      $elapsed = $now-$start;
      $context['message'] = "[T+".$elapsed."] Updated NID: ".$nid." |Major: ".$majortid." |Minor: ".$minortid;
    } else {
      $message = "ID: ".$mid." |Nid: ".$nid." |Major: ".$major."(".$majortid.") |Minor: ".$minor."(".$minortid.")";
      watchdog('FIN_MIGRATE_POST_MM_WARN',$message,array(),WATCHDOG_ERROR);
    }
    $sql = "UPDATE fin_mig2 set step2=2, newmajor='".$major."', newminor='".$minor."', oldmajor='".$oldMajor."', oldminor='".$oldMinor."' WHERE nid=".$nid." and pseudonym='mandate'";
  }
}

/*
 * Report of Contacts who appear multiple times
 */
function fin_migrate_make_multiples_resport() {
  $arr = array();
  $tbl = 'tblconsultantcontacts';
  $id = 'ConsultantContactID';
  _fin_migrate_make_multiples_report_make_table($tbl, $id, $arr);

  $tbl = 'tblfundcontacts';
  $id = 'FundContactID';
  _fin_migrate_make_multiples_report_make_table($tbl, $id, $arr);
  
  $contactNames = array();
  foreach ($arr as $contactName => $ignore) {
    $contactNames[$contactName] = $contactName;
  }
  $outarr = array();
  foreach ($contactNames as $contactName) {
    $set = $arr[$contactName];
    if (count($set)>1) {
      krsort($set);
      foreach ($set as $start => $data) {
        $outarr[] = $data;
      }
    }
  }
  $outStr = '';
  $cols = array_keys($outarr[0]);
  $outStr = '"'.implode('", "', $cols).'"';
  $outStr .= "\r\n";
  foreach($outarr as $line) {
   $outStr .= '"'.implode('","', $line).'"';
   $outStr .= "\r\n";
  }
  $message = $outStr;
  watchdog('FIN_MIGRATE_REPORT_CSV', $message, array(), WATCHDOG_INFO);
}

function _fin_migrate_make_multiples_report_make_table($tbl, $id, &$out) {
  switch($tbl) {
    case 'tblconsultantcontacts':
      $pseudo = "consultant firm";
      $type="CONSULTANT";
      $sql = "SELECT a.ContactName as ContactName, a.%id as id, a.Inactive as Inactive, a.Title as Title, a.CreatedOn as CreatedOn, a.UpdatedOn as UpdatedOn, a.ConsultantFirmID as er, b.ConsultantFirmName as Name from {%tbl} a, {tblconsultantfirms} b WHERE a.ConsultantFirmID=b.ConsultantFirmID";
    break;
    case 'tblfundcontacts':
      $pseudo = "plan";
      $type="FUND";
      $sql = "SELECT a.ContactName as ContactName, a.%id as id, a.Inactive as Inactive, a.Title as Title, a.CreatedOn as CreatedOn, a.UpdatedOn as UpdatedOn, a.FundID as er, b.FundName as Name from {%tbl} a, {tblfunds} b WHERE a.FundID=b.FundID";
    break;
  }
  $sql = str_replace('%id', $id, $sql);
  $sql = str_replace('%tbl', $tbl, $sql);

  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();
  if ($res) {
    foreach ($res as $row) {
      $ernid = _fin_migrate_gotIdGetNid($row->er, $pseudo);

      $contactName = $row->ContactName;
      $inactive = $row->Inactive;
      $name = $row->Name;
      $title = $row->Title;
      $er = $row->er;
      $start = strtotime($row->CreatedOn);
      $rowid = $row->id;
      $out[$contactName][$start] = array(
        'id' => $rowid,
        'ContactName' => $contactName,
        'Type' => $type,
        'Title' => $title,        
        'Emp ID' => $row->er,
        'Emp NID' => $ernid,
        'Emp Name' => $name,
        'Inactive' => $inactive,        
        'CreatedOn' => $row->CreatedOn,
        'UpdatedOn' => $row->UpdatedOn,
      );
    }
  }
}

/*
 * Doplle-ganger Handling
 */
function fin_migrate_form_submit_dopple2($form, &$form_state) {
  _fin_migrate_clean_dopples();
}  

function _fin_migrate_clean_dopples() {
  $dopples = _fin_migrate_get_dopples();
  foreach ($dopples as $id => $data) {
    $name = $data['name'];
    $mid = $data['mid'];
    $tmpname = str_replace(" ", " ".$mid." ", $name);
    $name = $tmpname;
    $name = str_replace($mid." ", "", $name);
    $sql = "UPDATE {node} SET title='%name' WHERE type='contact' AND title='%tmpname'";
    $sql = str_replace("%tmpname", $tmpname, $sql);
    $sql = str_replace("%name", $name, $sql);
    db_set_active();
    $res = db_query($sql);
    
    $sql = "UPDATE {field_data_title_field} SET title_field_value='%name' WHERE bundle='contact' and title_field_value='%tmpname'";
    $sql = str_replace("%tmpname", $tmpname, $sql);
    $sql = str_replace("%name", $name, $sql);
    db_set_active();
    $res = db_query($sql);
 
    $sql = "UPDATE {field_revision_title_field} SET title_field_value='%name' WHERE bundle='contact' and title_field_value='%tmpname'";
    $sql = str_replace("%tmpname", $tmpname, $sql);
    $sql = str_replace("%name", $name, $sql);
    db_set_active();
    $res = db_query($sql);
 
    $sql = "UPDATE {fin_migrate_node} SET ContactName='%name' WHERE ContactName='%tmpname'";
    $sql = str_replace("%tmpname", $tmpname, $sql);
    $sql = str_replace("%name", $name, $sql);
    db_set_active();
  }
}
/*
  QA Data. 
  tblfundcontacts has: 26917
  Fund Contacts as of 4/20: 24901
  Diff due to repeated names: 2016
  The array below has 136 names, so contact total should be
  upon completion: 25047

"8176","David yyy Alexander"
"1654","David yyy Hanson"
"534","David yyy Phillips"
"9446","David yyy Smith"
"8514","James yyy Brown"
"1142","Jeff yyy Smith"
"5433","Jim yyy Allison"
"12976","John yyy Wilson"
"8243","Joseph yyy Baker"
"2399","Linda yyy Brown"
"5400","Michael yyy Williams"
"1393","Robert yyy Jackson"
"586","Scott yyy Anderson"
"13791","Scott yyy McCarty"
"7480","Steven yyy Smith"
MISSING
zzz 3518=>array("name"=>"David Fischer","mid"=>"yyy"),
zzz 3518=>array("name"=>"David Fisher","mid"=>"yyy"),

ERRORS
MODIFY 8176=>array("name"=>"David Alexander", "mid"=>"yyy"), (should be 8011)
ADDED 2515=>array("name"=>"David Green","mid"=>"yyy"),    
ADDED 10321=>array("name"=>"Mark Brown","mid"=>"yyy"),
REMOVE     5682=>array("name"=>"John Nelson","mid"=>"xxx"),
    586=>array("name"=>"John Nelson","mid"=>"yyy"),
  *** not located in data, possibly removed.
*/
function _fin_migrate_get_dopples() {
  $dopples = array(
    10832=>array("name"=>"Brian Chen","mid"=>"xxx"),
    1059=>array("name"=>"Brian Gibson","mid"=>"xxx"),
    4070=>array("name"=>"Craig Lewis","mid"=>"xxx"),
    13686=>array("name"=>"Craig White","mid"=>"xxx"),
    11177=>array("name"=>"Daniel Lee","mid"=>"xxx"),
    6840=>array("name"=>"David Alexander","mid"=>"xxx"),
    8176=>array("name"=>"David Alexander", "mid"=>"yyy"),
    7693=>array("name"=>"David Benson","mid"=>"xxx"),
    1554=>array("name"=>"David Boyd","mid"=>"xxx"),
    12244=>array("name"=>"David Cooper","mid"=>"xxx"),
    9508=>array("name"=>"David Fischer","mid"=>"xxx"),
    13518=>array("name"=>"David Fisher","mid"=>"yyy"),
    2071=>array("name"=>"David Gilmore","mid"=>"xxx"),
    1514=>array("name"=>"David Gilmore ","mid"=>"xxx"),
    4927=>array("name"=>"David Gold","mid"=>"xxx"),
    9013=>array("name"=>"David Green","mid"=>"xxx"),
    2515=>array("name"=>"David Green","mid"=>"yyy"),    
    493=>array("name"=>"David Hanson","mid"=>"xxx"),
    1654=>array("name"=>"David Hanson","mid"=>"yyy"),
    10894=>array("name"=>"David Holmes","mid"=>"xxx"),
    12308=>array("name"=>"David Hughes","mid"=>"xxx"),
    1678=>array("name"=>"David Lee","mid"=>"xxx"),
    544=>array("name"=>"David Long","mid"=>"xxx"),
    11212=>array("name"=>"David Lynch","mid"=>"xxx"),
    5122=>array("name"=>"David Malkin","mid"=>"xxx"),
    9960=>array("name"=>"David Martin","mid"=>"xxx"),
    9781=>array("name"=>"David Miller","mid"=>"xxx"),
    1523=>array("name"=>"David Nelson","mid"=>"xxx"),
    12482=>array("name"=>"David Nelson","mid"=>"yyy"),
    9047=>array("name"=>"David Norton","mid"=>"xxx"),
    5955=>array("name"=>"David Phillips","mid"=>"xxx"),
    534=>array("name"=>"David Phillips","mid"=>"yyy"),
    9446=>array("name"=>"David Smith","mid"=>"yyy"),
    912=>array("name"=>"David Smith","mid"=>"zzz"),
    1827=>array("name"=>"David Smith","mid"=>"aaa"),
    1763=>array("name"=>"David Smith","mid"=>"bbb"),
    10834=>array("name"=>"David Smith","mid"=>"xxx"),
    5852=>array("name"=>"David Sullivan","mid"=>"xxx"),
    10938=>array("name"=>"David Thompson","mid"=>"xxx"),
    11153=>array("name"=>"David Walker","mid"=>"xxx"),
    1940=>array("name"=>"David Wright","mid"=>"xxx"),
    8173=>array("name"=>"Greg Miller","mid"=>"xxx"),
    10825=>array("name"=>"Gregory Long","mid"=>"xxx"),
    5927=>array("name"=>"James Brown","mid"=>"xxx"),
    8514=>array("name"=>"James Brown","mid"=>"yyy"),
    6376=>array("name"=>"James Mitchell","mid"=>"xxx"),
    6433=>array("name"=>"James Ryan","mid"=>"xxx"),
    5169=>array("name"=>"James Smith","mid"=>"xxx"),
    6221=>array("name"=>"Janet Watson","mid"=>"xxx"),
    5323=>array("name"=>"Jeff Smith","mid"=>"xxx"),
    1142=>array("name"=>"Jeff Smith","mid"=>"yyy"),
    12237=>array("name"=>"Jeff Smith","mid"=>"zzz"),
    373=>array("name"=>"Jeffrey Davis","mid"=>"xxx"),
    8534=>array("name"=>"Jerry Moore","mid"=>"xxx"),
    2487=>array("name"=>"Jim Allison","mid"=>"xxx"),
    5433=>array("name"=>"Jim Allison","mid"=>"yyy"),
    7611=>array("name"=>"Jim Nolan","mid"=>"xxx"),
    1200=>array("name"=>"Jim Taylor","mid"=>"xxx"),
    12629=>array("name"=>"Jim Williams ","mid"=>"xxx"),
    3942=>array("name"=>"John Barker","mid"=>"xxx"),
    2726=>array("name"=>"John Carter","mid"=>"xxx"),
    7629=>array("name"=>"John Cole","mid"=>"xxx"),
    255=>array("name"=>"John Cole","mid"=>"xxx"),
    2234=>array("name"=>"John Grant","mid"=>"xxx"),
    2534=>array("name"=>"John Green","mid"=>"xxx"),
    9411=>array("name"=>"John Moore","mid"=>"xxx"),
    9410=>array("name"=>"John Moore","mid"=>"xxx"),
    13468=>array("name"=>"John Murphy","mid"=>"xxx"),
    2046=>array("name"=>"John Roberts","mid"=>"xxx"),
    3900=>array("name"=>"John Waters","mid"=>"xxx"),
    6559=>array("name"=>"John Wilson","mid"=>"xxx"),
    12976=>array("name"=>"John Wilson","mid"=>"yyy"),
    7228=>array("name"=>"Joseph Baker","mid"=>"xxx"),
    8243=>array("name"=>"Joseph Baker","mid"=>"yyy"),
    825=>array("name"=>"Joseph Smith","mid"=>"xxx"),
    8876=>array("name"=>"Judy Hall","mid"=>"xxx"),
    212=>array("name"=>"June Kim","mid"=>"xxx"),
    9740=>array("name"=>"Kevin Smith","mid"=>"xxx"),
    9784=>array("name"=>"Kevin Taylor","mid"=>"xxx"),
    9320=>array("name"=>"Kevin Watson","mid"=>"xxx"),
    2462=>array("name"=>"Linda Brown","mid"=>"xxx"),
    2399=>array("name"=>"Linda Brown","mid"=>"yyy"),
    10872=>array("name"=>"Mark Brown","mid"=>"xxx"),
    10321=>array("name"=>"Mark Brown","mid"=>"yyy"),
    8978=>array("name"=>"Mark Davis","mid"=>"xxx"),
    7809=>array("name"=>"Mark Warren","mid"=>"xxx"),
    9671=>array("name"=>"Matthew Poland","mid"=>"xxx"),
    5019=>array("name"=>"Michael Fleming","mid"=>"xxx"),
    9015=>array("name"=>"Michael J. Sullivan","mid"=>"xxx"),
    7659=>array("name"=>"Michael Johnson","mid"=>"xxx"),
    9693=>array("name"=>"Michael Lamb","mid"=>"xxx"),
    12246=>array("name"=>"Michael Moore","mid"=>"xxx"),
    9152=>array("name"=>"Michael Smith","mid"=>"xxx"),
    9457=>array("name"=>"Michael Williams","mid"=>"xxx"),
    5400=>array("name"=>"Michael Williams","mid"=>"yyy"),
    7702=>array("name"=>"Mike Adams","mid"=>"xxx"),
    12349=>array("name"=>"Mike Kane","mid"=>"xxx"),
    4448=>array("name"=>"Mike May","mid"=>"xxx"),
    8446=>array("name"=>"Mike Monahan","mid"=>"xxx"),
    2173=>array("name"=>"Mike Nichols","mid"=>"xxx"),
    13084=>array("name"=>"Mike White","mid"=>"xxx"),
    12572=>array("name"=>"Patricia Walker","mid"=>"xxx"),
    11107=>array("name"=>"Patrick Thomas","mid"=>"xxx"),
    11161=>array("name"=>"Peter Martin","mid"=>"xxx"),
    1948=>array("name"=>"Randy Smith","mid"=>"xxx"),
    3697=>array("name"=>"Richard Ingram","mid"=>"xxx"),
    7463=>array("name"=>"Richard Marshall","mid"=>"xxx"),
    623=>array("name"=>"Richard White","mid"=>"xxx"),
    930=>array("name"=>"Robert Jackson","mid"=>"xxx"),
    1393=>array("name"=>"Robert Jackson","mid"=>"yyy"),
    6034=>array("name"=>"Robert Kovacs","mid"=>"xxx"),
    13437=>array("name"=>"Robert Miller","mid"=>"xxx"),
    1094=>array("name"=>"Robert Moore","mid"=>"xxx"),
    3280=>array("name"=>"Robert Munger","mid"=>"xxx"),
    259=>array("name"=>"Robert Shaw","mid"=>"xxx"),
    8635=>array("name"=>"Robert Sweeney","mid"=>"xxx"),
    2660=>array("name"=>"Robert Wallace","mid"=>"xxx"),
    6114=>array("name"=>"Robert Watson","mid"=>"xxx"),
    767=>array("name"=>"Robert Williams","mid"=>"xxx"),
    694=>array("name"=>"Robert Wilson","mid"=>"xxx"),
    12077=>array("name"=>"Sam Johnson","mid"=>"xxx"),
    12148=>array("name"=>"Scott Anderson","mid"=>"xxx"),
    586=>array("name"=>"Scott Anderson","mid"=>"yyy"),
    8202=>array("name"=>"Scott Johnson","mid"=>"xxx"),
    12901=>array("name"=>"Scott McCarty","mid"=>"xxx"),
    13791=>array("name"=>"Scott McCarty","mid"=>"yyy"),
    430=>array("name"=>"Scott Miller","mid"=>"xxx"),
    295=>array("name"=>"Scott Simon","mid"=>"xxx"),
    7001=>array("name"=>"Scott Wright","mid"=>"xx"),
    3953=>array("name"=>"Steve Wilson","mid"=>"xxx"),
    8896=>array("name"=>"Steven Schneider","mid"=>"xxx"),
    12935=>array("name"=>"Steven Smith","mid"=>"xxx"),
    7480=>array("name"=>"Steven Smith","mid"=>"yyy"),
    11090=>array("name"=>"Susan Carter","mid"=>"xxx"),
    11755=>array("name"=>"Susan Smith","mid"=>"xxx"),
    1060=>array("name"=>"Tom Mitchell","mid"=>"xxx"),
    13165=>array("name"=>"Tom Watson","mid"=>"xxx"),
  );
  return $dopples;
}

//////////////////////////////
function fin_migrate_form_submit_postfix_plan_strip_michigan($form, &$form_state) {
  
  $id = 846;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
//499184
  _fin_migrate_do_plan_strip($nids);
}
function fin_migrate_form_submit_postfix_plan_strip_florida($form, &$form_state) {
  
  $id = 390;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
//499425
  _fin_migrate_do_plan_strip($nids);
}
function fin_migrate_form_submit_postfix_plan_strip_texas($form, &$form_state) {
  
  $id = 541;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
//499640
  _fin_migrate_do_plan_strip($nids);
}
function fin_migrate_form_submit_postfix_plan_strip_calpers($form, &$form_state) {
  
  $id = 255;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  _fin_migrate_do_plan_strip($nids);
}
///////////////////////////////
function fin_migrate_form_submit_postfix_plan_strip_calteach($form, &$form_state) {
  
  $id = 258;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  _fin_migrate_do_plan_strip($nids);
}
function fin_migrate_form_submit_postfix_plan_strip_newyork($form, &$form_state) {
  
  $id = 300;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  _fin_migrate_do_plan_strip($nids);
}
function fin_migrate_form_submit_postfix_plan_strip_ut($form, &$form_state) {
  
  $id = 724;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  _fin_migrate_do_plan_strip($nids);
}

///////////////////////////////
function _fin_migrate_do_plan_strip($nids) {  
  $bundle="field_manager_roster_fc";
  $entity_type = "field_collection_item";
  foreach ($nids as $nid) {
    _fin_migrate_strip_collections($nid, $bundle, $entity_type);
  }
}

/////////////////
function fin_migrate_form_submit_postfix_plan_michigan($form, &$form_state) {

  $id = 846;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  //499184
  
  _fin_migrate_do_plan_fixes($id, $nids);
}
function fin_migrate_form_submit_postfix_florida($form, &$form_state) {

  $id = 390;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  //499425
  
  _fin_migrate_do_plan_fixes($id, $nids);
}
function fin_migrate_form_submit_postfix_texas($form, &$form_state) {

  $id = 541;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  //499640
  
  _fin_migrate_do_plan_fixes($id, $nids);
}
function fin_migrate_form_submit_postfix_calpers($form, &$form_state) {

  $id = 255;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  
  _fin_migrate_do_plan_fixes($id, $nids);
}
//////////////////////////////////
function fin_migrate_form_submit_postfix_calteach($form, &$form_state) {

  $id = 258;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  
  _fin_migrate_do_plan_fixes($id, $nids);
}
function fin_migrate_form_submit_postfix_newyork($form, &$form_state) {

  $id = 300;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  
  _fin_migrate_do_plan_fixes($id, $nids);
}

function fin_migrate_form_submit_postfix_ut($form, &$form_state) {
  $id = 724;
  $nid = _fin_migrate_gotIdgetNid($id, 'plan');
  $nids = array($nid);
  
  _fin_migrate_do_plan_fixes($id, $nids);
}
//////////////////////////////////
function _fin_migrate_do_plan_fixes($id, $nids) {  
  $batch = array(
    'title' => t('Fix Broken Plans'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_manager_roster($batch, $id, $nids);
  batch_set($batch);
}

function fin_migrate_do_manager_roster(&$batch, $id, $nids) {
  $termMap = _fin_migrate_prep_terms();
  
  $sql = "SELECT * FROM tblfundmanagers WHERE ManagerFirmID>0 AND ManagerFirmID NOT IN(5291, 6317, 6370, 7748, 3270, 6651, 6606, 7313, 4862, 9348, 5199, 8774, 9674, 5269, 5219, 9335, 9451) AND FundID=".$id;
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();

  $nid = $nids[0];
  foreach ($res as $row) {
    $rowid = $row->FundManagerID;
    $oldid = $row->ManagerFirmID;
    $geo = $row->GeographicID;
    $major = $row->MajorStyleID;
    $minor = $row->MinorStyleID;
    $amount = intval($row->Amount);

    $pseudo = "manager firm";
    $mgrnid = _fin_migrate_gotIdgetNid($oldid, $pseudo);        
    $fldName = 'GeographicID';
    $geotid = _gotIdgetTid($geo, $fldName, $termMap);

    $out = fin_saved_search_migration_mmm_id($major, $minor);
    $mmtid = intval($out);
    $batch['operations'][] = array('_fin_migrate_process_batch_manager_roster',
      array(
        $rowid,
        $nid,
        $mgrnid,
        $geotid,
        $mmtid,
        $amount,
      ),
    );
  }
//xyzxyzxyz
}

function _fin_migrate_process_batch_manager_roster($rowid, $nid, $mgrnid, $geotid, $mmtid, $amount, &$context) {

  $hostFldName = 'field_manager_roster_fc';
  try {
    $entity = node_load($nid);
    $newCollection = entity_create('field_collection_item', array('field_name' => $hostFldName));
    $newCollection->setHostEntity('node', $entity);
    $fc_wrapper = entity_metadata_wrapper('field_collection_item', $newCollection);
    
    $fc_wrapper->field_manager_firm_er = $mgrnid;
    $fc_wrapper->field_geographic_tr = $geotid;
    if (!empty($amount)) {
      $fc_wrapper->field_amount = $amount;
    }
    if ($fc_wrapper->field_major_minor_style_tr->validate($mmtid)) {            
      $fc_wrapper->field_major_minor_style_tr = $mmtid;  
    }
    else {
      $message = "MINORTID-".$tid;
      watchdog('INVALID_TAXONOMY', $message, array(), WATCHDOG_ERROR);
    }
    
    $fc_wrapper->save();
    $entity_id = $fc_wrapper->getIdentifier();
    $contactname = ''; 
    _fin_migrate_add_to_oldnew_collection_table($pseudonym, $rowid, $nid, $contactname, $hostFldName, $entity_id);
  }
  catch (Exception $e) {
    $message = 'FC - ID: '.$rowid.' NID: '.$nid.'ENTITY ID: '.$entity_id.' PSEUDONYM: '.$pseudonym.' HOSTFLD: '.$hostFldName.'<br><br>Row: '.print_r($rw,true).'<br /><br />ERROR: '.$e->getMessage();
    watchdog('FIN_MIGRATE_SAVE_POSTFIX_MGR_ROSTER_ITEM_FAILED', $message, array(), WATCHDOG_CRITICAL);
  }
}

function _gotIdgetTid($id, $fldName, $termMap) {
  $tid = 0;
  $term = $termMap[$fldName]['oldterms'][$id];
  if (isset($termMap[$fldName]['newterms'][$term])) {
    $tid = $termMap[$fldName]['newterms'][$term];
  }              
  return $tid;
}

function _fin_migrate_do_plan_fix_xxx($nids) {  
  $batch = array(
    'title' => t('Fix Broken Plans'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  
  // enter nodemap here
  //$nm_mgr_roster_fix
 
 /* 
  $bundle="field_manager_roster_fc";
  $entity_type = "field_collection_item";
  foreach ($nids as $nid) {
    _fin_migrate_strip_collections($nid, $bundle, $entity_type);
  }
  */

  $mode = "postfix_plan";
  $state_node_step_2 = fin_migrate_do_step2x($batch, $nids, $mode);
  batch_set($batch);
}

function fin_migrate_form_submit_postfix_truncated($form, &$form_state) {

  $nids = array();
  $ids = array(846, 390, 541);
  //$ids = array(846, 390, 541, 255);
  foreach ($ids as $id) {
    $nids[] = _fin_migrate_gotIdgetNid($id, 'plan');
  }  
  _fin_migrate_do_plan_fix_truncated($nids);
}
function _fin_migrate_do_plan_fix_truncated($nids) {  
  $batch = array(
    'title' => t('Fix Broken Plans'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  
  $mode = "postfix_plan_truncated";
  $state_node_step_2 = fin_migrate_do_step2x($batch, $nids, $mode);
  batch_set($batch);
}

function _fin_migrate_strip_collections($nid, $bundle, $entity_type) {

  $tbl = "field_data_".$bundle;
  $fld = $bundle ."_value";
  $sql = "SELECT %ids FROM {%tbl} WHERE entity_id in(%nids)";
  $sql = str_replace("%ids", $fld, $sql);
  $sql = str_replace("%tbl", $tbl, $sql);
  $sql = str_replace("%nids", $nid, $sql);

  $res = db_query($sql);
  if ($res) {
    $eids = array();
    foreach ($res as $row) {
      $eids[] = $row->$fld;
    }
  }
  $done = entity_delete_multiple($entity_type, $eids);
  $sql = "DELETE FROM {%tbl} WHERE entity_id in(%nids)";
  $sql = str_replace("%tbl", $tbl, $sql);
  $sql = str_replace("%nids", $nid, $sql);
  $res = db_query($sql);
/*  
  $entityQuery = new EntityFieldQuery();
  $entities= $entityQuery->entityCondition('entity_type', $entity_type)
      ->entityCondition('bundle', $bundle_type)
      ->entityCondition('entity_id', $nids, "IN")
      ->execute();
  if (isset($entities[$entity_type])) {
    $eids= array_keys($entities[$entity_type]);
    entity_delete_multiple($entity_type, $eids);
  }   
*/
}

//////////////////////////////////
function fin_migrate_form_submit_postfix_moms($form, &$form_state) {
  // MoM requires that all manager firms already be imported
  $sql = "SELECT nid from {fin_migrate_node} WHERE pseudonym='manager firm' AND srcid IN(6171, 5060, 7749, 7325, 28, 6195, 3439, 6188)";
  $res = db_query($sql);
  $nids = array();
  foreach ($res as $row) {
    $nids[] = $row->nid;
  }
  _fin_migrate_do_mom_fix($nids);
}

function _fin_migrate_do_mom_fix($nids) {  
  $batch = array(
    'title' => t('Fix Broken Plans'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $mode = "postfix_mom";
  $state_node_step_2 = fin_migrate_do_step2x($batch, $nids, $mode);
  batch_set($batch);
}

/* SECTION Step2x
 * //////////////////// STEP2 /////////////////////
 */
// SOMPLIFY.  W/Nodes & pseudo, get srcid, sql = "SELECT * from {$table} WHERE %id in (%srcids)"
function fin_migrate_do_step2x(&$batch, $nids=array(), $mode='step2') {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit','1024M');
  
  //$nodeMapArr = fin_migrate_get_nodemaps('step2');
  $arrs = fin_migrate_get_nodemaps($mode);
  $nodeMapArr = $arrs['maps'];
  $termMap = _fin_migrate_prep_terms();

  // END TERM MAP ARRAY

  $movement = 0;
  $howManyMovements = count($nodeMapArr);
  foreach ($nodeMapArr as $mapArr) {
    foreach ($mapArr as $pseudonym => $map) {
      $movement++;
      $context['message'] = "Step (2/2) Movement (".$movement."/".$howManyMovements.") Moving ".$pseudonym;

      $params = $map['params'];
      $dst = $params['dst'];

      $nidStr = '';
      if (!empty($nids)) {
        $nidStr = implode(",",$nids);
      }
      $table = $params['oldtable'];        
      $pKeyName = $params['oldkeyfldname'];            
      $pseudo = $pseudonym;
  
      $sql = "SELECT srcid from {fin_migrate_node} WHERE nid in(%nids)";
      $sql = str_replace("%nids", $nidStr, $sql); 
      $res = db_query($sql);
      if (!empty($res)) {
        $srcArr = array();
        foreach ($res as $row) {
          $srcArr[] = $row->srcid;
        }
        $keys = implode(",",$srcArr);

        if (!empty($keys)) {
          $sql = "select * from {".$table."} WHERE %keyname IN(%keys)";
          $sql = str_replace("%keyname", $pKeyName, $sql);
          $sql = str_replace("%keys", $keys, $sql);
          db_set_active('legacy');
          $result = db_query($sql);
          db_set_active();

          $howManyRows = $result->rowCount();
          $rowCount=0;
          $start = time();
          foreach ($result as $row) {
            $batch['operations'][] = array('_fin_migrate_process_batch_step2',
              array(
                $pseudonym,
                $dst,
                $table,
                $row,
                $map,
                $termMap,
                $start,
                $pKeyName
              ),
            );
            $rowCount++;
          }
        }
      }
    }
  }
}

/*
  Version of Step Function to process content created on
  new site only
*/
function fin_migrate_do_step3x(&$batch, $data=array(), $mode='step2') {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit','1024M');
  
  //$nodeMapArr = fin_migrate_get_nodemaps('step2');
  $arrs = fin_migrate_get_nodemaps($mode);
  $nodeMapArr = $arrs['maps'];
  $termMap = _fin_migrate_prep_terms();

  // END TERM MAP ARRAY

  $movement = 0;
  $howManyMovements = count($nodeMapArr);
  foreach ($nodeMapArr as $mapArr) {
    foreach ($mapArr as $pseudonym => $map) {
      $movement++;
      $context['message'] = "Step (2/2) Movement (".$movement."/".$howManyMovements.") Moving ".$pseudonym;

      $params = $map['params'];
      $dst = $params['dst'];
      if (!empty($data)) {
        $howManyRows = $data->rowCount();
        $rowCount=0;
        $start = time();
        foreach ($result as $row) {
          $batch['operations'][] = array('_fin_migrate_process_batch_step2',
            array(
              $pseudonym,
              $dst,
              $table,
              $row,
              $map,
              $termMap,
              $start,
              $pKeyName
            ),
          );
          $rowCount++;
        }
      }
    }
  }
}

function fin_migrate_form_submit_postfix_news($form, &$form_state) {
  $batch = array(
    'title' => t('Postdate News'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state = fin_migrate_feed_predate_news($batch);
  batch_set($batch);
}

function fin_migrate_feed_predate_news($batch) {
  $sql = "SELECT nid from {fin_migrate_node} WHERE pseudonym='news' ORDER BY srcid LIMIT 1000";
  $res = db_query($sql);
  $nids = array();
  foreach ($res as $row) {
    $nids[] = $row->nid;
  }
  $howManyRows = count($nids);
  $start = time();
  foreach ($nids as $nid) {
    $batch['operations'][] = array('_fin_migrate_process_batch_predate',
        array(
          $nid,
          $start,
        ),
    );
  }
}

function _fin_migrate_process_batch_predate($nid, $start, &$context) {
  $node = node_load($nid);  
  _fin_migrate_postdate($node);
  $context['message'] = "Updated Node ".$nid;
}

function fin_migrate_form_submit_sqls($form, &$form_state) {
  $sql = "UPDATE comment set subject='' WHERE name='fin editor'";
  set_db_active();
  db_query($sql);
}

/*
 * Function to answer button press to show mismatches between
 * incoming image files and what the data is expecting.
 */
function fin_migrate_form_submit_check_images($form, &$form_state) {
  
  $arrs = _fin_migrate_image_file_report();
  $mismatches = $arrs['raw'];
  $mismatches_formatted = $arrs['formatted'];
  $mismatches_formatted_by_contact = $arrs['formattedcontacts'];
  $mismatches_raw_by_contact = $arrs['rawcontacts'];
  $message = "WITH SPACES: ".print_r($mismatches_raw_by_contact,true)."<br /><br />FORMATTED: ".print_r($mismatches_formatted_by_contact,true);
  watchdog('IMAGE_REPORT', $message, array(), WATCHDOG_INFO);
}

function fin_migrate_form_submit_postfix_images($form, &$form_state) {
  
  $arrs = _fin_migrate_image_file_report();
  $incoming = $arrs['allformatted'];

  $sql = "SELECT b.filename as filename, a.entity_id as nid FROM field_data_field_photo a, files_managed b where a.field_photo_fid = b.fid AND bundle='contact'";
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();
  $present = array();
  foreach ($res as $row) {
    $present[$row->filename] = $row->nid;
  }
  $compareIn = array_values($incoming);
  $comparePresent = array_keys($present);
  $todos = array_diff($compareIn, $comparePresent);
  $nids = array();
  foreach ($todos as $fn) {
    $nid = $present[$fn];
    $nids[] = $nid;
  }
}

function _fin_migrate_image_file_report() {
  // First, get the files from the migration folder
  $dir = 'migration/files';
  $files = scandir($dir);
  $files_formatted = array();
  foreach ($files as $file) {
    $file = str_replace(" ", "_", $file);
    $file = strtolower($file);
    $files_formatted[] = $file;
  }

  $arrs = array();
  $arrs = _fin_migrate_prep_employment_dates();
  $names = $arrs['names'];
  $jobs = $arrs['jobs'];

  $photos = array();
  $photos_formatted = array();
  $photos_formatted_contact = array();
  $photos_raw_contact = array();
  $photos_formatted_input_by_contact = array(); 
  foreach ($jobs as $contactName => $row) {
    $photo = '';
    $scoop = $row;
    ksort($scoop);
    foreach ($scoop as $start => $more) {
      foreach($more as $tbl => $andmore) {
        foreach ($andmore as $rowid => $data) {
          $photo = strtolower(trim($data['Picture']));
          $pieces = explode("/", $photo);
          $last = count($pieces)-1;
          if ($last>0) {
            $photo = $pieces[$last];
          }
        }
      }
    }
    if (!empty($photo)) {
      $photos[] = $photo;
      $photo_formatted = str_replace(" ", "_", $photo);
      $photos_formatted[] = $photo_formatted;
      $photos_formatted_contact[$photo_formatted] = $contactName;
      $photos_raw_contact[$photo] = $contactName;
    }
  }
  $arrs = array();
  $set1 = array_diff($photos, $files);
  $arrs['raw'] = $set1;
  $set2 = array_diff($photos_formatted, $files_formatted);
  $arrs['formatted'] = $set2;
  $photos_formatted_by_contact = array();
  $photos_raw_by_contact = array();  
  foreach ($set1 as $fn) {
    $contactName = $photos_raw_contact[$fn];
    $photos_raw_by_contact[$contactName] = $fn;
  }
  foreach ($set2 as $fn) {
    $contactName = $photos_formatted_contact[$fn];
    $photos_formatted_by_contact[$contactName] = $fn;
  }
  $arrs['formattedcontacts'] = $photos_formatted_by_contact;
  $arrs['rawcontacts'] = $photos_raw_by_contact;

  foreach ($photos_formatted as $fn) {
    $contactName = $photos_raw_contact[$fn];
    $photos_formatted_input_by_contact[$contactName] = $fn;
  }
  $arrs['allformatted'] = $photos_formatted_input_by_contact;
  return $arrs;
}

function fin_migrate_form_submit_postfix_imr($form, &$form_state) { 
   $batch = array(
    'title' => t('Add Databases Used to IMR Sections'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_imr($batch);
  batch_set($batch);
}

function fin_migrate_do_imr(&$batch) {
 
  $termMap = _fin_migrate_prep_terms();

  $sql = "SELECT ConsultantFirmID as cfid, DatabasesUsedID as dbused FROM tblinvestmentmanagerresearch WHERE DatabasesUsedID<>'' AND DatabasesUsedID<>'0' ";
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();

  $builds = array();
  Foreach ($res as $rw) {
    $dbs = $rw->dbused;
    $cfid = $rw->cfid;
    $cfnid = _fin_migrate_gotIdGetNid($cfid,'consultant firm');
    $dbids = _fin_migrate_gotIdsGetTids($dbs, 'DatabasesUsedID', $termMap);
    $builds[$cfnid] = $dbids;
  } 
  foreach ($builds as $cfnid => $dbids) {
    if (count($dbids)>0) {
      $batch['operations'][] = array('_fin_migrate_process_batch_imr',
        array(
          $cfnid,
          $dbids,
        ),
      );
    } else {
      $message = "TASK CFNID: ".$cfnid." SKIPPED DBIDS: ".print_r($dbids,true);
      watchdog('FIN_MIGRATE_TASK_SKIP', $message, array(), WATCHDOG_INFO);
    }
  }
}

function _fin_migrate_process_batch_imr($cfnid, $dbids, &$context) {
    $sql2 = "SELECT field_invest_mgr_research_value as eid FROM field_data_field_invest_mgr_research WHERE entity_id=%eid";
    $sql2 = str_replace("%eid", $cfnid, $sql2);
    $res2 = db_query($sql2);
    $eids = array();
    $numRows = $res2->rowCount();
    $cnt = 1;
    $eids_updated = array();

    foreach ($res2 as $rw2) {

      $eid = $rw2->eid;
      $entities = entity_load('field_collection_item', array($eid));
      //$entity = field_collection_item_load_multiple(array($eid));
      $entity = $entities[$eid];
      $wrapper = entity_metadata_wrapper('field_collection_item', $entity);      
      $wrapper->field_databases_used_tr = $dbids;
      $wrapper->save();
      $eids_updated[$cfnid][$eid] = $dbids;
      $context['message'] = '['.$cnt.'/'.$numRows.'] Updated';    
      $cnt++;
    }
    $message = "UPDATED ".print_r($eids_updated,true);
    watchdog('FIN_MIGRATE_FIX_DATABASES', $message, array(), WATCHDOG_INFO);
  }

  function _fin_migrate_gotIdsGetTids($val, $fldName, $termMap) {
    $fallback = array();
    $vals = explode(',', $val);
      if (empty($vals)) {
      $vals = array($val);
    }
    if (!empty($vals)) {
      $tids = array();
      foreach ($vals as $val) {
        if (!empty($val)) {
          if (isset($termMap[$fldName]['oldterms'][$val])) {
            $term = $termMap[$fldName]['oldterms'][$val];
            if (isset($termMap[$fldName]['newterms'][$term])  ) {
                $tids[] = $termMap[$fldName]['newterms'][$term];
            }  else {
              $message = "TERM ".$term." FAILED TO MATCH";
              watchdog('FIN_MIGRATE_TIDS_TERM_FAILURE', $message, array(), WATCHDOG_INFO);
            }
          }
        }
      }
    } 
    return $tids;
  }

function fin_migrate_form_submit_postfix_momamt($form, &$form_state) { 
   $batch = array(
    'title' => t('Add Amounts to MoM'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_momamt($batch);
  batch_set($batch);
}

function fin_migrate_do_momamt(&$batch) {
// srcid=2 firm=5060 Northern Trust Global Advisors | 1842214
  $sql = "SELECT MomManagerID as srcid, Amount from tblmommanagers";
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();

  $srcids = array();
  foreach ($res as $row) {
    $amount = $row->Amount;
    $srcids[$row->srcid] = $amount;
  }
  $keys = implode(", ", array_keys($srcids));
  $sql2 = "SELECT field_id, srcid from fin_migrate_collection WHERE pseudonym='mom' AND srcid in(%keys)";
  $sql2 = str_replace('%keys', $keys, $sql2);
  $res2 = db_query($sql2);
  $tasks = array();
  foreach ($res2 as $row2) {
    $srcid = $row2->srcid;
    $eid = $row2->field_id;
    $amount = $srcids[$srcid];
    $tasks[$eid] = $amount;
  }
  foreach ($tasks as $eid => $amount) {
    if (!empty($amount)) {
      $batch['operations'][] = array('_fin_migrate_process_batch_momamt',
        array(
          $eid,
          $amount,
        ),
      );
    }
  }
}

function _fin_migrate_process_batch_momamt($eid, $amount, &$context) {
  $entities = entity_load('field_collection_item', array($eid));
  //$entity = field_collection_item_load_multiple(array($eid));
  $entity = $entities[$eid];
  $wrapper = entity_metadata_wrapper('field_collection_item', $entity);

  if (!empty($amount)) {
    $wrapper->field_amount = intval($amount);
    $wrapper->save();
  }
}

function fin_migrate_form_submit_postfix_cf($form, &$form_state) { 
   $batch = array(
    'title' => t('Create Phantom Offices'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_cf($batch);
  batch_set($batch);
}

function fin_migrate_do_cf(&$batch) {
  $sql = "SELECT * FROM tblconsultantfirms WHERE ConsultantFirmID NOT IN (SELECT DISTINCT ConsultantFirmID FROM tblconsultantoffices) ";
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();

  $builds = array();
  Foreach ($res as $rw) {
    $cfid = $rw->ConsultantFirmID;
    $cfnid = _fin_migrate_gotIdGetNid($cfid,'consultant firm');
    $builds[$cfnid] = $rw;
  } 
  $tasks = array();
  foreach ($builds as $cfnid => $data) {
    $batch['operations'][] = array('_fin_migrate_process_batch_cf',
      array(
        $cfnid,
        $data,
      ),
    );
  }
}

function _fin_migrate_process_batch_cf($cfnid, $data, &$context) {
  global $DEFAULT_OWNER_UID;
  $DEFAULT_OWNER_UID = 109;
  $MAIN_OFFICE_TID = 337;

  $termMap = _fin_migrate_prep_terms();

  $addrMap = array(
    'fields' => array(
      'default' => array(
        'thoroughfare' => array('fldname'=>array('Address1')),
        'premise' => array('fldname'=>array('Address2', 'Address3')),
        'locality' => array('fldname'=>'City'),
        'postal_code' => array('fldname'=>'ZIP'),
      ),
      'phone' => array(
        'phone_number' => array('fldname'=>'Phone'),
        'fax_number' => array('fldname'=>'Fax'),
      ),
      'lu2state' => array(
        'administrative_area' => array('fldname'=>'StateID'),
      ),
      'lu2country' => array(
        'country' => array('fldname'=>'CountryID'),
      ),
    ),
  );

//debugBreak();

  $city = $data->City;
  $title = $city;
  $dst = "office";
  $timestamp = time()-(32*24*3600);
  $values = array(
    'title' => $title,
    'type' => $dst,
    'uid' => $DEFAULT_OWNER_UID,
    'status' => 1,
    'promote' => 0,
    'created' => $timestamp,
    'changed' => $timestamp,
  );
  $entity = entity_create('node', $values);
  $n_wrapper = entity_metadata_wrapper('node', $entity);
  $n_wrapper->save();
  $nid = (int) $n_wrapper->getidentifier();

  $n_wrapper->field_consultant_firm_er = $cfnid;
  $n_wrapper->field_address = _fin_migrate_handler_address('field_address', $addrMap, $data, $n_wrapper, $termMap);
  $n_wrapper->field_office_type_tr = $MAIN_OFFICE_TID;
  $n_wrapper->title_field = $city;
  $n_wrapper->save();
  $tasks[$nid] = $data;
}

function fin_migrate_form_submit_postfix_mandate_titles($form, &$form_state) { 
   $batch = array(
    'title' => t('Fix Mandate Titles'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_mandate_titles($batch);
  batch_set($batch);
}

function fin_migrate_do_mandate_titles(&$batch) {
  global $DEFAULT_OWNER_UID;
  $DEFAULT_OWNER_UID = 109;
  $MAIN_OFFICE_TID = 337;

  
  $sql = "SELECT nid FROM node WHERE type='mandate' ";
  $res = db_query($sql);

  $builds = array();
  Foreach ($res as $rw) {
    $nid = $rw->nid;
    $builds[] = $nid;
  } 
  foreach ($builds as $nid) {
    $batch['operations'][] = array('_fin_migrate_process_batch_mandate_titles',
      array(
        $nid,
      ),
    );
  }
}

function _fin_migrate_process_batch_mandate_titles($nid, &$context) {
  $title = "Mandate-[plan_name]-[serial_field]";
  $node = node_load($nid);
  $node->title = $title;
  $node->title_field['und'][0]['value'] = $title; 
  node_save($node);
}

////////////////////////////////////
function fin_migrate_form_submit_postfix_mandate_comments($form, &$form_state) { 
   $batch = array(
    'title' => t('Fix Mandate Comments'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_mandate_comments($batch);
  batch_set($batch);
}

/*
 Copy Copy  Delete Delete   447016  590930  Plan made private equity
  Edit Edit   Copy Copy   Delete Delete   447015  590929  (No subject)
  Edit Edit   Copy Copy   Delete Delete   447014  590929  (No subject)
  Edit Edit   Copy Copy   Delete Delete   447013  590929  (No subject)
  Edit Edit   Copy Copy   Delete Delete   447012  590929  Plan is scheduled to hear the
  Edit Edit   Copy

  srcid=29133

14893 no subjects, 
*/
function fin_migrate_do_mandate_comments(&$batch) {
  // grab mandate comments
  $sql = "SELECT MandateID, Comments FROM tblmandatecomments ORDER    BY MandateID, Cid";
  db_set_active('legacy');
  $res = db_query($sql);
  db_set_active();
  $comments = array();
  foreach ($res as $row) {
    $srcid = $row->MandateID;
    $comment = $row->Comments;
    $comments[$srcid][] = $comment;
  }
  // build table of srcids
  $sql = "SELECT nid, srcid from fin_migrate_node WHERE pseudonym='mandate'";

  db_set_active();
  $res = db_query($sql);
  $srcids = array();
  foreach ($res as $row) {
    $nid = $row->nid;
    $srcid = $row->srcid;
    $srcids[$nid] = $srcid;
  }

  //$sql = "SELECT nid, cid, subject FROM comment WHERE thread NOT LIKE '01%%'";
  $sql = "SELECT nid, cid, subject, thread FROM comment WHERE nid<>'0' AND thread NOT LIKE '01%'";
 


  db_set_active();
  $res = db_query($sql);

  $builds = array();
  Foreach ($res as $row) {
    $nid = $row->nid;
    $cid = $row->cid;
    $builds[$nid][$cid] = '';
  }
  foreach ($builds as $nid => $more) {
    $srcid = $srcids[$nid];
    $set = $comments[$srcid];
    $x=0;
    foreach ($more as $cid => $ignore) {
      $comment = $set[$x];
      $x++;

//debugBreak();//

      $batch['operations'][] = array('_fin_migrate_process_batch_mandate_comments',
        array(
          $nid,
          $cid,
          $comment,
        ),
      );
    }
  }
}

function _fin_migrate_process_batch_mandate_comments($nid, $cid, $comment, &$context) {
  $entities = entity_load('comment', array($cid));
  $entity = $entities[$cid];
  $entity->comment_body['und'][0]['value'] = $comment;
  entity_save('comment', $entity);
  //$c_wrapper = entity_metadata_wrapper('comment', $entity);
  //$c_wrapper->comment_body = $comment;
  //$c_wrapper->save();
}

/////////////////////////////////////////
function fin_migrate_form_submit_import_contacts_bios($form, &$form_state) { 
   $batch = array(
    'title' => t('Move Contact Bios 2'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_contacts_bios($batch);
  batch_set($batch);
}

function fin_migrate_do_contacts_bios(&$batch) {

  $sqlx = "UPDATE field_data_field_bio SET field_bio_format='advanced_input' ";
  $res = db_query($sqlx);

  $sql = "SELECT entity_id from field_data_body WHERE bundle='contact'AND body_value<>''AND entity_id IN(SELECT entity_id FROM field_data_field_bio WHERE field_bio_value is null)";
  $res = db_query($sql);
  foreach ($res as $row) {
    $nid = $row->entity_id;
    $batch['operations'][] = array('fin_migrate_process_batch_contacts_bios',
      array(
        $nid,
      ),
    );
  }
}
          
function fin_migrate_process_batch_contacts_bios($nid, &$context) {
  
  $sql = "SELECT body_value FROM field_data_body WHERE entity_id=%nid";
  $sql = str_replace("%nid", $nid, $sql);
  $bio = db_query($sql)->fetchField();  

  $nodes = entity_load('node', array($nid));
  $node = $nodes[$nid];
  $node->field_bio['und'][0]['value']=$bio;
  //$node->field_bio['und'][0]['format'] = 'advanced_input'; 
  entity_save('node', $node);
}

function fin_migrate_form_submit_fix_longtext($form, &$form_state) { 
   $batch = array(
    'title' => t('Set Longtext to advqanced_input html'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_fix_longtext($batch);
  batch_set($batch);
}

function fin_migrate_do_fix_longtext(&$batch) {
  $sqlx = "UPDATE field_data_body SET body_format='advanced_input' WHERE (bundle='news' OR bundle='plan' OR bundle='consultant_firm' OR bundle='office') AND body_format<>'advanced_input' ";
  $res = db_query($sqlx);
  
  $sql = "SELECT entity_id FROM field_data_body WHERE (bundle='news' OR bundle='plan' OR bundle='consultant_firm' OR bundle='office') AND body_format='advanced_input' ";
  $res = db_query($sql);
  $build = array();
  foreach ($res as $row) {
    $nid = $row->entity_id;
    $build['body'][] = $nid;
  }
  foreach ($build as $fldname => $nids) {
    foreach ($nids as $nid) {
      $batch['operations'][] = array('fin_migrate_process_batch_fix_longtext',
        array(
          $nid,
        ),
      );
    }
  }
}
          
function fin_migrate_process_batch_fix_longtext($nid, &$context) {
  
  $nodes = entity_load('node', array($nid));
  $node = $nodes[$nid];
  //$node->body['und'][0]['format'] = 'advanced_input'; 
  entity_save('node', $node);

  $nodes = entity_load('node', array($nid));
  $node = $nodes[$nid];
  //$node->body['und'][0]['format'] = 'advanced_input'; 
  entity_save('node', $node);

}

/////////////////////////////
function fin_migrate_form_submit_fix_longtext_fc($form, &$form_state) { 
   $batch = array(
    'title' => t('Set FC Longtext to advqanced_input html'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_fix_longtext_fc($batch);
  batch_set($batch);
}

function fin_migrate_do_fix_longtext_fc(&$batch) {
  $sqlx = "UPDATE field_data_field_note SET field_note_format='advanced_input'";
  $res = db_query($sqlx);  
  $sqlx = "UPDATE field_data_field_comment SET field_note_format='advanced_input'";
  $res = db_query($sqlx);
  $sqlx = "UPDATE field_data_field_note SET field_note_format='advanced_input'";

  $sql1 = "SELECT entity_id from field_data_field_note";
  $sql2 = "SELECT entity_id from field_data_field_comment";
  $res1 = db_query($sql1);
  $res2 = db_query($sql2);
  $build = array();
  foreach ($res1 as $row) {
    $eid = $row->entity_id;
    $build['field_note'][] = $eid;
  }
  foreach ($res2 as $row) {
    $eid = $row->entity_id;
    $build['field_comment'][] = $eid;
  }
  foreach ($build as $fldname => $eids) {
    foreach ($eids as $eid) {
      $batch['operations'][] = array('fin_migrate_process_batch_fix_longtext_fc',
        array(
          $eid,
          $fldname,
        ),
      );
    }
  }
}
          
function fin_migrate_process_batch_fix_longtext_fc($eid, $fldname, &$context) {

  $entities = entity_load('field_collection_item', array($eid));
  $entity = $entities[$eid];
  //$entity->$fldname['und'][0]['format'] = 'advanced_input'; 
  entity_save('field_collection_item', $entity);
  $entities = entity_load('field_collection_item', array($eid));
  $entity = $entities[$eid];
  //$entity->$fldname['und'][0]['format'] = 'advanced_input'; 
  entity_save('field_collection_item', $entity);
}

/////////////////////////////
function fin_migrate_form_submit_fix_longtext_save($form, &$form_state) { 
   $batch = array(
    'title' => t('Resave Field Bio'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_fix_longtext_save($batch);
  batch_set($batch);
}

function fin_migrate_do_fix_longtext_save(&$batch) {
  $sqlx = "UPDATE field_data_field_bio SET field_bio_format='advanced_input' ";
  $res = db_query($sqlx);

  $sql = "SELECT entity_id from field_data_body WHERE bundle='contact'AND body_value<>''";
  $res = db_query($sql);
  foreach ($res as $row) {
    $nid = $row->entity_id;
    $batch['operations'][] = array('fin_migrate_process_batch_fix_longtext_save',
      array(
        $nid,
      ),
    );
  }
}
          
function fin_migrate_process_batch_fix_longtext_save($nid, &$context) {
  $nodes = entity_load('node', array($nid));
  $node = $nodes[$nid];
  $node->field_bio['und'][0]['value']=$bio;
  entity_save('node', $node);
}

////////////////////////////////////////////
function fin_migrate_form_submit_fix_ext($form, &$form_state) { 
   $batch = array(
    'title' => t('Fix Broken Extensions'),
    'operations' => array(),
    'finished' => '_fin_migrate_done',
  );
  $state_node_step_2 = fin_migrate_do_fix_ext($batch);
  batch_set($batch);
}

function fin_migrate_do_fix_ext(&$batch) {
  $sql = "SELECT entity_id, field_address_data FROM field_data_field_address WHERE field_address_data LIKE '%t.%'";
  $res = db_query($sql);  

  foreach ($res as $row) {
    $eid = $row->entity_id;
    $data = $row->field_address_data;
    $batch['operations'][] = array('fin_migrate_process_batch_fix_ext',
        array(
        $eid,
        $data,
      ),
    );
   }
}
          
function fin_migrate_process_batch_fix_ext($eid, $data, &$context) {
  $arr = unserialize($data);  //$arr = json_decode($data);
  if (isset($arr['phone_number_extension'])) {
    $ext = $arr['phone_number_extension'];
    $ext2 = str_replace("t. ", "", $ext);

    if (!empty($ext2)) {
      $arr['phone_number_extension'] = $ext2;
      //$data2 = serialize($arr) . "}";
      //$data2 = json_encode($arr);
      $data2 = serialize($arr).'}';

      $sql = "UPDATE field_data_field_address set field_address_data='%data' WHERE entity_id=".$eid;
      $sql = str_replace('%data', $data2, $sql);
      $res = db_query($sql);
      $context['message'] = "FIXED FOR ID: ".$endity_id;
    
    $message = "DATA2: ".$data2;
    WATCHDOG('DEBUG_000', $message, array(), WATCHDOG_INFO);
    } else {
      $context['message'] = "UH OH ERROR";
    }
  } else {   
    $context = 'Skipped';
  }
}

