<?php
// $Id$

define('LANGUAGE_DEFAULT', 'en');

/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */
/**
 * Implementation of hook_menu().
 */
function fin_migrate_menu() {
  $items = array();

  $items['admin/content/custom-import'] = array(
    'title' => 'FIN D5-to-D7 import',
    'description' => 'Migrate data from D5 production to new D7 - Users, Search data, links between them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fin_migrate_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function fin_migrate_form() {
  drupal_set_message('Are you sure you want to run the custom import script?  No going back without re-installing the database!!!', 'warning');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

function fin_migrate_form_submit($form, &$form_state) {
  ini_set('max_execution_time', 3600000);

  $batch = array(
    'title' => t('Importing data'),
    'operations' => _fin_migrate_operations(),
    'finished' => '_fin_migrate_done',
  );
  batch_set($batch);
}  

function _fin_migrate_operations() {
  $operations = array();
  $operations[] = array('_fin_migrate_batch_users', array());
  $operations[] = array('_fin_migrate_batch_users_stragglers', array());
  $operations[] = array('_fin_migrate_batch_nodes', array());
  //Now that we filled out all nodes, we can migrate relationships too
  //$operations[] = array('_fin_migrate_batch_ref', array());
  //Now that we migrated relationships, we have new ones to make on dst side
  //$operations[] = array('_fin_migrate_batch_back_ref', array());

  return $operations;
}
function _fin_migrate_done() {
  die("BATCHES DONE for now");
}

function _fin_migrate_batch_nodesxxx() {
   define('UID_DEFAULT', 1);
  //ini_set('max_execution_time', 3600);

  $oldnew = array();
  $phase = _fin_migrate_users($oldnew);
  if ($phase == "node") {
    $phase = _fin_migrate_nodes($oldnew, $nodeMapArr);
  }
die("NODES DONE STOP NOW");
  _fin_migrate_refs($oldnew, $nodeMapArr);

  if ($success) {
    $message = t('Import finished successfully.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

//function _fin_migrate_users(&$oldnew) {
function _fin_migrate_batch_users(&$context) {
  //define('BATCH_SIZE', 1500);
  define('BATCH_SIZE', 10000000);
  $lastuid = @variable_get('lastuid');

  $lastcount = @variable_get('lastcount');
  if (!$lastuid) {
    $lastuid=8;
    $message = "Starting a new User Migration batch. Batch size = ".BATCH_SIZE;
  } 
  else {
    $message = "Resuming User Migration batch. Last time we moved ".$lastcount." Users ended with User #".$lastuid."(old UID). Batch size = ".BATCH_SIZE;
  }
  watchdog('FIN_MIGRATE USER',$message,array(),WATCHDOG_INFO);

  $context['message'] = $message;

  $start = microtime();
  $message = "Starting at >>".$start."< Batch Size>>".BATCH_SIZE."< <br>";
  //echo $message ."<br />";
  watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);
 
  db_set_active('legacy');
  $sql = "select u.uid as uid, u.name as name, u.pass as pass, u.mail as mail, u.status as status, u.created as created, u.login as login, a.expiry_date as expiry_date from {users} u, {account_expiry} a where u.uid=a.uid and u.uid>".$lastuid." order by uid";
  $result = db_query($sql)->fetchAll();
  db_set_active();

  $message = "FULL USER PULL SQL-- ".$sql;
  watchdog('FIN_MIGRATE_USER_INIT',$message,array(),WATCHDOG_INFO);  

  if ($result) {
    _fin_migrate_do_migrate_users($result, $context);
  }
}

function _fin_migrate_batch_users_stragglers(&$context) {
  // get all old user names
/*
  db_set_active('legacy');
  $osql = "select mail from {users}";
  $oldusers = db_query($sql)->fetchAll();
  db_set_active();
  $nsql = "select mail from {user}";
  $newusers = db_query($nsql)->fetchAllAssoc();
*/
  db_set_active('legacy');
  $osql = "select mail from {users} where uid>4";
  $res = db_query($osql);
  db_set_active();
  $oldusers = array();
  foreach ($res as $usr) {
    $omail = $usr->mail;
    $oldusers[] = $omail;
  }    
  // now get new user names
  db_set_active();
  $usrs = entity_load('user');
  //$usrs = user_load_multiple();
  $newusers = array();
  foreach($usrs as $uid => $usr) {
    $nmail = $usr->mail;
    $newusers[] = $nmail;
  } 
  $stragglers = array();
  $stragglers = array_diff($oldusers, $newusers);
  if ($stragglers) {
    $stragglerStr = "'".implode("','", $stragglers)."'";
    db_set_active('legacy');
    $sql = "select u.uid as uid, u.name as name, u.pass as pass, u.mail as mail, u.status as status, u.created as created, u.login as login, a.expiry_date as expiry_date from {users} u left join {account_expiry} a on u.uid=a.uid where u.mail in (".$stragglerStr.") order by uid";
    $result = db_query($sql)->fetchAll();
    db_set_active();
    $message = "At the end of the line, going into Straggler mode - UID list(".$stragglerStr.")";
    watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);
    
    $context['message'] = "Rounding up ".count($result)." missing Users";

    if ($result) {
      _fin_migrate_do_migrate_users($result, $context);
    }
  } else {
    $context['message'] = "All Users successfully transferred, move on.";
  }
}
  
function _fin_migrate_do_migrate_users($inUsers, &$context) {
  ini_set('max_execution_time', 3600000);
  define('USER_RID_TRIAL_MEMBER', '6');
  define('USER_RID_NONE', '2');

  $oldnew = array();
  $newold = array();
  if ( $uidmaps = unserialize(@variable_get('uidmaps')) ) {
    $oldnew = $uidmaps['oldnew'];
    $newold = $uidmaps['newold'];
  }

  $trialNewRoles = array(2,6);
  $newRoles = array(
    '1' => 'anonymous users',
    '2' => 'authenticated user',
    '3' => 'administrator',
    '4' => 'editor',
    '5' => 'author',
    '6' => 'Trial Member',
    '7' => 'Basic Member',
    '8' => 'Family Office',
  );

  $roleMap = array(
    '1' => array(1),
    '2' => array(2,7),
    '3' => array(2,3),
    '4' => array(2,5),
    '5' => array(2,4),
    '6' => array(2,6),
    '7' => array(2,7),
    '8' => array(2,9),
  );

  $compareUsers = '';
  
  /*
   * First, we will prep the old User data. We will translate old roles to new, save 
   * separate first, last names & Company names for insertion into new User objects.
   */

  //db_set_active('south6');
  db_set_active('legacy');
  
  $uids = array();
  $sql = "select uid from {users}";
  $result = db_query($sql);
  foreach ($result as $row) {
    $uids[$row->uid] = $row->uid;
  }

  // First, extract all Trial Members
  $trial_uids = array();
  $sql = "select uid from accounttypes_users where atid=2 or atid=4";
  $result = db_query($sql);
  foreach ($result as $row) {
    $trial_uids[$row->uid] = $row->uid;
  }
  
  // Grab data from profile table, first, last name and company
  // Array is of format UID | FID | Value.  FID is a 1,2,3. 1-First name, 2-Last name, 3-Company
  $profilesArr = array();
      
  $sql = "select * from {profile_values}";
  $raw = db_query($sql);
  foreach ($raw as $row) {
    //normalize (turn 3 rows for each user into 1
    $profilesArr[$row->uid][$row->fid][$row->value]=$row->value; 
  }
  
  $sql = "select u.uid as uid,r.rid as role from {users_roles} u, {role} r where u.rid=r.rid";
  $result = db_query($sql);
  $roleres = array();
  foreach ($result as $row) {
    $roleres[$row->uid][$row->role] = $row->role;
  }
  $noRoles = array();
  $rolesuids = array_keys($roleres);
  $noRoles = array_diff($uids, $rolesuids);
  foreach ($noRoles as $noRole) {
      $roleres[$noRole][USER_RID_NONE] = USER_RID_NONE;
  }

  db_set_active();
  $userres = array();
  
  foreach ($inUsers as $row) {
    $userres[$row->uid] = array(
      'uid'=>$row->uid,
      'name'=>$row->name,
      'mail'=>$row->mail,
      'pass'=>$row->pass,
      'status'=>$row->Status,
      'login'=>$row->login,
      'created'=>$row->created,
    );
  }
  $rolesArr = '';
  foreach ($roleres as $uid => $roles) {
    $uidStr = (string) $uid;
    if (isset($trial_uids[$uidStr])) {
      foreach($trialNewRoles as $newRid) {
        $newRidStr = (string) $newRid;
        $newRole = $newRoles[$newRidStr];
        $rolesArr[$uidStr][$newRidStr] = $newRole;
      }
    } else {
      foreach ($roles as $rid) {
        $newRids = $roleMap[$rid];
        foreach ($newRids as $newRid) {
          $newRidStr = (string) $newRid;
          $ind = (string) $rid;
          $newRole = $newRoles[$ind];
          $rolesArr[$uidStr][$newRidStr] = $newRole;
        }
      }
    }
  }
  
  db_set_active();

  // PLW 081815
  // Forever deprecated.  Default is 15, just do not assign a number
  //$hash_count_log2 = 11;

  require_once 'includes/password.inc';

  $count = 0;
  $total = count($userres);
  foreach ($userres as $uid => $oldUser) {
    $count++;

    $context['message'] = "(".$count."/".count($userres).") Migrating User ".$oldUser['name'];
    $context['progress'] = ($count/$total)*100;

    $duplicate = 0;

    if (empty($oldUser['mail'])) {
      continue;
    }

    //extract bio data first
    $lname = '';
    $fname = '';
    $company = '';
    if (isset($profilesArr[$uidStr])) {
      $lname = $profilesArr[$uidStr][2];
      $fname = $profilesArr[$uidStr][1];
      $company = $profilesArr[$uidStr][3];
    }
    $mail = (string) $oldUser['mail'];
    if (substr($mail,0,1)=="@") {
      $oldmail = $mail;
      $mail = 'corrected'.$fname.'.'.$lname.$mail;
      $message = "BAD EMAIL FORMAT >".$oldmail."< CORRECTED>>".$mail."< User data>>".print_r($user,true);
      watchdog('FIN_MIGRATE',$message,array(),WATCHDOG_INFO);
    }

    $check_sql = "select mail, uid from {users} where mail='".$mail."'";
    $check_res = db_query($check_sql);
    foreach ($check_res as $res) {
      if ($res->mail) {
        $message = "DUPLICATE User Email>".print_r($oldUser,true)."< ORIGINAL UID>>".$res->uid;
        watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);
        $duplicate = 1;
      }
    }

    if ($duplicate) {
      continue;
    }

    $loop = $count+1;

    $uidstr = (string) $uid;
    $oldPass = (string) $oldUser['pass'];
    $newPass = 'qapla';
    if (isset($rolesArr[$uidstr])) {
      $userRoles = $rolesArr[$uidstr];
      $fields = array(
        'name' => (string) $oldUser['name'],
        'mail' => (string) $oldUser['mail'],
        'pass' => $newPass,
        'status' => $oldUser['status'],
        'init' => $oldUser['mail'],
        'roles' => $userRoles,
        'created' => $oldUser['created'],
        'access' => $oldUser['login'],
      );
    }
    else {
      $message = "This User ".print_r($oldUser,true)." does not have any roles. Something went wrong here";
      watchdog('FIN_MIGRATE',$message,array(),WATCHDOG_WARNING);      
      $fields = array(
        'name' => $oldUser['name'],
        'mail' => $oldUser['mail'],
        'pass' => $newPass,
        'status' => $oldUser['status'],
        'init' => (string) $oldUser['mail'],
        'created' => $oldUser['created'],
        'login' => $oldUser['login'],
      );
    }

    //the first parameter is left blank so a new user is created
    $alreadyThere = 0;

    if (!$alreadyThere) {
      $acct = new stdClass();
      //$acct->is_new = 1;
      $acct->active = 1;

      $account = user_save($acct, $fields);
      $newUid = (int) $account->uid;
      $oldUid = $uid;

        // now try the password
      $newPass = user_hash_password($oldPass);
      if ($newPass) {
        // Indicate an updated password.
        $newPass  = 'U' . $newPass;
      }
      
      db_update('users')->fields(array('pass' => $newPass))->condition('uid', $account->uid)->execute();

      $oldnew[$uid] = $newUid;
      $newold[$newUid] = $uid;

      $myUser = user_load($newUid);
      $myUser->field_last_name[LANGUAGE_DEFAULT][0]['value'] = $lname;
      $myUser->field_first_name[LANGUAGE_DEFAULT][0]['value'] = $fname;
      $myUser->field_user_company[LANGUAGE_DEFAULT][0]['value'] = $company;
      user_save($myUser);

      variable_set('lastuid', $uid);
      $count++;
      variable_set('lastcount', $count);

      $uidmaps = array();
      $uidmaps['oldnew'] = $oldnew;
      $uidmaps['newold'] = $newold;
      variable_set('uidmaps', serialize($uidmaps));
    }
  }
  
  $end = microtime();
  $elapsed = ($end - $start) * 100;
  $message = "FINISHED>>".$loop."< added, elapsed time>>".$elapsed."< Seconds";
  //echo $message ."<br />";
  watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);

  // PLW 090315 - moving to batch, all nodes uid=1, so deprecate
  //$out = array();
  //$out['map']['uid']['oldnew'] = $oldNewUidMapArr;
  //$out['map']['uid']['newold'] = $newOldUidMapArr;
  //$out['phase'] = $phase;
  //return $out;
}
  
/*

function my_function_name_add_image_to_field_collection($nid, $fid){
   // Load target node
   $node = node_load($nid);

   // Create a new field collection 
   $field_collection_item = entity_create('field_collection_item', array('field_name' => 'my_field_collection_item_name'));

   // Prepare link field
   $link = array(
      'title' => "",
      'url' => "",
      'attributes' => array(
         'title' => "",
      ),
   );

   // Prepare file 
   $file = (array)file_load($fid);
   $file['display'] = "1";

   // Load items into field collection
   $field_collection_item->field_image[LANGUAGE_NONE][] = $file;
   $field_collection_item->field_link[LANGUAGE_NONE][] = $link;

   // Save field collection item
   $field_collection_item->setHostEntity('node', $node);
   $field_collection_item->save(TRUE);
   
   node_save($node);
}



  $node->field_customer_nid[$node->language][]['target_id'] = $form_state['values']['entity id'];
  $node->field_customer_nid[$node->language][]['target_type'] = "node" | "user"
  ...
  node_submit($node);
  node_save($node);
  */

function _fin_migrate_do_table_fields($mapfieldsArr, $row, &$node, $termMap, $oldnew) {
  foreach ($mapfieldsArr as $fieldType => $fieldsettings) {
    switch ($fieldType) {
      case 'node':
        _fin_migrate_handler_node($fieldsettings[$fieldType], $row, $node, $termMap);
      break;
      case 'taxonomy':
        _fin_migrate_handler_taxonomy($fieldsettings[$fieldType], $row, $node, $termMap);
      break;
      case 'collection':
        //_fin_migrate_handler_collection($fieldsettings[$fieldType], $row, $node, $termMap);
      break;
      case 'address':
        //_fin_migrate_handler_address($fieldsettings[$fieldType], $row, $node, $termMap);
      break;
      case 'image':
        // save for later
        //_fin_migrate_handler_image($fieldsettings[$fieldType], $row, $node);
      break;
    }
  } 
}

function _fin_migrate_handler_image($inArr, $inData, &$node) {
  foreach ($inArr as $fldsArr) {
    $fldName = $inArr['fldname'];
    $imgpath_raw = $inData[$fldName];
    $folderfldname = $inArr['foldername'];
    $folderpath = $inData[$folderfldname];
    $foldername = basename($folderpath);
    $tag = $inArr['tag'];
    $title = $node->title . ' - ' . $foldername;
    $filename = basename($imgpath_raw);
    $imgpath = drupal_realpath('migration') . '/' . $folder . '/' . $filename;
    if (file_exists($imgpath)) {
      $file = (object) array(
          'uri' => $imgpath,
          'filemime' => file_get_mimetype($imgpath),
          'status' => 1,
          'folder' => $folderpath,
          'title' => $title,
          'tags' => $tag,
      );
      $drupalfile = file_copy($file, 'private://images/' . $folderpath);
      $fid = $drupalfile->fid;
      
      // load the entity for this file (note, returns an array, indexed on fid
      $mediafiles = entity_load('file', array($fid));
      // set some attributes for the file and save those too
      // set the folder which is linked to a taxonomy term
      // check for a taxonomy term to get the ID
      $terms = taxonomy_get_term_by_name($folder_name);
        
      // we should have an array.  Find the value which is used by folders
      if (is_array($terms)) {
        foreach ($terms as $term) {
          $folderid = $term->tid;
          break;
        }
      }
                
      // set the file entity's folder
      if ($folderid) {
       $mediafiles[$fid]->field_folder[LANGUAGE_DEFAULT][0]['tid'] = $folderid;
      }
              // change the filename so it uses something more meaningful
      $mediafiles[$fid]->filename = $file_name;
        
      // finally, save the attributes
      entity_save('file', $mediafiles);
         
      $node->$fldName[LANGUAGE_DEFAULT][0] = (array) $drupalfile;
      return $node;
    }
  }
}
  
function _fin_migrate_handler_taxonomy($inArr, $inData, &$node, $termMap) {
  foreach ($inArr as $fldsArr) {
    $fldName = $inArr['fldname'];
    $val = $inData[$fldName];
    $term = $termMap[$fldName]['oldterm'][$val];
    $tid = $termMap[$fldName]['newterm'][$term];
    $node->$fldName[LANGUAGE_DEFAULT][0] = $tid;
  }
}
  
/***
sample populating addressfield.  Node_save.

$lang = $node->language;
$node->field_address[$lang][0] = array(
  "country" => "US",
  "thoroughfare" => "123 Fake Street",
  "premise" => "",
  "locality" => "Beverly Hills",
  "administrative_area" => "CA",
  "postal_code" => "90210"
);

***/

//function _fin_migrate_handler_address($inArr, $inData, &$node) {
function _fin_migrate_handler_address($dstFldName, $inArr, $inData, &$node, $termMap) {
  $countries = array(
      '173'=>'AU',
      '158'=>'AT',
      '1870875315'=>'BS',
      '555'=>'BH',
      '165'=>'BE',
      '1870875319'=>'BM',
      '1870875300'=>'BA',
      '1870875296'=>'BW',
      '130'=>'BR',
      '1870875320'=>'BN',
      '1870875308'=>'BG',
      '127'=>'CA',
      '1870875318'=>'KY',
      '1870875321'=>'GB',
      '133'=>'CL',
      '134'=>'CN',
      '135'=>'CO',
      '138'=>'CR',
      '1870875299'=>'HR',
      '141'=>'CU',
      '8'=>'CY',
      '143'=>'CZ',
      '144'=>'DK',
      '210'=>'FI',
      '211'=>'FR',
      '214'=>'DD',
      '221'=>'GR',
      '185'=>'GU',
      '187'=>'HU',
      '182'=>'IS',
      '208'=>'IN',
      '183'=>'ID',
      '186'=>'IR',
      '174'=>'IL',
      '188'=>'IT',
      '1870875305'=>'JM',
      '191'=>'JP',
      '192'=>'JO',
      '1870875294'=>'KZ',
      '1870875295'=>'KE',
      '1870875297'=>'KW',
      '1870875316'=>'LI',
      '37'=>'LT',
      '38'=>'LU',
      '60'=>'MY',
      '1870875327'=>'MT',
      '1870875310'=>'MU',
      '44'=>'MX',
      '56'=>'MC',
      '1870875312'=>'MZ',
      '19'=>'NL',
      '14'=>'NZ',
      '1870875309'=>'NI',
      '1870875325'=>'KP',
      '1870875324'=>'MP',
      '9'=>'NO',
      '21'=>'PA',
      '1870875306'=>'PG',
      '1870875311'=>'PE',
      '32'=>'PH',
      '26'=>'PL',
      '18'=>'PT',
      '27'=>'PR',
      '1870875298'=>'RO',
      '1870875301'=>'RU',
      '1870875322'=>'SA',
      '63'=>'SG',
      '101'=>'ZA',
      '118'=>'KR',
      '103'=>'SP',
      '112'=>'SE',
      '113'=>'CH',
      '116'=>'TW',
      '1870875302'=>'TZ',
      '75'=>'TH',
      '67'=>'TR',
      '71'=>'UK',
      '61'=>'US',
      '1870875313'=>'AE',
      '1870875293'=>'XX',
      '55555'=>'VE',
  );  
  
  $states = array(
      '356'=>'AL',
      '357'=>'AK',
      '358'=>'AZ',
      '359'=>'AR',
      '360'=>'CA',
      '361'=>'CO',
      '362'=>'CT',
      '363'=>'DE',
      '364'=>'SD',
      '365'=>'FL',
      '366'=>'GA',
      '367'=>'HI',
      '368'=>'ID',
      '369'=>'IL',
      '370'=>'IN',
      '371'=>'IA',
      '372'=>'KS',
      '373'=>'KY',
      '374'=>'LA',
      '375'=>'ME',
      '376'=>'MD',
      '377'=>'MA',
      '378'=>'MI',
      '379'=>'MN',
      '380'=>'MS',
      '381'=>'MO',
      '382'=>'MT',
      '383'=>'NE',
      '384'=>'NV',
      '385'=>'NH',
      '386'=>'NJ',
      '387'=>'NY',
      '388'=>'NC',
      '389'=>'ND',
      '390'=>'OH',
      '391'=>'OK',
      '392'=>'OR',
      '393'=>'PA',
      '394'=>'RI',
      '395'=>'SC',
      '396'=>'TX',
      '397'=>'UT',
      '398'=>'VA',
      '399'=>'WA',
      '400'=>'WV',
      '401'=>'WI',
      '402'=>'WY',
      '403'=>'NM',
      '404'=>'TN',
      '405'=>'VT',
      '486'=>'ONT',
      '487'=>'ALB',
      '488'=>'NB',
      '489'=>'PEI',
      '490'=>'SA',
      '491'=>'NS',
      '492'=>'QE',
      '493'=>'BC',
      '494'=>'NL',
      '1561'=>'DC',
      '956955814'=>'PR',
      '956955815'=>'MB',
  );  

  $OU_map = array(
      'street' => 'thoroughfare',
      'street2' => 'premise',
      'city' => 'locality',
      'state' => 'administrative_area',
      'zip' => 'post_code',
      'country' => 'country',
  );

  $addrArr = array();
  foreach ($inArr['fields'] as $dstFld => $params) {
    $fldName = $params['fldname'];
    if (is_array($fldName)) {
      $val = '';
      $vals = array();
      foreach ($fldName as $fld) {
        $vals[] = $inData->$fld;
      }
      if ($vals) {
        $val = implode(", ", $vals);
      }
    }
    else {
      $val = $inData->$fldName;
    }
    if (isset($params['handler'])) {
      switch ($params['handler']) {
        case 'state':
          $val = $states[$val];
        break;
        case 'country':
          $val = $countries[$val];
        break;
      }
    }
    $addrArr[$dstFld] = $val;
  }
  $node->$destFldName[LANGUAGE_DEFAULT][0] = $addrArr;
  return $addrArr;
}

function _fin_migrate_handler_collection($dstFldName, $inArr, $inData, &$node, $termMap) {
  foreach ($inArr as $hostFldName => $sections) {
    foreach ($sections as $section) {  
      $fieldset = $section['fields'];
      $keyFldNames = array();
      foreach ($fieldset as $dstField => $parm) {
        $oldname = $param['fldname'];
        $keyFldNames[$dstField] = $oldname;
      }
      if ( isset($section['oldtable']) ) {
        // we cannot use indata here, we have to selectively read another table
        $keyFldNamesStr = implode(', ', array_values($keyFldNames) );
        $sql = "select ".$primeKeyFldName.", ".keyFldNamesStr." from ".$srcTable." order by ".$srcKeyFldName." ASC";
        $res = db_query($sql)->fetchAll();
      }
      else {
        $res = $inData;
      }
      if ($res) {
        $fields = $set['fields'];
        foreach ($res as $row) {
          foreach ($fields as $itemFldName => $settings) {
            $newCollection = entity_create('field_collection_item', array('field_name' => $hostFldName));
            $handler = $settings['handler'];
            $title = $settings['title'];

            switch ($handler) {
              case 'contact':
                // do not bother checking for dupes, even by email. Because
                // some organizations use emails like info@mycompany.com, meant
                // to be used by multiple people over time. And sometimes not. 
                // If this script could do it, I would be conquering the world
                $bodyFldName = '';
                $body = '';
                if (isset($settings['bodyfldname'])) {
                  if (empty($settings['bodyfldname'])) {
                    $bodyFldName = $settings['bodyfldname'];
                    $body = $inData->$bodyFldName;
                  }
                }
                $data = array();
                foreach ($fieldSet as $dstFldName => $params) {
                  $val = _fin_migreate_process_field($dstFldName, $params, $inData, $node, $termMap);
                  $data[$dstFldName] = $val;
                }
                if ($data) {
                  $contact = new StdClass();
                  $contact->type = "contact";
                  $contact->title = $title;
                  $contact->uid = 1;
                  $contact->status = 1;
                  if (isset($inData[$bodyFldName])) {
                    $body = $inData[$bodyFldName];
                    $contact->body[$node->language][0]['value'] = $body;
                    $contact->body[$node->language][0]['summary'] = text_summary($body);
                  }
                  $contact->body[$node->language][0]['format']  = 'filtered_html';
                  //$contact->field_node_er[$node->language][0] = $node->nid;
                  foreach ($data as $dstFldName => $val) {
                    $contact->$dstFldName[LANGUAGE_DEFAULT][0] = $val;
                  }
                  node_save($contact); 
                  $node->$itemFldName[$node->language][0] = $contact->nid;
                  $newCollection->$itemFldName[$node->language][0] = $contact->nid;
                }
              break;
              default:
                foreach ($fieldSet as $dstFldName => $params) {
                  $val = $val = _fin_migreate_process_field($dstFldName, $params, $inData, $node, $termMap);
                  $newCollection->$dstFldName[$node->language][0] = $val;
                }
              break;
            }
          $newCollection->setHostEntity('node', $node);
          $newCollection->save(TRUE);
        }
      }
    }
  }
}

function _fin_migrate_handler_node($inArr, $inData, &$node, $termMap) {
  foreach ($inArr as $dstFldName => $fldArr) {
    _fin_migreate_process_field($dstFldName, $fldArr, $inData, $node, $termMap);
  }
}

function _fin_migreate_process_field($dstFldName, $params, $inData, &$node, $termMap) {
  $action = $inArr['handler'];
  switch ($action) {
    case 'consolidate':
      // use when you have an address1, address2, address3 to map to 2 fields
      $out = _fin_migrate_handle_consolidate($nodeMapArr);
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
      }
    break;
    case 'name2uid':
      $fldName = $params['fldname'];
      $value2teral = $inData->$fldName;
      $account = user_load_by_name($val);
      $out = $account->uid;
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
      }
    break;
    case 'value2term':
      $val = $params['value'];
      $term = $termMap[$fldName]['oldterm'][$val];
      $out = $termMap[$fldName]['newterm'][$term];
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['tid']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['tid']=$out;
      }
    break;
    case 'lu2term':
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
      $term = $termMap[$fldName]['oldterm'][$val];
      $out = $termMap[$fldName]['newterm'][$term];
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['tid']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['tid']=$out;
      }
    break;
    case 'http2link':
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
      $out = $val;
      $out = str_replace("http://","",$out);
      $out = str_replace("https://", "", $out);
      $node->$fldName[LANGUAGE_DEFAULT][0]['title']=$out;
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['url']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['url']=$out;
      }

      $node->$dstFldname[LANGUAGE_DEFAULT][0]['url']=$out;
    break;
    case 'text2email':
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['email']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['email']=$out;
      }
    break;
    case 'html2history':
      $out = array();
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
      $items = explode('<br/>', $val);
      foreach ($items as $item) {
        $date = strtotime(substr($item, 0, 10));
        if (isset($params['collectionname'])) {
          $collectionName = $params['collectionname'];
          $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
        }
        else {
          $node->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
        }
      }
    break;
    case 'address':
      _fin_migrate_handler_address($dstFldName, $params, $inData, $node, $termMap);
    break;
    case 'collection':
      _fin_migrate_handler_collection($dstFldName, $inArr, $inData, $node, $termMap);
    break;
    case 'inactive2term':
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
      $term = 'active';
      // if TRUE, inactive. Booleans should be positive, not negative, this is why 
      // we have special handling here
      if ($val) {
        $term = 'inactive';
      }
      $out = $termMap[$fldName]['newterm'][$term];
      if (isset($params['collectionname'])) {
        $collectionName = $params['collectionname'];
        $node->$collectionName->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
      }
      else {
        $node->$fldName[LANGUAGE_DEFAULT][0]['value']=$out;
      }
    break;
    case 'inactive2publish':
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
      $out = TRUE;
      if ($val) {
        $out = FALSE;
      }
      $node->$dstFldname = $publish;
    break;
    case 'date2timestamp':
      $out = strtotime($val);
      $node->$dstFldname = $out;
    break;
  }
  return $out;
}

function _fin_migrate_handler_system($inArr, $inData) {
  $out = array();
      
  // a title fieldname is a required value
  $titleFldname = $inArr['title']['fldname'];
  $outArr['title'] = $inData->$titleFldname;
  // Status is not a required value, make active by default
  $stat = 1; //active by default
  if (isset($inArr['status']['fldname'])) {
    $statusFldname = $inArr['status']['fldname'];
    $handler = $inArr['status']['handler'];
    $stat = $inData->$statusFldname;
      if ($handler=='inactive2publish') {
      $stat = $stat*(-1);
    } 
    else {
      $statusArr = $inArr['status'];
      if (isset($statusArr['handler'])) {
        if ($statusArr['handler'] == 'value') {
          $stat = (int) $status['handlers']['value'];
        }
      }
    }
  }
  $outArr['status'] = $stat;

  $created2 = time();
  if (isset($inArr['created']['fldname'])) {      
    $createdFldname = $inArr['created']['fldname'];
    $created = $inData->$createdFldname;
    if ($created) {
      $created2 = strtotime($created);
    }
  }      
  $outArr['created'] = $created2;

  $updatedFldname = 'UpdatedOn';
  $updated2 = time();
  if (isset($inArr['created']['fldname'])) {      
    $updated2 = time();
    $updatedFldname = $inArr['updated']['fldname'];
    $updated = $inData->$updatedFldname;
    if ($updated) {
      $updated2 = strtotime($updated);
    }
  }      
  $outArr['updated'] = $updated2;
  return $outArr;
}
  
function _fin_migrate_prep_terms(&$termMap) { 
  // Fill taxonomy array with new terms
  foreach ($termMap as $termIDField => $settings) {
    $out = array();
    
    db_set_active('legacy'); // Switch databases.

    $id = $termIDField;
    $name = $settings['termfield'];
    $table = $settings['table'];
    $sql = "select ".$id.", ".$name." from {".$table."}";
    $terms = db_query($sql);

    db_set_active();

    foreach ($terms as $term) {
      $out[$term->$id] = $term->$name;
    }
    $termMap[$termIDField]['oldterms'] = $out;
    $out = array();
    $vid = $settings['newvoc'];
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vid));
    foreach ($terms as $term) {
      $out[$term->name] = $term->tid;
    }
    $termMap[$termIDField]['newterms'] = $out;
    $termMap[$termIDField]['newvoc'] = $vid;  
  }
}

function _fin_migrate_get_best_map() {
    // PLW 090115 first thing to figure out whether we are beginning or resuming.
    // Its a bit complicated. We have 2 variables set at different times so if
    // 1 is interrupted during an update, the other survives. We can have a busted
    // variable, or w/in a variable, a busted new/old key map.
    $proceed = FALSE;
    $out = array();
    if ( $out = unserialize(variable_get('fin-node-migrate2')) ) {
      // so far, so good. But old/new key map may be corrupted. Check for it.
      if ( isset($out['oldnew']) && isset($out['newold']) ) {
        $proceed = TRUE;
      }
    }
    // okay, something went wrong and the updated data was irretrievable, lets try the backup set
    if (!$proceed) {
      // uncap when done 
      //variable_set('fin-migrate-node2', array());
      if ( $out = unserialize(variable_get('fin-node-migrate1')) ) {
        // so far, so good. But old/new key map may be corrupted. Check for it.
        if ( isset($out['oldnew']) && isset($out['newold']) ) {
          $message = "Recovering from an abort or failure. Deleting latest node and using 1 node old data - ".print_r($batch,true);
          watchdog('FIN_MIGRATE_NODE',$message,array(),WATCHDOG_WARNING);   
        }
      }
    }
    // If both come up blank, this is a new migration, not a resumption
    return $out;
}

/**
 * Function to migrate all nodes, taxonomy references, files, fields
 *
 * @parameter
 *  $oldnew - array of old indexes mapped with new indexes, filled with UIDs at
 * the beginning of this function. Structure -
 *     ['map']['uid']['oldnew'] = array($olduid, $newuid)
 *     ['map']['uid']['newold'] = array($newuid, $olduid)
 **/
function _fin_migrate_batch_nodes(&$context) {
  // PLW 090115 when we migrate we will save the current field name. To resume,
  // we need to know what table to start with. So we have an array that will 
  // give us an index number for the node Map Array, from where we can get the 
  // table.  This is that array.

/*
  Notes on Mandate.  tblmandates has a comment field, and tblmandatecomments table
  tblmandatecomments entries are time stamped, mandate<mandates
  history is parsed <br />, date beginning. Create 'history' handler
  firms terminated, etc fields in mandates active, comma separated, temporal order
*/

  $nodeMapArr = array(
    'office' => array(
      'oldtable' => 'tblconsultantoffices',
      'oldkeyfldname' => 'ConsultantOfficesID',
      'dst'=>'office',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('fldname'=>'inactive', 'handler'=>'inactive2publish'),
        'title' => array('fldname'=>'ConsultantOfficeName'),
        'body' => array(),      
      ),
      'reference' => array(
        array(
          'fields' => array(
            'field_consultant_firm_er'=>array('fldname'=>'ConsultantFirmID'),          ),
          ),
        ),
      ),
      'reference2' => array(
        'fields' => array(
          'field_manager_firm_er' => array('fldname'=>'ConsultantOfficeID'),
        ),
      ),
      'fields' => array(
        'node' => array(
          'title_field' => array('fldname'=>'ConsultantOfficeName'),
          'title_field' => array('fldname'=>'ConsultantOfficeName'),
          'field_office_type_tr' => array('fldname'=>'OfficeType', 'handler'=>'lu2term'),
          'field_email' => array('fldname'=>'Email', 'handler'=>'text2email'),
          'field_website' => array('fldname'=>'Website', 'handler'=>'http2link'),          
          'field_contact_info' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
              'organization_name' => array('fldname'=>'ConsultantOfficeName'),
              'phone_number' => array('fldname'=>'Phone'),
              'fax_number' => array('fldname'=>'Fax'),
            ),
          ),
          'field_assignment_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'oldtable' => 'tblfundManagers',
                'oldkeyfldname' => 'FundManagerID',
                'fields' => array(
                'field_date' => array('fldname'=>'', 'handler'=>''),
                'field_geographic_tr' => array('fldname'=>'GeographicID', 'handler'=>'lu2term'),
                'field_major_style_tr' => array('fldname'=>'MajorStyleID', 'handler'=>'lu2term'),
                'field_minor_style_tr' => array('fldname'=>'MinorStyleID', 'handler'=>'lu2term'),
              ),
            ),
          ),
          'field_area_of_responsibility_tr' => array('fldname'=>'AreaOfResponsibilityID','handler'=>'lu2term'),
        ),
        'image' => array(
           'Picture' => array('fldname'=>'field_contact_picture'),
        ),
      ),
    ),
    'consultant firm' => array(
      'oldtable' => 'tblconsultantfirms',
      'oldkeyfldname' => 'ConsultantFirmID',
      'dst'=>'consultant_firm',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('fldname'=>'inactive', 'handler'=>'inactive2publish'),
        'title' => array('fldname'=>'ConsultantFirmName'),
        'body' => array(),      
      ),
      'reference' => array(
      ),
      'fields' => array(
        'node' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
          'title_field' => array('fldname'=>'ConsultantFirmName'),
          'field_email' => array('fldname'=>'Email', 'handler'=>'text2email'),
          'field_website' => array('fldname'=>'Website', 'handler'=>'http2link'),          
          'field_aua_xxx' => array('fldname'=>'AUA'),
          'field_address' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
              'organization_name' => array('fldname'=>'ConsultantOfficeName'),
              'phone_number' => array('fldname'=>'Phone'),
              'fax_number' => array('fldname'=>'Fax'),
            ),
          ),
        ),
        'image' => array(
           'Picture' => array('fldname'=>'field_contact_picture'),
        ),
      ),
    ),
    'consultant contact' => array(
      'oldtable' => 'tblconsultantcontacts',
      'oldkeyfldname' => 'ConsultantContactID',
      'dst'=>'job',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('fldname'=>'inactive', 'handler'=>'inactive2publish'),
        'title' => array('fldname'=>'ContactName'),
        'body' => array('fldname' => 'bio'),      
      ),
      'reference' => array(
        array(
          'fields' => array(
            'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
            'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
          ),
        ),
        array(
          'oldtable' => 'tblfundconsultants',
          'fields' => array(
            'field_plan_er' => array('fldname'=>'FundID'),
          ),
        ),
      ),
      'fields' => array(
        'node' => array(
          'title_field' => array('fldname'=>'ContactName'),
          'field_job_type_tr' => array('handler'=>'value2term', 'value'=>'Consultant Contact', 'voc'=>'18'),
          'field_organization_type_tr' => array('handler'=>'value2term', 'value'=>'Consultant Firm', 'voc'=>'20'),
          'field_job_title' => array('fldname'=>'ContactName'),
          'field_area_of_responsibility_tr' => array('fldname'=>'AreaOfResponsibility', 'handler'=>'lu2term'),
          'field_status_tr' => array('fldname'=>'inactive', 'handler'=>'inactive2term'),
          'field_employment_date' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
          'field_area_of_responsibility_tr' => array('fldname'=>'AreaOfResponsibilityID','handler'=>'lu2term'),
          'field_contact_info' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
              'organization_name' => array('fldname'=>''),
              'last_name' => array('handler'=>'lastname'),
              'phone_number' => array('fldname'=>'Phone'),
              'fax_number' => array('fldname'=>'Fax'),
            ),
          ),
        ),
        'image' => array(
           'Picture' => array('fldname'=>'field_contact_picture'),
        ),
      ),
    ),
    'manager contact' => array(
      'oldtable' => 'tblmanagercontacts',
      'oldkeyfldname' => 'ManagerContactID',
      'dst'=>'job',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('handler'=>'value', 'value'=>'1'),
        'title' => array('fldname'=>'ContactName'),
        'body' => array('fldname' => '', 'type'=>'longandteaser'),      
      ),
      'reference' => array(
        array(
          'fields' => array(
            'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
          ),
        ),
        array(
          'oldtable' => 'tblfundmanagers',
          'fields' => array(
            'field_plan_er' => array('fldname'=>'FundID'),
          ),
        ),
      ),
      'fields' => array(
        'node' => array(
          'title_field' => array('fldname'=>'ContactName'),
          'field_job_type_tr' => array('handler'=>'value2term', 'value'=>'Manager Contact', 'voc'=>'18'),
          'field_organization_type_tr' => array('handler'=>'value2term', 'value'=>'Manager Firm', 'voc'=>'20'),
          'field_job_title' => array('fldname'=>'ContactName'),
          'field_area_of_responsibility_tr' => array('fldname'=>'AreaOfResponsibility', 'handler'=>'lu2term'),
          'field_employment_date' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
          'field_contact_info' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
              'organization_name' => array('fldname'=>''),
              'last_name' => array('handler'=>'lastname'),
              'phone_number' => array('fldname'=>'Phone'),
              'fax_number' => array('fldname'=>'Fax>'),
            ),
          ),
          'field_area_of_responsibility_tr' => array('fldname'=>'AreaOfResponsibilityID','handler'=>'lu2term'),
        ),
        'image' => array(
           'Picture' => array('fldname'=>'field_contact_picture'),
        ),
      ),
    ),
    'manager firm' => array(
      'oldtable' => 'tblmanagerfirms',
      'oldkeyfldname' => 'ManagerFirmID',
      'dst'=>'manager_firm',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('fldname'=>'Archive', 'handler'=>'inactive2publish'),
        'title' => array('fldname'=>'ConsultantFirmName'),
        'body' => array('fldname'=>'Comments'),      
      ),
      'reference' => array(
      ),
      'fields' => array(
        'node' => array(
          'title_field' => array('fldname'=>'ManagerFirmName'),
          'field_email' => array('fldname'=>'Email', 'handler'=>'text2email'),
          'field_website' => array('fldname'=>'Website', 'handler'=>'http2link'),          
          'field_assignment_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'oldtable' => 'tblfundManagers',
                'oldkeyfldname' => 'FundManagerID',
                'fields' => array(
                'field_date' => array('fldname'=>'', 'handler'=>''),
                'field_geographic_tr' => array('fldname'=>'GeographicID', 'handler'=>'lu2term'),
                'field_major_style_tr' => array('fldname'=>'MajorStyleID', 'handler'=>'lu2term'),
                'field_minor_style_tr' => array('fldname'=>'MinorStyleID', 'handler'=>'lu2term'),
              ),
            ),
          ),
          'field_address' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
              'organization_name' => array('fldname'=>'ConsultantOfficeName'),
              'phone_number' => array('fldname'=>'Phone'),
              'fax_number' => array('fldname'=>'Fax'),
            ),
          ),
          'field_archived' => array('fldname'=>'Archive'),
        ),
        'image' => array(
           'Picture' => array('fldname'=>'field_contact_picture'),
        ),
      ),
    ),
    'fund contact' => array(
      'oldtable' => 'tblfundcontacts',
      'oldkeyfldname' => 'FundContactID',
      'dst'=>'job',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('fldname'=>'inactive', 'handler'=>'inactive2publish'),
        'title' => array('fldname'=>'ContactName'),
        'body' => array('fldname' => 'bio', 'type'=>'longandteaser'),      
      ),
      'reference' => array(
        array(
          'fields' => array(
            'field_plan_er' => array('fldname'=>'FundID'),
          ),
        ),
      ),
      'fields' => array(
        'node' => array(
          'title_field' => array('fldname'=>'ContactName'),
          'field_job_type_tr' => array('handler'=>'value2term', 'value'=>'Manager Contact', 'voc'=>'18'),
          'field_organization_type_tr' => array('handler'=>'value2term', 'value'=>'Manager Firm', 'voc'=>'20'),
          'field_job_title' => array('fldname'=>'ContactName'),
          'field_area_of_responsibility_tr' => array('fldname'=>'AreaOfResponsibility', 'handler'=>'lu2term'),
          'field_employment_date' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
          'field_status_tr' => array('fldname'=>'inactive', 'handler'=>'inactive2term'),
          'field_contact_info' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
              'organization_name' => array('fldname'=>''),
              'last_name' => array('handler'=>'lastname'),
              'phone_number' => array('fldname'=>'Phone'),
              'fax_number' => array('fldname'=>'Fax>'),
            ),
          ),
          'field_area_responsibility_tr' => array('fldname'=>'AreaOfResponsibilityID','handler'=>'lu2term'),
        ),
        'image' => array(
           'Picture' => array('fldname'=>'field_contact_picture'),
        ),
      ),
    ),
    'plan' => array(
      'oldtable' => 'tblfunds',
      'oldkeyfldname' => 'FundID',
      'system' => array(
        'updated' => array('fldname'=>'UpdatedOn', 'handler'=>'date2timestamp'),
        'created' => array('fldname'=>'CreatedOn', 'handler'=>'datetotimestamp'),
        'status' => array('fldname'=>'inactive', 'handler'=>'inactive2publish'),
        'title' => array('fldname'=>'FundName'),
        'body' => array(),      
      ),
      'reference' => array(
      ),
      'fields' => array(
        'node' => array(
          'field_title' => array('fldname'=>'FundName'),
          'field_plan_acronym' => array('fldname'=>'Acronym'),
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink', 'handler'=>'link'),
          'field_placement_policy_tr' => array('fldname'=>'PlacementPolicy', 'handler'=>'lu2term'),
          'field_website' => array('fldname'=>'Website', 'handler'=>'http2link'),
          'field_plan_type_tr' => array('fldname'=>'PlanTypeID', 'handler'=>'lu2term'),
          'field_status_tr' => array('fldname'=>'Status', 'handler'=>'lu2term'),
          'field_currency_tr' => array('fldname'=>'CurrencyID', 'handler'=>'lu2term'),
          'field_address' => array(
            'handler' => 'address',
            'fields' => array(
              'thoroughfare' => array('fldname'=>array('Address1')),
              'premise' => array('fldname'=>array('Address2', 'Address3')),
              'locality' => array('fldname'=>'City'),
              'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
              'post_code' => array('fldname'=>'Zip'),
              'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
            ),
          ),
        ),
        'collection' => array(
          'field_asset_allocation_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'fields' => array(
                  'field_aa_absolute_return' => array('fldname'=>''),
                  'field_aa_allocation_date' => array('fldname'=>''),
                  'field_aa_alternative_strategies' => array('fldname'=>''),
                  'field_aa_balanced' => array('fldname'=>''),
                  'field_aa_canadian_equities' => array('fldname'=>''),
                  'field_aa_cash_other' => array('fldname'=>''),
                  'field_aa_credit_opportunities' => array('fldname'=>''),
                  'field_aa_domestic_equities' => array('fldname'=>''),
                  'field_aa_domestic_fixed_income' => array('fldname'=>''),
                  'field_aa_emerging_markets_equity' => array('fldname'=>''),
                  'field_aa_global_equities' => array('fldname'=>''),
                  'field_aa_global_fixed_income' => array('fldname'=>''),
                  'field_aa_hedge_fund_strategies' => array('fldname'=>''),
                  'field_aa_international_equities' => array('fldname'=>''),
                  'field_aa_intl_fixed_income' => array('fldname'=>''),
                  'field_aa_multi_asset' => array('fldname'=>''),
                  'field_aa_mutual_fund' => array('fldname'=>''),
                  'field_aa_private_equity' => array('fldname'=>''),
                  'field_aa_real_assets' => array('fldname'=>''),
                  'field_aa_real_estate' => array('fldname'=>''),
                  'field_aa_real_return' => array('fldname'=>''),
                  'field_aa_risk_parity' => array('fldname'=>''),
                ),
              ),
            ),              
          ),
          'field_consultant_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'oldtable' => 'tblfundconsultants',
                'fields' => array(
                  'field_employment_date' => array('handler'=>'value', 'value'=>'0'),
                  'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID',
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID',
                ),
              ),
            ),              
          ),
          'field_manager_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'fields' => array(
                  'field_amount' => array('fldname'=>'FundSize'),
                ),
              ),
              array(
                'oldtable' => 'tblfundmanagers',
                'fields' => array(
                  'field_employment_date' => array('handler'=>'value', 'value'=>'0'),
                  'field_manager_firm_er' => array('fldname'=>'ManagerFirmID',
                ),
              ),
            ),              
          ),
          'field_plan_size_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'fields' => array(
                  'field_date' => array('fldname'=>'FundAsOfDate','handler'=>'date2timestamp'),
                  'field_plan_size' => array('fldname'=>'FundSize'),
                ),
              ),
            ),              
          ),
          'field_plan_foia_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'fields' => array(
                  'field_foia_date' => array('fldname'=>'FOIADate', 'handler'=>'date2timestamp'),
                  'field_foia_form' => array('fldname'=>'FOIAForm'),
                  'field_foia_notes' => array('fldname'=>'FOIAContactName'),
                  'field_foia_required' => array('fldname'=>'FOIA'),
                ),
              ),
            ),              
          ),
          'field_contact_history' => array(
            'handler' => 'collection',
            'sets' => array(
              array(
                'oldtable' => 'tblfundcontacts',
                'fields' => array(
                  'field_employment_date' => array('handler'=>'value','value'=>'0'),
                  'field_plan_contact_er' => array(
                    'handler' => 'contact',
                    'titlefldname' => 'ConactName',
                    'bodyFldName' => 'Bio',
                    'fields' => array(
                      'field_full_name' => array('fldname'=>'ContactName'),
                      'field_contact_title_xxx' => array('fldname'=>'Title'),
                      'field_email' => array('fldname'=>'Email', 'handler'=>'text2email')  ,                 
                      'field_contact_info' => array(
                        'handler' => 'address',
                        'fields' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'premise' => array('fldname'=>''),
                          'locality' => array('fldname'=>'City'),
                          'administrative_area' => array('fldname'=>'StateID', 'handler'=>'lu2term'),
                          'post_code' => array('fldname'=>'Zip'),
                          'country' => array('fldname'=>'CountryID', 'handler'=>'lu2term'),
                          'organization_name' => array('fldname'=>'ConsultantOfficeName'),
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                      ),
                    ),
                  ),
                ),
                'disabled' => array(
                  'field_employment_date' => array(),
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );
  
  $taxonomyMapArr = array(
    'AssetClassID' => array(
      'table' => 'tblassetclasses',
      'termfield' => 'AssetClassName',
      'oldterms' => array(),
      'newvoc' => '9',
      'newterms' => array(),
    ),
    'ClientTypeID' => array(
      'table' => 'tblclienttypes',
      'termfield' => 'ClientTypeName',
      'newvoc' => '8',
      'newterms' => array(),
    ),
    'ConsultantTypeID' => array(
      'table' => 'tblconsultanttypes',
      'termfield' => 'ConsultantTypeName',
      'oldterms' => array(),
      'newvoc' => '4',
      'newterms' => array(),
    ),
    'ConsultantOfficeID' => array(
      'table' => 'tblconsultantoffices',
      'termfield' => 'ConsultantOfficeName',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
     'CurrencyID' => array(
      'table' => 'tblcurrency',
      'termfield' => 'ShortName',
      'oldterms' => array(),
      'newvoc' => '11',
      'newterms' => array(),
    ),
    'DatabasesUsedID' => array(
      'table' => 'tbldatabasesused',
      'termfield' => 'DatabasesUsedName',
      'oldterms' => array(),
      'newvoc' => '10',
      'newterms' => array(),
    ),
    'FundTypeID' => array(
      'table' => 'tblfundtypes',
      'termfield' => 'FundType',
      'oldterms' => array(),
      'newvoc' => '12',
      'newterms' => array(),
    ),
    'GeographicID' => array(
      'table' => 'tblgeographic',
      'termfield' => 'GeographicName',
      'oldterms' => array(),
      'newvoc' => '16',
      'newterms' => array(),
    ),
    'MajorStyleID' => array(
      'table' => 'tblmajorstyles',
      'termfield' => 'MajorStyle',
      'oldterms' => array(),
      'newvoc' => '17',
      'newterms' => array(),
    ),
    'MinorStyleID' => array(
      'table' => 'tblminorstyles',
      'termfield' => 'MinorStyle',
      'oldterms' => array(),
      'newvoc' => '7',
      'newterms' => array(),
    ),
    'PlacementPolicy' => array(
      'table' => 'tblplacementpolicies',
      'termfield' => 'PlacementPolicyName',
      'oldterms' => array(),
      'newvoc' => '14',
      'newterms' => array(),
    ),
    'SourceID' => array(
      'table' => 'tblsources',
      'termfield' => 'Source',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'StatusID' => array(
      'table' => 'tblstatus',
      'termfield' => 'Status',
      'oldterms' => array(),
      'newvoc' => '5',
      'newterms' => array(),
    ),  
  );

debugBreak();

  //$taxonomyMapArr = _fin_migrate_prep_terms($taxonomyMapArr);
  _fin_migrate_prep_terms($taxonomyMapArr);

  $oldNewMaps = _fin_migrate_get_best_map();
  $oldNew = $oldNewMap['oldnew'];
  $newOld = $oldNewMap['newold'];

  $batches = count($nodeMappArr);
  $batchcount = 0;
  foreach ($nodeMapArr as $pseudonym => $map) {
    $batchcount++;

    $table = $map['oldtable'];
    $oldKeyFldName = $map['oldkeyfldname'];    

    $move = array();
    
    // Is this a fresh table or are we resuming after an interruption?
    if ( isset( $oldNew[$table]['oldnew']) ) {
      // Pick up where we left off

      foreach ($result as $row) {
        $oids[] = $row->$oldKeyFldName;
      }
      $message = "Rounding up Table ".$table." | ".$oldKeyFldName." | Total Rows Src: ".count($oids)." | Total Rows New: ".count($result);       
      $move = array_diff( $oids, array_keys($oldNew) );
      $moveStr = implode('", "', $move);
      $sql2 = 'select * from {'.$table.'} where '.$oldKeyFldName.' in ("'.$moveStr.'") order by '.$oldKeyFldName.' ASC';       $result = db_query($sql2);
      $result = db_query($sql2);
    } else {       
      // a fresh table

      db_set_active('legacy');
      $sql = 'select * from {'.$table.'} order by '.$oldKeyFldName.' ASC';
      $result = db_query($sql);
      db_set_active();
      $message = "FRESH Table ".$table." | ".$oldKeyFldme." | Rowcount: ".$count($result);
    }
    watchdog('FIN_MIGRATE_NODE_'.$table, $message, array(), WATCHDOG_INFO);
   
    $batchrows = count($result);
    $fowcount = 0;
    foreach ($result as $row) {
      $rowcount++;
      $context['message'] = 'NODE: Moving set '.$pseudonym.' ['.$batches.'/'.$batchcount.']... Row ('.$rowcount.'/'.$batchrows.')...';

      $mode="new";
      $srcKey = $row[$oldKeyFldName];
      $getHistory = _fin_migrate_get_best_map();
      $lastKey = $getHistory['oldkey'];
      if ($srcKey==$lastKey) {
        $mode = "update";
      }
      $systemArr = _fin_migrate_handler_system($map['system'], $row);

debugBreak();

/*
      $entity_type = 'contact';
      $entity = entity_create($entity_type, array('type' => 'contact_simple'));
      $wrapper = entity_metadata_wrapper($entity_type, $entity);

      $wrapper->save();
    //or
    entity_save('contact', $entity);    

node_object_prepare($node);

$query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'YOUR-CONTENT-TYPE')
    ->propertyCondition('title', $form_state['values']['title'], 'LIKE')
    ->execute();

  foreach($result['node'] as $nid => $node){
    $node = node_load($nid);
    ....
  }

$node->field_customer_nid[$node->language][]['target_id'] = $form_state['values']['entity id'];
$node->field_customer_nid[$node->language][]['target_type'] = "node";

$node->body[$node->language][0]['value']   = $bodytext;
$node->body[$node->language][0]['summary'] = text_summary($bodytext);
$node->body[$node->language][0]['format']  = 'filtered_html';

*/

      // Create a node
      if ($mode=="new") {
        $node = (object) array(
          'type' => $dstContentType,
          'uid' => UID_DEFAULT,
          'status' => $systemArr['status'],
          'language' => LANGUAGE_DEFAULT,
          'created' => $systemArr['created'],
          'calculhmac(, data)hanged' => $systemArr['updated'],
          'title' => $systemArr['title'],
          'body' => $systemArr['body'],
          'teaser' => $systemArr['teaser'],
        ); 
        $natcasesort()ode->body[$node->language][0]['value']   = $systemArr['body'];
        $node->body[$node->language][0]['summary'] = text_summary($systemArr['body']);
        $node->body[$node->language][0]['format']  = 'filtered_html';

        node_submit($node);
        node_save($node);
      }

      // node updated by reference
      _fin_migrate_do_table_fields($map['fields'], $row, $node, $taxonomyMapArr, $oldnew);
      
      $oldOldKeyName = $oldKeyName;
      $oldOldKey = $oldKey;

      $oldKeyName = $map['oldkeyfldname'];
      $oldKey = $row->$oldKeyName;
      $newKey = $node->nid;
      
      // PLW 090115 We now have a node, so are committed. But the node is not complete.
      // If the program stops before the next few lines, save this data so we can blow
      // away the node and start over next round.
      // Yes, we are doing this after every node.
      // Also note we save oldnew maps twice. If
      // the process aborts midwrite, we will have 
      // one surviving set to work with
      $saveArr = array(
        'complete' => FALSE,
        'newkey' => $newKey,
        'oldkeyname' => $oldKeyName,
        'oldkey' => $oldKey,
        'oldoldkeyname' => $oldOldKeyName,
        'oldoldkey' => $oldOldKey,
        'oldnew' => serialize($oldnew),
        'newold' => serialize($newold),
      );
      variable_set('fin-node-migrate1', serialize($saveArr));

      $oldnew['map'][$oldKeyName]['oldnew'][$oldKey] = $newKey;
      $newold['map'][$oldKeyName]['newold'][$newKey] = $oldKey;

      $saveArr = array(
        'complete' => TRUE,
        'newkey' => $newKey,
        'oldkeyname' => $oldKeyName,
        'oldkey' => $oldKey,
        'oldoldkeyname' => $oldOldKeyName,
        'oldoldkey' => $oldOldKey,
        'oldnew' => serialize($oldnew),
        'newold' => serialize($newold),
      );
      variable_set('fin-node-migrate2', serialize($saveArr));
    }
  }
}

/**
 * Function that will go through each node migration set (consultant contact to job,
 * consultant firm, office, fund to plan, fund contact to job, etec, and translate 
 * all foreign key values (old) to nids (new).
 *
 * This is complicated, because for example, consultant contacts link to office & firms, 
 * as expected, but tblfundcontacts also link to consultant contact, firm & office. We
 * should capture those links in other tables too. If we are doing consultant contact, we
 * should then go to tblfundscontact and grab the fund id associated with each
 * consultant contact. 
 *
 * When we do Office, we do that again, but this time, grabbing fundID associated with
 * office ID. 
 *
 * @parameters
 *  $inData - all data from the current production site
 *  $oldnew - an array with old/new & new/old key-nid pairs indexed by old ID fldname
 * nodeMapArr - array of parameters describing tables, conent types, field names, field 
 * classes (node, image, taxonomy ref) and key and ref fields to operate on here
 
      'oldtable' => 'tblconsultantoffices',
      'oldkeyfldname' => 'ConsultantOfficesID',
      'dst'=>'office',

oldtable, fieldSet
 */
function _fin_migrate_batch_refs($nodeMapArr) {
  $oldNew = _fin_migrate_get_best_map();
  foreach ($nodeMapArr as $pseudonym => $params) {  
    if ( isset($params['reference']) ) {
      if ( !empty($params['reference']) ) {
        $primeTable = $params['oldtable'];
        $primeKeyFldName = $params['oldkeyfldname'];

        foreach ($params['reference'] as $sections) {
          if (!isset($sections['primetable'])) {
            $srcTable = $primeTable;
          } else {
            $srcTable = $sections['primetable'];
          }
          $srcKeyFldName = $sections['primekeyfieldname'];
          $fieldset = $sections['fields'];
          
          $keyFldNames = array();
          $dstKeys = array();
          $inData = array();
          foreach ($fieldset as $dstField => $parm) {
            $oldname = $param['fldname'];
            $keyFldNames[$dstField] = $oldname;
          }
          $keyFldNamesStr = implode(', ', array_values($keyFldNames));
          $sql = "select ".$primeKeyFldName.", ".keyFldNamesStr." from ".$srcTable." order by ".$srcKeyFldName." ASC";
          $res = db_query($sql)->fetchAll();
          if ($res) {
            foreach ($res as $row) {
              $oldKey = $row->$primeKeyFldName;
              $nid = $oldnew['map'][$srcKeyFldName]['oldnew'][$oldKey];
              $node = node_load(array('nid'=>$nid));

              foreach($keyFldNames as $newKeyName => $oldKeyName) {
                $old = $row->$keyname;
                $new = $oldnew['map'][$oldKeyName]['oldnew'][$old];
                $node->$newKeyName[LANGUAGE_DEFAULT][0] = $new;
              }
            }
            node_submit($node);
            node_save($node);
          }
        }
      }
    }
  }
}