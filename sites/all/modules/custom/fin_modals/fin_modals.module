<?php

/**
 * @file
 * This file contains code for basic Fin modal
 * and also some replicate hooks
 *
 *Written by John W. Johnson
 *1-12-2016
 */

/**
 * Implements hook_init().
 *
 * Adding javascript / css.
 */
function fin_modals_init() {
  require_once("modules/node/node.pages.inc");
  fin_modals_popup_style();
}

function fin_modals_popup_style() {
  static $fin_added = FALSE;
  if ($fin_added == FALSE) {
    $fin_added = TRUE;
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    $popup_style = array(
      'fin-modals-contact-style' => array(
        'modalSize' => array(
          'type' => 'scale',
          'width' => .95,
          'height' => .9,
          'contentRight' => 28,
        ),
      ),
    );
    drupal_add_js($popup_style, 'setting'); 
  }
}


function fin_modals_theme() {
  $theme = array(
    'fin_modals_todo_edit_contacts' => array(
      'variables' => array(),
    ),
  );
  return $theme;
}

function _fin_modals_theme($theme = 'fubik') {
  return $theme;
}
/**
 * Implements hook_menu().
 */
function fin_modals_menu() {
  global $user;
  $items = array();
  //BACK END links
  $items['modal/%ctools_js/add'] = array(
    'page callback' => 'fin_modals_node_add_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'theme callback' => '_fin_modals_theme',
    'theme arguments' => array('fubik'),
  );

  $items['modal/%/comment/%ctools_js/%'] = array(
    'page callback' => 'fin_modals_edit_callback',
    'page arguments' => array(1,3,4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => '_fin_modals_theme',
    'theme arguments' => array('fubik'),
  );
  
  $items['modal/%/comment/%ctools_js'] = array(
    'page callback' => 'fin_modals_new_callback',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => '_fin_modals_theme',
    'theme arguments' => array('fubik'),
  );

  $items['modal/%/tasks/%ctools_js'] = array(
    'page callback' => 'fin_modals_task_callback',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => '_fin_modals_theme',
    'theme arguments' => array('fubik'),
  );

  //FRONT END links
  //Different link needed for different themes
  $items['modal-front/%ctools_js/add'] = array(
    'page callback' => 'fin_modals_node_add_modal_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'theme callback' => '_fin_modals_theme',
  );  
  //Different link needed for different themes
  $items['modal-front/%/tasks/%ctools_js'] = array(
    'page callback' => 'fin_modals_task_callback',
    'page arguments' => array(1,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => '_fin_modals_theme',
    'theme arguments' => array('corposs'),
  );
  $items['resources/shortcuts']  = array(
    'type' =>  MENU_NORMAL_ITEM,
    'title' => 'Shortcuts',
    'access arguments' => array('administer shortcuts'), 
    'menu_name' => 'main-menu',
    'weight' => 0,
    'page callback' => 'fin_modals_menu_callbacks',
  );
  $items['resources/subscriptions']  = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Following',
    'access arguments' => array('subscribe to content'), 
    'menu_name' => 'main-menu',
    'weight' => 1,
    'page callback' => 'fin_modals_menu_callbacks',
  );
  $items['resources/saved-searches']  = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => "Saved Searches",
    'access arguments' => array('use search_api_saved_searches'), 
    'menu_name' => 'main-menu',
    'weight' => 2,
    'page callback' => 'fin_modals_menu_callbacks',
  );
  $items['ajax/entity-delete/%/%'] = array(
    'page callback' => 'fin_modals_entity_delete',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'theme callback' => '_fin_modals_theme',
  );

  $items['resources/imce']  = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => "File Browser",
    'access callback' => 'user_is_logged_in',
    'menu_name' => 'main-menu',
    'weight' => 4,
    'page callback' => 'fin_modals_menu_callbacks',
  );
  return $items;
}
 

function fin_modals_menu_alter(&$items) {
  $items['user/%user/shortcuts']['type'] = MENU_CALLBACK;
  $items['user/%user/messages']['type'] = MENU_CALLBACK;
  $items['user/%user/subscriptions']['type'] = MENU_CALLBACK;
  $items['user/%user/saved-searches']['type'] = MENU_CALLBACK;
  //$items['user/%user/saved-filters']['type'] = MENU_CALLBACK;
  $items['user/%user/imce']['type'] = MENU_CALLBACK;
}

function fin_modals_menu_callbacks() {
  global $user;
  if (arg(1) == 'shortcuts') {
    drupal_goto("user/" . $user->uid . "/shortcuts");
  } elseif (arg(1) == 'subscriptions') {
    drupal_goto("user/" . $user->uid . "/subscriptions");
  } elseif (arg(1) == 'saved-searches') {
    drupal_goto("user/" . $user->uid . "/saved-searches");
  //} elseif (arg(1) == 'saved-filters') {
  //  drupal_goto("user/" . $user->uid . "/saved-filters");
  } elseif (arg(1) == 'imce') {
    drupal_goto("user/" . $user->uid . "/imce");
  } else {
    return "here";
  }
}

/**
 * Entiry actions
 *  Used now just for saved filter delete
 */
function fin_modals_entity_delete ($entity_type = NULL, $entity_id = NULL) {
  $destination = !empty($_GET['destionation'])?$_GET['destionation']:'/';
  if (!$entity_type || !$entity_id || is_object($entity_type)) {
    return;
  }
  entity_delete($entity_type, $entity_id);
  drupal_goto($destination);
}

/**
 *NEW comment form
 */
function fin_modals_new_callback($nid, $ajax) {
  global $user;
  $comment = (object) array(
    'nid' => $nid,
    'cid' => NULL,
    'pid' => NULL,
    'uid' => $user->uid,
    'mail' => '',
    'subject' => '',
    'is_anonymous' => 0,
    'homepage' => '',
    'status' => COMMENT_PUBLISHED,
    'language' => LANGUAGE_NONE,
  );
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');
    
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Add New Comment'),
      'nid' => $nid,
    );
    $form_state['build_info']['args'][] = $comment;
    $commands = ctools_modal_form_wrapper('comment_form', $form_state);
    if (!empty($form_state['executed'])) {
      ctools_add_js('ajax-responder');
      $commands = array();
      $commands[] = ctools_modal_command_dismiss();
      $commands[] = ctools_ajax_command_reload();
    }
    print ajax_render($commands);
  }else {
    $form_state = array(
      'nid' => $nid,
    );
    return drupal_get_form('comment_form', $form_state, $comment);
  }
}

/**
 *TASK callback
 */
function fin_modals_task_callback($nid, $ajax) {
  global $user;
  $node = node_load($nid);
  $task_sql = "SELECT id from mytinytodo_fields WHERE entity_id=$nid";
  $rec = db_query($task_sql)->fetchObject();
  
  //Needed because we may not have a fid yet
  if (empty($rec->id)) {
    $instance = field_info_instance('node', 'field_tasks', $node->type);
    $fid = mytinytodo_get_field_id('node', $node->nid, $instance);
  } else {
    $fid = $rec->id;
  }
  if (!$ajax) {
    return drupal_access_denied();
  } else {
    ctools_include('ajax');
    ctools_include('modal');
    $content =  "<iframe  style='width: 100%;height: 95%;' src='/mytinytodo/page?fid=" . $fid . "' />";
    $commands[] = ctools_modal_command_display($node->title, $content);
    print ajax_render($commands);
  }
}

/**
 * Get contacts for a plan
 */
function fin_modals_get_contacts($fid = false) {
  
  if(!$fid) {
    watchdog('Fin Modals', "Ack! No Field ID (fid) in fin_modals_get_contacts!", array(), WATCHDOG_ERROR);
    return array('title' => 'No contacts found');
  }
  
  $task_sql = "SELECT m.entity_id, n.type FROM mytinytodo_fields m
                INNER JOIN node n ON m.entity_id=n.nid
                WHERE m.id=$fid";
  $ref = db_query($task_sql)->fetchObject();
  $nid = $ref->entity_id;
  $type = $ref->type;
  if ($type == 'plan') {
    $contact_sql = "
    SELECT n.nid, n.title
    FROM field_data_field_plan_er p 
    INNER JOIN field_data_field_job_history jh ON p.entity_id=jh.field_job_history_value
    INNER JOIN node n ON jh.entity_id=n.nid
    WHERE p.field_plan_er_target_id = :nid AND p.bundle = 'plan_contact'
    AND n.status = 1
    ORDER BY n.title ASC
    ";
  } elseif ($type == 'consultant_firm') {
    $contact_sql = "
    SELECT n.nid, n.title
    FROM field_data_field_consultant_firm_er c 
    INNER JOIN field_data_field_job_history jh ON c.entity_id=jh.field_job_history_value
    INNER JOIN node n ON jh.entity_id=n.nid
    WHERE c.field_consultant_firm_er_target_id = :nid AND c.bundle = 'consultant_contact'
    AND n.status = 1
    ORDER BY n.title ASC
    ";
  } elseif ($type == 'manager_firm') {
    $contact_sql = "
    SELECT n.nid, n.title
    FROM field_data_field_manager_firm_er m 
    INNER JOIN field_data_field_job_history jh ON m.entity_id=jh.field_job_history_value
    INNER JOIN node n ON jh.entity_id=n.nid
    WHERE m.field_manager_firm_er_target_id = :nid AND m.bundle = 'manager_contact'
    AND n.status = 1
    ORDER BY n.title ASC
    ";
  } else {
    return array();
  }
  $contact_result = db_query($contact_sql, array(':nid'=>$nid));
  $contacts = array();
  while ($rec = $contact_result->fetchObject()) {
    $temp = array();
    $temp['nid'] = $rec->nid;
    $temp['title'] = $rec->title;
    $contacts[] = $temp;
  }
  return $contacts;
}

function theme_fin_modals_todo_edit_contacts() {
  $fid = $_GET['fid'];
  $options = fin_modals_get_contacts($fid);
  $out = "
    <div class='form-row form-row-short'>
     <span class='h'>Contacted</span>
     <select name='contact'>
      <option value = '0' selected='selected'>Select Contact</option>
     ";
  foreach ($options as $option) {
    $out .= "<option value='" . $option['title'] . "'>" . $option['title'] . "</option>";
  }
  $out .="
     </select>
    </div>";
    
  return $out;
}
/**
 *Adds a "reset" button to exposed fileter forms.
 */
function fin_modals_form_views_exposed_form_alter(&$form, &$form_state) {
  // ------------------------------------------------------------
  // Add an own reset button to all views exposed forms. The reason behind is,
  // that the default Drupal reset button doesn't play nice with AJAX
  // and jumps back to the front page because of URL problems. So it's unusable for us.
  //
  // Add class to make it better selectable in JS and CSS
  $form['submit']['#attributes'] = array('class' => array('my-views-filter-submit'));
  $submit_btn_id = $form['submit']['#id'];
  if (!empty($submit_btn_id) && !empty($form['reset'])) {
    // Add own reset button
    $form['submit']['#suffix'] = '<button onclick="javascript:jQuery(this.form).clearForm();jQuery(this.form).find(\'#' . $submit_btn_id . '\').trigger(\'click\');return false;" class="form-submit ico-remove form-reset my-views-filter-reset">' . t('Reset') . '</button>';
    // Remove the original RESET button.
    unset($form['reset']);
  }
}

/**
 *Alter the PARENT forms to include links for modals
 */
function fin_modals_form_alter(&$form, &$form_state, $form_id){
  global $user;
  $forms = array(
    'mandate_node_form',
    'plan_node_form',
    'consultant_firm_node_form',
    'contact_node_form',
    'manager_firm_node_form',
    'office_node_form',
    'comment_form',
  );
  if(in_array($form_id, $forms)) {
    if (empty($form['#node']->nid)) {
      $form['field_serialized_comment']['#type'] = 'hidden';
      $form['field_mandate_history'] = array(
        '#type' => "fieldset",
        '#title' => "Add history item",
        '#collapsed' => true,
        '#collapsible'=> true,
        '#tree' => true,
      );
      $today = date("Y-m-d");
      $form['field_mandate_history']['date'] = array(
        '#type' => 'date_popup',
        '#default_value' => $today,
        '#date_type' => DATE_DATETIME,
        '#date_timezone' => date_default_timezone(),
        '#date_format' => 'm/d/Y',
        '#date_increment' => 1,
        '#date_year_range' => '-3:+3',
        '#date_increment' => 30
      );
      $form['field_mandate_history']['author'] = array(
        '#markup' => "<label>Your name</label>" . $user->name,
      );
      $form['field_mandate_history']['field_comment_subject'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#attributes' => array(
          'placeholder' => "Subject (Required)",
        ),
      );
      //Only include status field for mandates
      if ($form_id == 'mandate_node_form') {
        $tree = taxonomy_get_tree(20, 0, 1, FALSE);
        $status_options = array('_none' => '- None -');
        foreach ($tree as $term) {
          $status_options[$term->tid] = $term->name;
        }
        $form['field_mandate_history']['field_comment_field_mandate_status_tr'] = array(
          '#type' => 'select',
          '#title' => "Mandate Status",
          '#options' => $status_options
        );
      }
      $form['field_mandate_history']['field_comment_comment_body'] = array(
        '#type' => 'text_format',
        '#rows' => 5,
        '#format' => 'advanced_input'
      );
  
      $form['#submit'][] = "fin_modals_special_submit_handler";
      
    } else {
      

      $href = 'modal/nojs/add';

      //Alterations by form
      $consultants_hired_link = "<div class='modal-links'><div class='left'>"
      . ctools_modal_text_button('Create New Consultant Firm', $href. '/consultant_firm/' . $form['#node']->nid . '/field_consultants_hired', 'Create New Consultant Firm', 'ctools-modal-fin-modals-contact-style')
      . "</div><div class='right'>"
      . ctools_modal_text_button('Create New Consultant Contact', $href. '/contact/' . $form['#node']->nid . '/field_consultants_hired', 'Create New Contact', 'ctools-modal-fin-modals-contact-style')
      . "</div></div>";
    
      $managers_hired_link = "<div class='modal-links'>"
      . ctools_modal_text_button('Create New Manager Firm', $href. '/manager_firm/' . $form['#node']->nid . '/field_managers_hired', 'Create New Manager Firm', '')
      . "</div>";
      
      if($form_id == "mandate_node_form"){
        $form['field_consultants_terminated']['und']['#suffix'] = "<div class='modal-links'>" . ctools_modal_text_button('Create New Consultant Contact', $href. '/contact/' . $form['#node']->nid . '/field_consultants_hired', 'Create New Contact', 'ctools-modal-fin-modals-contact-style') . "</div>";
    
      }elseif($form_id == "plan_node_form"){
        //$form['field_address']['und'][0]['field_address']['widget']['phone_block']['phone_number']['phone_number']['#title'] = "Main Number";
        $form['field_consultant_roster_fc']['und']['#suffix'] =
        "<div class='modal-links'>" . ctools_modal_text_button('Create New Consultant Contact', $href. '/contact/' . $form['#node']->nid . '/field_consultants_hired', 'Create New Contact', 'ctools-modal-fin-modals-contact-style') . "</div>";
        //$form['field_managers_hired']['und']['#suffix'] =  $managers_hired_link;
        if (!empty($form['#node']->nid)) {
          $form['field_plan_contacts_embed']['und'][0]['#suffix'] =  '<span class="modal-make-contact">'
          . ctools_modal_text_button('Create New Plan Contact', $href. '/contact/' . $form['#node']->nid . '/field_plan_contacts_embed', 'Create New Contact', 'ctools-modal-fin-modals-contact-style') . '</span>';
        }
      }elseif($form_id == 'manager_firm_node_form') {
        $form['field_sub_manager_firms_er']['und']['#suffix'] = $managers_hired_link;
        $form['field_manager_of_managers']['und']['#suffix'] = ctools_modal_text_button('Create New Manager Contact', $href. '/contact/' . $form['#node']->nid . '/field_manager_of_managers', 'Create New ManagerContact', 'ctools-modal-fin-modals-contact-style');

      }elseif($form_id == 'consultant_firm_node_form') {
        $form['field_main_office_ev']['und'][0]['#suffix'] = ctools_modal_text_button('Create New Office', $href. '/office/' . $form['#node']->nid . '/field_main_office_ev', 'Create New Office', 'ctools-modal-fin-modals-contact-style');
      } elseif($form_id == 'comment_form') {
        if (!empty($form_state['ajax']) && $form_state['ajax']) {
          $comment = $form_state['comment'];
          if(!$comment->cid) {
            $form['#action'] = url('modal/' . $comment->nid . '/comment/nojs');
            $form['actions']['submit']['#value'] = "Add New Comment";
          } else {
            $form['#action'] = url('modal/' . $comment->nid . '/comment/nojs/' . $comment->cid);
          }
        }
      } elseif ($form_id == 'contact_node_form') {
        //$form['field_address']['und'][0]['field_address']['widget']['phone_block']['phone_number']['phone_number']['#title'] = "Main Number";
      } elseif ($form_id == 'office_node_form') {
        //$form['field_address']['und'][0]['field_address']['widget']['phone_block']['phone_number']['phone_number']['#title'] = "Main Number";
      }
    }
  }
}

/**
 * Callback function for the rendered form
 */
function fin_modals_node_add_modal_callback($js = FALSE) {
  global $user;
  $node_type = arg(3);
  if (!$js) return "Javascript required";

  ctools_include('ajax');
  ctools_include('modal');

  // Create a blank node object here. You can also set values for your custom fields here as well.
  switch($node_type){
    case "mandate":
      $type =  "mandate";
      break;
    case "contact":
    $type =  "contact";
      break;
    case "manager_firm":
      $type = "manager_firm";
      break;
    case "consultant_firm":
      $type = "consultant_firm";
    break;
    case "office":
      $type = "office";
    break;    
    case "plan_manager":
      break;
    case "plan":
      $type = "plan";
      break;
    default:
      $type =  "plan_manager";
      break;
      
  }
  $node = (object) array(
    'uid' => $user->uid, 
    'name' => (isset($user->name) ? $user->name : ''), 
    'type' => $type, 
    'language' => LANGUAGE_NONE,
  );
  $field = arg(5);
  if (arg(4)) {
    //We have a parent node that we will be updating
    $node->parent_nid = arg(4);
    
    //Build the appropriate paragraph entities and preset choices in the new node form
    if ($type == 'contact') {
      if (arg(5)) {
        if (arg(5) == 'field_consultants_hired' || arg(5) == 'field_consultant_contacts_embed' || arg(5) == 'consultant-contact') {
          $paragraph = new ParagraphsItemEntity(array('field_name' => 'field_job_history', 'bundle' => 'consultant_contact'));
          $paragraph->is_new = TRUE;
          $paragraph->field_consultant_firm_er[$node->language][0]['target_id'] = arg(4);
          $paragraph->setHostEntity('node', $node);
        } elseif (arg(5) == 'field_plan_contacts_embed' || arg(5) == 'plan-contact') {
          $paragraph = new ParagraphsItemEntity(array('field_name' => 'field_job_history', 'bundle' => 'plan_contact'));
          $paragraph->is_new = TRUE;
          $paragraph->field_plan_er[$node->language][0]['target_id'] = arg(4);
          $paragraph->setHostEntity('node', $node);
        } elseif  (arg(5) == 'field_manager_of_managers') {
          $paragraph = new ParagraphsItemEntity(array('field_name' => 'field_job_history', 'bundle' => 'manager_contact'));
          $paragraph->is_new = TRUE;
          $paragraph->field_manager_firm_er[$node->language][0]['target_id'] = arg(4);
          $paragraph->setHostEntity('node', $node);
        }
      }
    } elseif ($type == 'mandate') {
      if (arg(5)) {
        if (arg(5) == 'consultant-mandate') {
          $node->field_consultant_firm_er[$node->language][0]['target_id'] = arg(4);
        } elseif (arg(5) == 'manager-mandate') {
          $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_managers_hired'));
          $field_collection_item->setHostEntity('node', $node);
          $field_collection_item->field_manager_firm_er[$node->language][0]['target_id'] = arg(4);
        } elseif (arg(5) == 'plan-mandate') {
          $node->field_plan_er[$node->language][0]['target_id'] = arg(4);
        } 
      } else {
        $node->field_plan_er[$node->language][0]['target_id'] = arg(4);
      }
    } elseif ($type == 'office') {
      $node->field_consultant_firm_er[$node->language][0]['target_id'] = arg(4);
      
    } elseif ($type == 'plan') {
      if (arg(5)) {
        if (arg(5) == 'consultant-plan') {
          $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_consultants_hired'));
          $field_collection_item->setHostEntity('node', $node);
          $field_collection_item->field_consultant_firm_er[$node->language][0]['target_id'] = arg(4);
        } elseif (arg(5) == 'manager-plan') {
          $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_managers_hired'));
          $field_collection_item->setHostEntity('node', $node);
          $field_collection_item->field_manager_firm_er[$node->language][0]['target_id'] = arg(4);
        }  
      }
    }
  }  

  $form_state = array(
    'title' => t('Add ' . $type),
    'ajax' => TRUE,
  );
  $form_state['build_info']['args'] = array($node);
  $output = ctools_modal_form_wrapper($type . '_node_form', $form_state);
     
  if (!empty($form_state['executed'])) {
    $output = array();
    
    if(!empty($node->title)){
      $value = $node->title . ' (' . $node->nid . ')';
    } else {
      $value = $form_state['node']->title  . ' (' . $form_state['node']->nid . ')';
    }
    
    $new_field_contact_firm = '<input type="text" maxlength="1024" size="" value="' . $value . '" name="field_consultant_roster[und][0][field_consultant_firm_er][und]" 
      id="edit-field-consultant-roster-und-0-field-consultant-firm-er-und" class="fluid form-text form-autocomplete ajax-processed" 
      autocomplete="OFF" aria-autocomplete="list">';
      
    $new_field = '<input type="text" maxlength="1024" size="" value="' . $value . '" name="field_consultant_firm_er[und]" 
    id="edit-field-consultant-firm-er-und" class="fluid form-text form-autocomplete ajax-processed" 
    autocomplete="OFF" aria-autocomplete="list">';
    // Close the modal
    
    $commands = array();
    ctools_add_js('ajax-responder');
    if($node_type == 'contact'){
      if ($field == 'field_consultants_hired') {
        $option = '<option value="' . $value . '"> ' . $form_state['node']->title . '</option>';
        $commands[] = ajax_command_append('.field-name-field-consultant-contact-er select',$option);
        $commands[] = ajax_command_invoke('.field-name-field-consultant-contact-er select', 'trigger', array('chosen:updated'));
      }
      if (!empty($node->parent_nid) && $field == 'field_consultant_contacts_embed') {
        $contact_view = views_embed_view('reference_views', 'eva_plan_contact_edit', $node->parent_nid);
        $commands[] = ajax_command_replace('#edit-field-plan-contacts-embed', $contact_view);
      }
      if ($field == 'plan-contact' || $field == 'plan-mandate' || $field = 'consultant-contact') {
        $commands[] = ctools_ajax_command_reload();
      }
    } elseif ($node_type == 'plan') {
        $commands[] = ctools_ajax_command_reload();
    } elseif ($node_type == 'mandate') {
        $commands[] = ctools_ajax_command_reload();
    } elseif ($node_type == 'consultant_firm') {
      if ($field == 'field_consultant_firm_er') {
        $new_manager_field = '<input class="fluid form-text form-autocomplete" type="text" id="edit-field-consultants-hired-und-0-field-consultant-firm-er-und-0-target-id"
        name="field_consultants_hired[und][0][field_consultant_firm_er][und][0][target_id]" value="' . $value . '" size="" maxlength="1024" autocomplete="OFF" aria-autocomplete="list">';
        $commands[] = ajax_command_replace('#edit-field-consultants-hired-und-0-field-consultant-firm-er-und-0-target-id', $new_manager_field);
      }
    } elseif ($node_type == 'office'){
      $commands[] = ctools_ajax_command_reload();
    }
    
    print ajax_render($commands);
    exit;
  }

  print ajax_render($output);  
  exit;
}

/*
function fin_modals_ajax_render_alter(&$commands) {
}

*/
/**
 *Special submit handler for mandates, plans, and manger firms
 *  Allows us to add a new commment to a new node
 */
function fin_modals_special_submit_handler($form, &$form_state) {
  $comment_values = $form_state['values']['field_mandate_history'];
  //$date = strtotime($comment_values['date']);
  $new_comment_array = array(
    'subject' => $comment_values['field_comment_subject'],
    'date' => $comment_values['date'],
    'status' => !empty($comment_values['field_comment_field_mandate_status_tr'])?$comment_values['field_comment_field_mandate_status_tr']:false,
    'body' => $comment_values['field_comment_comment_body']['value']
  );
  $new_comment_string = serialize($new_comment_array);
  $form_state['values']['field_serialized_comment']['und'][0]['value'] = $new_comment_string;
}

/**
 *This strips the comment out of the serialized field and creates a comment
 */
function fin_modals_node_insert($node) {
  
  //In theory, this should only be true when replicating a mandate, not when creating one.
  if (!empty($node->type) && $node->type == "mandate" && !empty($node->replicate_comments) && $node->replicate_comments == 1 && $node->source_nid) {
    $sql = "SELECT cid FROM comment WHERE nid = " . $node->source_nid . " ORDER BY created ASC";
    $comment_result = db_query($sql);
    foreach ($comment_result as $rec) {
      $source_comment = comment_load($rec->cid);
      $new_comment = new stdClass();
      $new_comment->nid = $node->nid;
      $new_comment->uid = $node->uid;
      $new_comment->cid = 0;
      $new_comment->pid = 0;
      $new_comment->name = $node->name;
      $new_comment->is_anonymous = 0;
      $new_comment->status = COMMENT_PUBLISHED;
      $new_comment->language = $node->language;
      $new_comment->subject = $source_comment->subject;
      $new_comment->comment_body[$node->language][0]['value'] = $source_comment->comment_body[$node->language][0]['value'];
      $new_comment->comment_body[$node->language][0]['format'] = $source_comment->comment_body[$node->language][0]['format'];
      if ($node->type == 'mandate') {
        $new_comment->field_mandate_status_tr = $source_comment->field_mandate_status_tr;
      }
      if (!empty($source_comment->field_date)) {
        $new_comment->field_date = $source_comment->field_date;
      }
      comment_submit($new_comment);
      comment_save($new_comment);
    }
  } else {
    //THIS is for creating one
    if (($node->type == 'mandate' || $node->type == 'plan' || $node->type == 'manager_firm') && $node->is_new == 1) {
      if(!empty($node->field_serialized_comment[$node->language][0]['value'])) {
        $comment_values = unserialize($node->field_serialized_comment[$node->language][0]['value']);
        $comment = new stdClass();
        $comment->nid = $node->nid;
        $comment->uid = $node->uid;
        $comment->cid = 0;
        $comment->pid = 0;
        $comment->name = $node->name;
        $comment->is_anonymous = 0;
        $comment->status = COMMENT_PUBLISHED;
        $comment->language = LANGUAGE_NONE;
        $comment->subject = $comment_values['subject'];
        $comment->comment_body[$comment->language][0]['value'] = $comment_values['body'];
        $comment->comment_body[$comment->language][0]['format'] = 'advanced_input';
        if ($node->type == 'mandate' && $comment_values['status'] != '_none') {
          $comment->field_mandate_status_tr[$comment->language][0]['tid'] = $comment_values['status'];
        }
        $comment->field_date[$comment->language][0] = array(
          'value' => $comment_values['date'],
          'timezone' => 'America/New_York',
          'timezone_db' => 'UTC',
          'date_type' => 'datetime'
        );
        comment_submit($comment);
        comment_save($comment);
      }
    }
  }
}

/**
 *EDIT comment form
 */
function fin_modals_edit_callback($nid, $ajax, $cid) {
  if ($cid) {
    $comment = comment_load($cid);
  }
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Edit Comment'),
      'cid' => $cid,
      'comment' => $comment,
    );
    $form_state['build_info']['args'][] = $comment;

    $commands = ctools_modal_form_wrapper('comment_form', $form_state, $comment);

    if (!empty($form_state['executed'])) {
      ctools_add_js('ajax-responder');
      $commands = array();
      $commands[] = ctools_modal_command_dismiss();
      $commands[] = ctools_ajax_command_reload();
    }

    print ajax_render($commands);
  }else {
    $form_state = array(
      'comment' => $comment,
    );
    return drupal_get_form('comment_form', $form_state, $comment);
  } 
}

/**
 *Lousy place to put this, but it has to go somewhere
 */
function fin_modals_node_validate($node, $form, &$form_state) {
  if ($node->type == 'plan') {
    $index = 0;
    foreach ($form_state['values']['field_asset_allocation_history']['und'] as $allocation) {
      if (!empty($allocation['field_allocation_total']['und'][0]['value'])) {
        if ($allocation['field_allocation_total']['und'][0]['value'] != 100) {
           form_set_error('field_asset_allocation_history][und][' . $index . '[field_allocation_total','Asset Allocation MUST add up to 100%!');
        }
      }
      $index++;
    }
  }
  if ($node->type == 'mandate') {
    if (!empty($form_state['values']['field_managed_amount']['und'][0]['value']) && $form_state['values']['field_managed_amount']['und'][0]['value'] != $form_state['values']['field_account_size']['und'][0]['value']) {
      form_set_error('field_managed_amount','Managed Amount MUST equal Account Size');
    }
  }
}


/**
 * This hook is called at the end of the operations
 * of replicate_clone_entity() function, allowing to alter the replicate
 * before it is return to the caller. This function will apply to all
 * replicated entities.
 *
 * @param object $replica
 *   Reference to the fully loaded entity object being saved (the clone) that
 *   can be altered as needed.
 * @param string $entity_type
 *   Type of the entity containing the field.
 * @param object $original
 *   The fully loaded original entity object.
 *
 * @see replicate_clone_entity()
 * @see drupal_alter()
 */
function fin_modals_replicate_entity_alter(&$replica, $entity_type, $original) {
  if (!empty($original->type) && $original->type == "mandate") {
    global $user;
    //Get rid of the serial comment
    unset($replica->field_serialized_comment);
    $sql = "SELECT MAX(field_mandate_number_value) as current from field_data_field_mandate_number";
    $result = db_query($sql);
    $temp = $result->fetchObject();
    $current = $temp->current;
    $new = $current + 1;
    $replica->field_mandate_number['und'][0]['value'] = $new;
    $new_title = "Mandate-" . $new;
    $replica->title = $new_title;
    $replica->uid = $user->uid;
    $replica->name = $user->name;
    $replica->field_date['und'][0] = array(
      'value' => date('Y-m-d', strtotime('now')),
      'timezone' => 'America/New_York',
      'timezone_db' => 'UTC',
      'date_type' => 'datetime'
    );
    $replica->title_field['und'][0]['value'] = $new_title;
    $replica->title_field['und'][0]['safe_value'] = $new_title;
    $replica->path['alias'] = 'mandates/' . str_replace(' ', '-', $new_title);
    $replica->replicate_comments = true;
    $replica->source_nid = $original->nid;
  }
}
