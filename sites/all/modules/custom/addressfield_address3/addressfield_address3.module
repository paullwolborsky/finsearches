<?php

/**
 * @file
 * Add additional Address 3 fields to addressfield.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function addressfield_address3_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}


/**
 * Implements hook_field_info_alter().
 *
 * Add address3 related properties on addressfield.
 */
function addressfield_address3_field_info_alter(&$field_info) {
  if (isset($field_info['addressfield'])) {
    $field_info['addressfield']['property_callbacks'][] = 'addressfield_address3_property_info_callback';
  }
}


/**
 * Callback to alter the property info of addressfield.
 */
function addressfield_address3_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['property info'] += addressfield_address3_data_property_info();
}

/**
 * Defines additional properties of the addressfield data structure.
 */
function addressfield_address3_data_property_info($name = NULL) {
  // Build an array of basic property information for the addressfield.
  $properties = array(
    'address3' => array(
      'label' => t('Address 3'),
    ),
  );
  foreach ($properties as $key => &$value) {
    $value += array(
      'description' => $name ? t('!label of field %name', array('!label' => $value['label'], '%name' => $name)) : '',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    );
  }

  return $properties;
}


/**
 * Implements hook_field_attach_presave().
 *
 * Store additional address fields serialized in addressfield data column.
 */
function addressfield_address3_field_attach_presave($entity_type, $entity) {
  $addressfields = addressfield_address3_addressfield_types();
  foreach ($addressfields as $field_name) {
    if (isset($entity->$field_name)) {
      $field = field_info_field($field_name);
      list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
      $instance = field_info_instance($entity_type, $field_name, $bundle);
      $default_fields = array_keys(addressfield_default_values($field, $instance));
      $default_fields[] = 'element_key';
      foreach ($entity->$field_name as $lang_code => $fields) {
        foreach ($fields as $delta => $fieldset) {
          $data = array();
          foreach ($fieldset as $field_key => $field_value) {
            // Compare fields with addressfield default fields and store any
            // additional fields in data.
            if (!in_array($field_key, $default_fields)){
              // Store additional field value
              $data[$field_key] = $field_value;
            }
          }
          if (!empty($data)){
            $entity->{$field_name}[$lang_code][$delta]['data'] = serialize($data);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_load().
 *
 * Load and set additional addressfield field values from serialized data
 * column.
 */
function addressfield_address3_field_attach_load($entity_type, $entities, $age, $options){
  $addressfields = addressfield_address3_addressfield_types();
  $address3_elements = drupal_map_assoc(array(
    'address3',
  ));

  foreach ($entities as $entity) {
    foreach ($addressfields as $field_name) {
      if (empty($entity->{$field_name})) {
        continue;
      }

      foreach ($entity->$field_name as $lang_code => $fields) {
        foreach ($fields as $delta => $fieldset) {
          // Fill default values for pre-addressfield_address addresses to keep
          // Commerce Order from duplicating address.
          if (empty($fieldset['data'])) {
            $fieldset['data'] = serialize(array_fill_keys($address3_elements, ''));
          }

          // Unserialize data, else skip if string
          if (($data = unserialize($fieldset['data'])) && is_array($data)) {
            // Store unserialized data values in additional fields
            $address3_data = array_intersect_key($data, $address3_elements);
            $entity->{$field_name}[$lang_code][$delta] = array_merge($fieldset, $address3_data);
          }
        }
      }
    }
  }
}

/**
 * Returns an array of the field names of any addressfields.
 */
function addressfield_address3_addressfield_types() {
  if (!isset($addressfields)) {
    static $addressfields;
    $result = db_query("SELECT field_name FROM {field_config} WHERE type = 'addressfield'");
    $addressfields = array();
    foreach($result as $row) {
      $addressfields[] = $row->field_name;
    }
  }
  return $addressfields;
}


/**
 * Implements hook_token_info_alter().
 *
 * Adds in additional tokens for address3 fields.
 */
function addressfield_address3_token_info_alter(&$data) {
  $address_field = &$data['tokens']['address-field'];
  $address_field['address3'] = array(
    'name' => t('Address 3'),
    'description' => t('The 3rd address field value.'),
  );
  return $data;
}

/**
 * Implements hook_tokens().
 *
 * Replace address3 tokens with actual values from an address field.
 */
function addressfield_address3_tokens($type, $tokens, $data = array(), $options = array()) {
  if (isset($options['language'])) {
    $language_code = $options['language']->language;
  }
  else {
    $language_code = LANGUAGE_NONE;
  }

  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'address-field' && !empty($data['address-field'][$language_code]) && is_array($data['address-field'][$language_code])) {
    $address = reset($data['address-field'][$language_code]);
    foreach ($tokens as $name => $original) {
      if ($name == 'address3') {
        // Token names are just the field properties with dashes, so we can skip
        // having to do any sort of if/switching on them.
        $property = str_replace('-', '_', $name);
        $replacements[$original] = $sanitize ? check_plain($address[$property]) : $address[$property];
      }
    }
  }

  return $replacements;
}

function _addressfield_address3_render_address($format) {
  $address = $format['#address'];
  $format['address3_block'] = array();

  if (!empty($address['address3'])) {
    $format['address3_block']['address3'] = array(
      '#theme_wrappers' => array('addressfield_address3_container'),
      '#title' => t('Address 3'),
      '#type' => 'addressfield_container',
      '#attributes' => array('class' => array('address3')),
      '#tag' => 'div',
      '#children' => check_plain($address['address3']),
    );
  }
  return $format;
}


/**
 * Implements hook_field_widget_info().
 */
function addressfield_address3_field_widget_info_alter(&$widgets) {
  $widgets['addressfield_standard']['settings']['address3_fields'] = array();
}

function addressfield_address3_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {

  if ($form['instance']['widget']['type']['#value'] == 'addressfield_standard') {
    $entity_type = $form['instance']['entity_type']['#value'];
    $field_name = $form['instance']['field_name']['#value'];
    $bundle =  $form['instance']['bundle']['#value'];

    $field = field_info_instance($entity_type, $field_name, $bundle);
    $settings = $field['widget']['settings'];
    $form['instance']['widget']['settings']['address3_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Enable Address 3 field'),
      '#options' => array(0=>0,1=>1),
      '#states' => array(
        'visible' => array(
          ':input[name="instance[widget][settings][format_handlers][address3]"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => $settings['address3_fields'],
    );
  }
}


/**
 * Implementation of hook_theme().
 */
function addressfield_address3_theme() {
  $hooks['addressfield_address3_container'] = array(
    'render element' => 'element',
  );
  return $hooks;
}

/**
 * Render a container for a set of address fields.
 */
function theme_addressfield_address3_container($variables) {
  $element = $variables['element'];

  $element['#children'] = trim($element['#children']);
  if (strlen($element['#children']) > 0) {
    $output = '<' . $element['#tag'] . drupal_attributes($element['#attributes']) . '>';
    $output .= '<span class="addressfield-address3-label">' . $element['#title'] .': </span>' . $element['#children'] . '';
    $output .= '</' . $element['#tag'] . ">";
    return $output;
  }
  else {
    return '';
  }
}


