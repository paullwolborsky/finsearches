<?php

/**
 * @file misc modifications to finsearch
 */

/**
 * Implements hook_menu().
 */
function fin_mod_menu() {
  $items['autocomplete/state-autocomplete'] = array(
    'title' => 'State autocomplete',
    'page callback' => 'fin_mod_state_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  $items['autocomplete/city-autocomplete'] = array(
    'title' => 'State autocomplete',
    'page callback' => 'fin_mod_city_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Fuzzy array key matcher. Disabled as I don't think we need it.
 */
/* function fin_mod_fuzzy_array_key_exists($key_match, $array) {
  foreach($array as $key => $value) {
  if(strpos($key, $key_match)) {
  return TRUE;
  }
  }
  return FALSE;
  } */

/**
 * Recursively find field when BEF enabled.
 */
function fin_mod_bef_recursive(&$form, &$containers = NULL) {
  if ($containers == NULL) {
    $containers = &$form['filters']['children']['container-root'];
  }

  foreach ($containers as $container_key => &$container) {
    if (is_array($container) && array_key_exists('field_address_administrative_area', $container)) {
      $container['field_address_administrative_area']['#autocomplete_path'] = 'autocomplete/state-autocomplete';
    }
    if (is_array($container) && array_key_exists('field_address_locality', $container)) {
      $container['field_address_locality']['#autocomplete_path'] = 'autocomplete/city-autocomplete';
    }
    if (strstr($container_key, "container")) {
      fin_mod_bef_recursive($form, $container);
    }
  }
}

/**
 * Implements hook_form_alter
 */
function fin_mod_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'mandate_node_form') {
    global $user;
    $form['field_mandate_comments_fc']['und'][0]['field_author_er']['und']['#default_value'] = t($user->name . ' (' . $user->uid . ')');
  }
  else if ($form_id == 'views_exposed_form') {
    fin_mod_bef_recursive($form);
  }
}

/**
 * Custom autocomplete function for states dropdown.
 */
function fin_mod_state_autocomplete($state = '') {
  module_load_include("inc", "addressfield", "addressfield.administrative_areas");
  $all_states = array();
  // Set statically to save time.
  $state_length = 10;
  $countries = _addressfield_get_administrative_areas_defaults();
  foreach ($countries as $country => $states) {
    fin_mod_filter_regions($states, $state);
    $all_states = array_merge($all_states, $states);
  }
  asort($all_states);
  $all_states = array_slice($all_states, 0, $state_length);
  drupal_json_output($all_states);
}

/**
 * Filters regions by string.
 */
function fin_mod_filter_regions(&$all_regions, $region) {
  foreach ($all_regions as $region_key => $region_name) {
    if (stripos($region_name, $region) === FALSE) {
      unset($all_regions[$region_key]);
    }
  }
}

/**
 * Custom autocomplete function for city dropdown.
 */
function fin_mod_city_autocomplete($city = '') {
  $all_cities = db_query("SELECT DISTINCT field_address_locality FROM field_data_field_address AS f")->fetchCol();
  $city_length = 10;
  fin_mod_filter_regions($all_cities, $city);
  asort($all_cities);
  $all_cities = array_slice($all_cities, 0, $city_length);
  drupal_json_output($all_cities);
}

function fin_mod_theme_registry_alter(&$theme_registry) {
  $theme_registry['hierarchical_select_select']['function'] = 'fin_mod_hierarchical_select_select';
  $theme_registry['hierarchical_select_select']['includes'] = array();
  unset($theme_registry['hierarchical_select_select']['file']);
}

function fin_mod_hierarchical_select_select($variables) {
  $element = $variables['element'];
  if (isset($element['#options']['label_1']) && $element['#options']['label_1'] == '') {
    $element['#options']['label_1'] = '<none>';
  }
  element_set_attributes($element, array('id', 'name', 'size'));
  _form_set_class($element, array('form-select'));

  return '<select' . drupal_attributes($element['#attributes']) . '>' . _hierarchical_select_options($element) . '</select>';
}

function fin_mod_hierarchical_select_ajax_commands_alter(&$commands, &$context) {
  $context['element']['hierarchical_select']['selects'][1]['#options']['label_1'] = '<none>';
  $context['element']['#printed'] = FALSE;
  $output = theme('status_messages') . drupal_render($context['element']);
  $commands[0]['output'] = $output;
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter()
 */
function fin_mod_block_view_user_online_alter(&$data, $block = array()) {
  global $user;

  $profile = profile2_load_by_user($user->uid, 'main');
  $pid = 0;
  if (!empty($profile->pid)) {
    $pid = $profile->pid;
  }

  if (user_access('access content')) {
    // Count users active within the defined period.
    $interval = REQUEST_TIME - variable_get('user_block_seconds_online', 900);

    // Perform database queries to gather online user lists. We use s.timestamp
    // rather than u.access because it is much faster.
    $authenticated_count = db_query(<<<QUERY_END
   
SELECT COUNT(DISTINCT s.uid)
FROM {sessions} s

INNER JOIN {profile} p ON s.uid = p.uid

INNER JOIN {field_data_field_pf_organization_er} org
  ON p.pid = org.entity_id

INNER JOIN {field_data_field_pf_organization_er} my_org
  ON org.field_pf_organization_er_target_id = my_org.field_pf_organization_er_target_id

WHERE s.timestamp >= :timestamp
AND s.uid > 0
AND my_org.entity_id = :profile_id
QUERY_END
        , array(':timestamp' => $interval, ':profile_id' => $pid))->fetchField();

    $output = '<p>' . format_plural($authenticated_count, 'There is currently 1 user online.', 'There are currently @count users online.') . '</p>';

    // Display a list of currently online users.
    $max_users = variable_get('user_block_max_list_count', 10);
    if ($authenticated_count && $max_users) {
      $items = db_query_range(<<<QUERY_END
     
SELECT u.uid, u.name, MAX(s.timestamp) AS max_timestamp
FROM {users} u
INNER JOIN {sessions} s ON u.uid = s.uid
          
INNER JOIN {profile} p ON s.uid = p.uid

INNER JOIN {field_data_field_pf_organization_er} org
  ON p.pid = org.entity_id

INNER JOIN {field_data_field_pf_organization_er} my_org
  ON org.field_pf_organization_er_target_id = my_org.field_pf_organization_er_target_id

WHERE s.timestamp >= :interval
AND s.uid > 0
AND my_org.entity_id = :profile_id
GROUP BY u.uid, u.name
ORDER BY max_timestamp DESC 
QUERY_END
          , 0, $max_users, array(':interval' => $interval, ':profile_id' => $pid))->fetchAll();
      $output .= theme('user_list', array('users' => $items));
    }

    $data['subject'] = t('Who\'s online');
    $data['content'] = $output;
  }
}

/**
 * Implements hook_views_api().
 */
function fin_mod_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function fin_mod_field_widget_info_alter(&$info) {
  if (module_exists('fin_options')) {
    $info['fin_options_select']['field types'][] = 'entityreference';
  }
}

/**
 * Implements hook_node_presave().
 */
function fin_mod_node_presave($node) {
  $general = FALSE;
  $outsourced = FALSE;
  $consultant = array();
  if ($node->type == 'plan') {
    // Maybe switch to entity_metadata_wrapper - was having trouble accessing
    // FC values via it though
    if (!empty($node->field_consultant_roster_fc)) {
      foreach ($node->field_consultant_roster_fc['und'] as $fc) {
        $term = taxonomy_term_load($fc['field_consultant_type_tr']['und'][0]['tid']);
        if ($term->name == 'General') {
          if (!empty($fc['field_consultant_firm_er'])) {
            $consultant['general'] = $fc['field_consultant_firm_er']['und'][0];
          }
        }
        else if ($term->name == 'Outsourced CIO') {
          if (!empty($fc['field_consultant_firm_er'])) {
            $consultant['outsourced'] = $fc['field_consultant_firm_er']['und'][0];
          }
        }
      }
      if (!empty($consultant['general'])) {
        $node->field_consultant_roster_main_er['und'][0]['target_id'] = $consultant['general'];
      }
      else if (!empty($consultant['outsourced'])) {
        $node->field_consultant_roster_main_er['und'][0]['target_id'] = $consultant['outsourced'];
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function fin_mod_query_node_access_alter($query) {
  // Needed to remove conditions from the query object.
  $conditions = &$query->conditions();
  _fin_mod_subquery_modify($query, $conditions);
}

/**
 * Modifies the subquery and if the EXISTS condition exists, switches it with
 * our modified EXISTS OR IS NULL condition.
 */
function _fin_mod_subquery_modify(&$query, &$conditions) {
  foreach ($conditions as $subquery_key => &$subquery) {
    if (is_array($subquery)) {
      foreach ($subquery as &$inside_subquery) {
        if (is_object($inside_subquery)) {
          $subquery_conditions = $inside_subquery->conditions();
          foreach ($subquery_conditions as &$statement) {
            if (is_array($statement)) {
              $field = $statement['field'];
              if ($subquery['operator'] == 'EXISTS') {
                fin_mod_add_and_remove_condition($query, $conditions, $field, $inside_subquery, $subquery_key);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Does the actual removal of the condition and replacement with EXISTS OR IS
 * NULL.
 */
function fin_mod_add_and_remove_condition(&$query, &$conditions, $field, $inside_subquery, $subquery_key) {
  if (is_string($field) && (strpos($field, '=') !== false)) {
    if ($field != 'node.nid = na.nid' && $field != 'n.nid = na.nid') {
      unset($conditions[$subquery_key]);
      $values = explode("=", $field);
      foreach ($values as &$item) {
        $item = trim($item);
      }
      $query->condition(db_or()->condition($inside_subquery, "EXISTS")->isNull($values[0]));
    }
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
/*
function fin_mod_field_attach_view_alter(&$build, $context) {
  module_load_include("module", "ds");
  $entity_type = $build['#entity_type'];
  $bundle = $build['#bundle'];
  $view_mode = $context['view_mode'];
  $entity = $context['entity'];
  $layout = ds_get_layout($entity_type, $bundle, $view_mode);

  // Check on field/delta limit.
  if (isset($layout['settings']['limit'])) {
    foreach ($layout['settings']['limit'] as $field => $limit) {
      if (isset($build[$field])) {
        if ($limit === 'delta' && isset($entity->ds_delta) && isset($entity->ds_delta[$field])) {
          $delta = $entity->ds_delta[$field];
          foreach ($build[$field]['#items'] as $key => $item) {
            if ($key != $delta) {
              unset($build[$field][$key]);
            }
          }
        }
        else {
          $count = count($build[$field]['#items']);
          if ($count > $limit) {
            $build[$field]['#items'] = array_slice($build[$field]['#items'], 0, $limit);
          }
        }
      }
    }
  }

  // Add Display Suite display fields.
  $fields = ds_get_fields($entity_type);
  $field_values = ds_get_field_settings($entity_type, $bundle, $layout['view_mode']);

  foreach ($field_values as $key => $field) {

    // Ignore if this field is not a DS field.
    if (!isset($fields[$key])) {
      continue;
    }

    $field = $fields[$key];
    if (isset($field_values[$key]['format'])) {
      $field['formatter'] = $field_values[$key]['format'];
    }

    if (isset($field_values[$key]['formatter_settings'])) {
      $field['formatter_settings'] = $field_values[$key]['formatter_settings'];
    }
    $field_value = fin_mod_get_field_value($key, $field, $entity, $entity_type, $bundle, $view_mode, $build);
    if ($field_value == 'suppressed') {
      unset($build[$key]);
      return;
    }

    // Title label.
    if ($key == 'title' && $entity_type == 'node') {
      $node_type = node_type_get_type($entity);
      $field['title'] = function_exists('i18n_node_translate_type') ? i18n_node_translate_type($node_type->type, 'title_label', $node_type->title_label) : $node_type->title_label;
    }

    if (!empty($field_value) || (string) $field_value === '0') {

      // Special case for views.
      if (!empty($build['render_code_fields'])) {
        $build[$key] = $field_value;
      }
      else {
        $build[$key] = array(
          '#theme' => 'field',
          '#field_type' => 'ds',
          '#skip_edit' => TRUE,
          '#title' => $field['title'],
          '#weight' => isset($field_values[$key]['weight']) ? $field_values[$key]['weight'] : 0,
          '#label_display' => isset($field_values[$key]['label']) ? $field_values[$key]['label'] : 'inline',
          '#field_name' => $key,
          '#bundle' => $bundle,
          '#object' => $entity,
          '#entity_type' => $entity_type,
          '#view_mode' => $view_mode,
          '#access' => (variable_get('ds_extras_field_permissions', FALSE) && function_exists('ds_extras_ds_field_access')) ? ds_extras_ds_field_access($key, $entity_type) : TRUE,
          '#items' => array(
            0 => array(
              'value' => $field_value,
            ),
          ),
          0 => array(
            '#markup' => $field_value,
          ),
        );
      }
    }
  }

  $disable_css = FALSE;
  if (!empty($layout['settings']['layout_disable_css'])) {
    $disable_css = TRUE;
  }

  // Add path to css file for this layout and disable block regions if necessary.
  if (!$disable_css && isset($layout['css']) && !isset($loaded_css[$layout['path'] . '/' . $layout['layout'] . '.css'])) {
    // Register css file.
    $loaded_css[$layout['path'] . '/' . $layout['layout'] . '.css'] = TRUE;
    // Add css file.
    if (isset($layout['module']) && $layout['module'] == 'panels') {
      $build['#attached']['css'][] = $layout['path'] . '/' . $layout['panels']['css'];
    }
    else {
      $build['#attached']['css'][] = $layout['path'] . '/' . $layout['layout'] . '.css';
    }
  }
}
*/
/**
 * Essentially overrides DS.
 */
function fin_mod_get_field_value($key, $field, $entity, $entity_type, $bundle, $view_mode, $build = array()) {

  $field['field_name'] = $key;
  $field['entity'] = $entity;
  $field['entity_type'] = $entity_type;
  $field['bundle'] = $bundle;
  $field['view_mode'] = $view_mode;
  $field['build'] = $build;

  // Special case for ds_views which can handle custom fields now.
  if ($field['field_type'] != DS_FIELD_TYPE_PREPROCESS && $entity_type == 'ds_views') {
    $entity->preprocess_fields[] = $key;
  }

  switch ($field['field_type']) {

    case DS_FIELD_TYPE_PREPROCESS:
      $entity->preprocess_fields[] = $key;
      break;

    case DS_FIELD_TYPE_FUNCTION:
      if (isset($field['file'])) {
        include_once $field['file'];
      }
      return $field['function']($field);

    case DS_FIELD_TYPE_THEME:
      $format = (isset($field['formatter'])) ? $field['formatter'] : key($field['properties']['formatters']);
      return theme($format, $field);

    case DS_FIELD_TYPE_CODE:
      return ds_render_code_field($field);

    case DS_FIELD_TYPE_CTOOLS:
      return ds_render_ctools_field($field);

    case DS_FIELD_TYPE_BLOCK:
      return fin_mod_render_block_field($field);
  }
}

/**
 * Essentially overrides DS.
 */
function fin_mod_render_block_field($field) {
  // Invoke the block_view hook of the module.
  list($module, $delta) = explode('|', $field['properties']['block']);
  $block = module_invoke($module, 'block_view', $delta);

  // Get contextual links.
  $contextual_links = array();
  $contextual = module_exists('contextual') && user_access('access contextual links');
  if ($contextual) {
    if (isset($block['content']) && is_array($block['content']) && isset($block['content']['#contextual_links'])) {
      $contextual_links = $block['content']['#contextual_links'];
    }
  }

  // Render the block content.
  if (isset($block['content']) && is_array($block['content'])) {
    if (!empty($block['content']['#views_contextual_links_info']['views_ui']['view']->fin_mod_suppress)) {
      return 'suppressed';
    }
    $block['content'] = drupal_render($block['content']);
  }

  // Go through in case we have actual content.
  if (!empty($block['content'])) {

    // Make sure subject is set.
    if (!isset($block['subject'])) {
      $block['subject'] = '';
    }

    global $theme_key;
    if (module_exists('block')) {
      $full_block = db_query("SELECT * FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme", array(':module' => $module, ':delta' => $delta, ':theme' => $theme_key))->fetchObject();
    }
    if (!empty($full_block)) {
      if ($full_block->title == '<none>') {
        $block['subject'] = '';
      }
      elseif (!empty($full_block->title)) {
        $block['subject'] = $full_block->title;
      }
    }

    // i18n support.
    if (function_exists('i18n_block_block_view_alter')) {

      // Check language visibility.
      global $language;
      static $block_languages = FALSE;
      if (!$block_languages) {
        $block_languages = array();
        $result = db_query('SELECT module, delta, language FROM {i18n_block_language}');
        foreach ($result as $record) {
          $block_languages[$record->module][$record->delta][$record->language] = TRUE;
        }
      }
      if (isset($block_languages[$module][$delta]) && !isset($block_languages[$module][$delta][$language->language])) {
        return;
      }

      // Translate.
      if (!empty($full_block->i18n_mode)) {
        i18n_block_block_view_alter($block, $full_block);
        if (!empty($block['title'])) {
          $block['subject'] = $block['title'];
        }
      }
    }

    $block = (object) $block;
    switch ($field['properties']['block_render']) {
      case DS_BLOCK_TEMPLATE:
        $block->region = NULL;
        $block->module = $module;
        $block->delta = $delta;
        $elements = array('elements' => array('#block' => $block, '#children' => $block->content));
        // Add contextual links.
        if ($contextual) {
          $elements['elements'] += array('#contextual_links' => array_merge($contextual_links, array('block' => array('admin/structure/block/manage', array($block->module, $block->delta)))));
        }
        return theme('block', $elements);
        break;
      case DS_BLOCK_TITLE_CONTENT:
        return '<h2 class="block-title">' . $block->subject . '</h2>' . $block->content;
        break;
      case DS_BLOCK_CONTENT:
        return $block->content;
        break;
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function fin_mod_entity_presave($entity, $type) {
  if ($type == 'field_collection_item' && isset($entity->field_name) && $entity->field_name == 'field_consultant_roster_fc') {
    $entity = fin_mod_fc_phone_add($entity, $type);
  }
}

/**
 * Adds phone number to hidden phone number field on Field Collection Item.
 */
function fin_mod_fc_phone_add($entity, $type) {
  if (!empty($entity->field_consultant_contact_er)) {
    $contact_nid = $entity->field_consultant_contact_er['und'][0]['target_id'];
    $contact = node_load($contact_nid);
    if (!empty($contact->field_address) && !empty($contact->field_address['und'][0]['phone_number'])) {
      $ext = '';
      $data = unserialize($contact->field_address['und'][0]['data']);
      if (isset($data['phone_number_extension'])) {
        $ext = $data['phone_number_extension'];
      }
      $phone = $contact->field_address['und'][0]['phone_number'];
      if (!empty($ext)) {
        $phone = $phone . ' ' . $ext;
      }
      ;
    }
  }

  if (!isset($phone)) {
    $consultant_firm_nid = $entity->field_consultant_firm_er['und'][0]['target_id'];
    // Main Office is 337. Currently this is hard-coded but we may want to change that.
    $result = db_query("SELECT cf.entity_id FROM field_data_field_consultant_firm_er AS cf JOIN field_data_field_office_type_tr AS ot ON (cf.entity_id =  ot.entity_id) WHERE cf.bundle = 'office' AND ot.field_office_type_tr_tid = 337 AND cf.field_consultant_firm_er_target_id = :consultant_firm_nid", array("consultant_firm_nid" => $consultant_firm_nid))->fetchCol();
    $office_nid = reset($result);
    $office = node_load($office_nid);
    if (isset($office) && !empty($office->field_office_type_tr) && $office->field_office_type_tr['und'][0]['tid'] == 337) {
      if (!empty($office->field_address) && !empty($office->field_address['und'][0]['phone_number'])) {
        $ext = '';
        $data = unserialize($office->field_address['und'][0]['data']);
        if (isset($data['phone_number_extension'])) {
          $ext = $data['phone_number_extension'];
        }
        $phone = $office->field_address['und'][0]['phone_number'];
        if (!empty($ext)) {
          $phone = $phone . ' ' . $ext;
        }
      }
    }
  }
  if (isset($phone)) {
    $entity->field_phone['und'][0]['value'] = $phone;
  }
  return $entity;
}
