<?php
// $Id$

define('LANGUAGE_DEFAULT', 'en');

/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implementation of hook_menu().
 */
function fin_migrate_menu() {
  $items = array();

  $items['admin/content/custom-import'] = array(
    'title' => 'FIN D5-to-D7 import',
    'description' => 'Migrate data from D5 production to new D7 - Users, Search data, links between them.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fin_migrate_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function fin_migrate_form() {
  drupal_set_message('Are you sure you want to run the custom import script?  No going back without re-installing the database!!!', 'warning');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

function fin_migrate_form_submit($form, &$form_state) {
  ini_set('max_execution_time', 3600000);

  $batch = array(
    'title' => t('Importing data'),
    'operations' => _fin_migrate_operations(),
    'finished' => '_fin_migrate_done',
  );
  batch_set($batch);
}  

function _fin_migrate_operations() {
  $operations = array();
  $operations = array();
  $operations[] = array('_fin_migrate_do_migrate_users', array());
//  $operations[] = array('_fin_migrate_do_node_step1', array());
//  $operations[] = array('_fin_migrate_do_node_step2', array());

  //$operations[] = array('_fin_migrate_batch_users', array());
  //$operations[] = array('_fin_migrate_batch_users_stragglers', array());
  //$operations[] = array('_fin_migrate_batch_users', array());
  //$operations[] = array('_fin_migrate_do_migrate_users', array());
  //$operations[] = array('_fin_migrate_batch_nodes', array());
  //Now that we filled out all nodes, we can migrate relationships too
  //$operations[] = array('_fin_migrate_batch_ref', array());
  //Now that we migrated relationships, we have new ones to make on dst side
  //$operations[] = array('_fin_migrate_batch_back_ref', array());

  return $operations;
}
function _fin_migrate_done() {
  $message = "DONE";
  watchdog('FIN_MIGRATE', $message, array(), WATCHDOG_INFO);
}

function _get_nodemaps($mode='step1') {

/*
  create view at least w/mandate & plan { FundSize

  This is going to have to run at another stage. Do not put this in the same 'run set' as the others, it goes after the first round of nodes, before or after reference.

  This is because of the stupid comma-delimited FirmsHired field, which contains
  comma-delimited references that also determine how many entries there are in the
  manager firm history. As an added bonus, so is FirmHiredSize field.
*/
$nm_co = array(
    'office' => array(
      'params' => array(
        'oldtable' => 'tblconsultantoffices',
        'oldkeyfldname' => 'ConsultantOfficeID',
        'dst' => 'office',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantOfficeName'), 
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantOfficeName'),
        ),
        'lu2term' => array(
          'field_office_type_tr' => array('fldname'=>'OfficeType'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'reference' => array(
          'field_consultant_firm_er'=>array('fldname'=>'ConsultantFirmID'),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'ZIP'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  $nm_cf = array(
    'consultant firm' => array(
      'params' => array(
        'oldtable' => 'tblconsultantfirms',
        'oldkeyfldname' => 'ConsultantFirmID',
        'dst'=>'consultant_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantFirmName'),
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
          'field_aua' => array('fldname'=>'AUA'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'inactive2term' => array(
          'field_status_tr' => array('fldname'=>'Inactive'),
        ),
      ),
    ),
  );

  //'ldtable' => 'tblfunds',
  $nm_p = array(
    'plan' => array(
      'params' => array(
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'FundName'),
          ),
          'node-body' => array(
            'body' => array(),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'FundName'),
          'field_plan_acronym' => array('fldname'=>'Acronym'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink', 'title'=>'Placement Policy'),
        ),
        'lu2term' => array(
          'field_placement_policy_tr' => array('fldname'=>'PlacementPolicy'),
          'field_plan_type_tr' => array('fldname'=>'FundTypeID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
          'field_status_tr' => array('fldname'=>'Status', 'voc'=>'5'),
        ),          
        'text2email' => array(
           'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
        'collection' => array(
          'field_asset_allocation_history' => array(
            'params' => array(
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'finsearch_asset_allocations',
                  'rowkeyfldname' => 'allocation_id',                  
                  'key-alias' => 'firm_id',
                  'onerow' => 'TRUE',
                  'onerowkeyname' => 'asset_class_id',
                  'onerowfldname' => 'percentage',
                ),
                'fields' => array(
                  'asset-allocation' => array(
                    'automatically-determined' => array('fldname'=>'percentage', 'keyfldname'=>'asset_class_id'),
                  ),
                ),
              ),
            ),              
          ),
          'field_consultants_hired' => array(
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundconsultants',
                  'rowkeyfldname' => 'FundConsultantID',
                ),
                'fields' => array(
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_managers_hired' => array(
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundmanagers',
                  'rowkeyfldname' => 'FundManagerID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_plan_size_history' => array(
            'params' => array(
            ),
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundSizeAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_foia_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                ),
                'fields' => array(
                  'mixed2link' => array(
                    'field_foia_form' => array('fldname'=>'FOIAForm')
                  ),
                  'foia2notes' => array(
                    'field_foia_notes' => array('names'=>array('FOIAMethod', 'FOIAForm'))
                  ),
                  'default' => array(
                    'field_full_name' => array('fldname'=>'FOIAContactName'),
                    'field_foia_required' => array('fldname'=>'FOIA'),
                    'field_foia_date' => array('fldname'=>'FOIADate'),                  
                  ),
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );

//////////////////////////////////////////////////////////////
  $nm_contact = array(
    'contact' => array(
      'params' => array(
        'dst'=>'contact',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'job-history' => array(
          'field_job_history' => array(
            'params' => array(
              'sourcearray' => 'global_empDates',
            ),
            'bundles' => array(
              'consultant_contact' => array(
                'params' => array(
                  'bundle'=>'consultant_contact',
                  'rowkeyfldname'=>'ConsultantContactID',
                ),
                'fields' => array(
                  'default'=>array(
                    'field_job_title'=>array('fldname'=>'Title'),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantType'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ConsultantContactID', 
                      'tbl'=>'tblconsultantcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
              'manager_contact' => array(
                'params' => array(
                  'bundle'=>'manager_contact',
                  'rowkeyfldname' => 'ManagerContactID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ManagerContactID', 
                      'tbl'=>'tblmanagercontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ContactType'),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
              'plan_contact' => array(
                'params'=> array(
                  'oldtable' => 'tblFundContacts',
                  'oldkeyfldname' => 'FundContactID',
                  'bundle' => 'plan_contact',
                  'sort' => array('fldname'=>'field_employment_date'),
                ),
                'fields' => array(
                  'default' => array(
                    'title_field' => array('fldname'=>'ContactName'),
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'FundContactID', 
                      'tbl'=>'tblFundcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),       
                  'address' => array(
                    'field_address' => array(
                      'params' => array(
                        'oldtable' => 'tblManagerFirms',
                        'oldkeyfldname' => 'ManagerFirmID',
                      ),
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),     
      ),
    ),
  );

//////////////////////////////////////////////////////////////

// manager contacts have no address, special handling, use manager firm
// fundcontact Inactive,   
  $nm_cc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblconsultantcontacts',
        'oldkeyfldname' => 'ConsultantContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'bundle'=>'consultant_contact',
                  'rowkeyfldname'=>'ConsultantContactID',
                ),
                'fields' => array(
                  'default'=>array(
                    'field_job_title'=>array('fldname'=>'Title'),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantType'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ConsultantContactID', 
                      'tbl'=>'tblconsultantcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_mc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblmanagercontacts',
        'oldkeyfldname' => 'ManagerContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'bundle'=>'manager_contact',
                  'rowkeyfldname' => 'ManagerContactID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ManagerContactID', 
                      'tbl'=>'tblmanagercontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ContactType'),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_pc = array(
    'fund contact' => array(
      'params' => array(
        'oldtable' => 'tblfundcontacts',
        'oldkeyfldname' => 'FundContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),      
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(            
              array(
                'params'=> array(
                  'oldtable' => 'tblFundContacts',
                  'oldkeyfldname' => 'FundContactID',
                  'bundle' => 'plan_contact',
                  'sort' => array('fldname'=>'field_employment_date'),
                ),
                'fields' => array(
                  'default' => array(
                    'title_field' => array('fldname'=>'ContactName'),
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'FundContactID', 
                      'tbl'=>'tblFundcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),       
                  'address' => array(
                    'field_address' => array(
                      'params' => array(
                        'oldtable' => 'tblManagerFirms',
                        'oldkeyfldname' => 'ManagerFirmID',
                      ),
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),     
        ),
      ),
    ),
  );

  $nm_mf = array(
    'manager firm' => array(
      'params' => array(
        'oldtable' => 'tblmanagerfirms',
        'oldkeyfldname' => 'ManagerFirmID',
        'dst'=>'manager_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ManagerFirmName'),
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ManagerFirmName'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'value2term' => array(
          'field_status_tr' => array('fldname'=>'Archive', 'handler'=>'negate', 'voc'=>5, 'values'=>array('0'=>'Inactive','1'=>'Active')),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );
  $nm_m = array(
    'mandate' => array(
      'params' => array(
        'oldtable' => 'tblmandates',
        'oldkeyfldname' => 'MandateID',
        'dst' => 'mandate',
      ),
      'system' => array(
        'fields' => array(
          'node-body' => array(
            'body' => array('fldname'=>'History'),      
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'field_title' => array('fldname'=>'FundName'),
          'field_account_size' => array('fldname'=>'Size'),
          'field_plan_size' => array('fldname'=>'FundSize'),
        ),
        'date2date' => array(
          'field_mandate_date' => array('fldname'=>'MandateDate'),
          'field_rfp_date' => array('fldname'=>'RFPDate'),
        ),
        'link' => array(
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink'),
        ),
        'http2link' => array(
          'field_rfp_link' => array('fldname'=>'RFPLink'),
          'field_website' => array('fldname'=>'Website'),
        ),
        'lu2term' => array(
          'field_mandate_status_tr' => array('fldname'=>'StatusID'),
          'field_attribute_tr' => array(),
          'field_geographic_tr' => array('fldname'=>'GeographicID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
        ),
        'majorminor' => array(
          'field_major_minor_style_tr' => array('fields'=>array('major'=>'MajorStyleID', 'minor'=>'MinorStyleID')),
        ), 
        'reference' => array(
          'field_plan_er' => array('fldname'=>'FundID'),
          'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
          'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
        ),
        'collection' => array(
          'field_manager_history' => array(
            'multiplier' => array(
              'field_manager_firm_er' => array('fldname'=>'FirmsHired', 'handler'=>'comma-delimited-er'),
            ),
          ),
          'sets' => array(
            array(
              'fields' => array(
                'default' => array(
                  'field_amount' => array('fldname'=>'FirmsHiredAmount'),
                ),
                'comma-delimited-delta-default' => array(
                  'field_amount' => array('fldname'=>'FirmsHiredAmount'),
                ),
                'comma-delimited-er' => array(
                  'field_manager_er' => array('fldname'=>'FirmHiredAmount'),
                ),
              ),
            ),
          ),
          'field_plan_size_history' => array(
            'sets' => array(
              array(
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_mandate_notes' => array(
            'sets' => array(
              array(
                'fields' => array(
                  'note-comment-to-note' => array(),
                  'note-history-to-note' => array(),
                ),
              ),
              array(
                'oldtable' => 'tblmandatecomments',
                'fields' => array(
                  'note-comments-to-note' => array(),
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );
// 242 Matt | 260 Gar SourceID just make UID 1
// gar guymoso@Yahoo.com matt matt mmccue@fin-news.com

  $nodeMappArr = FALSE;
  if ($mode=="step1") {
    $nodeMapArr = array(
      $nm_p, 
      $nm_cc,
      $nm_mc,
      $nm_cf,
      $nm_co,
      $nm_mf,
      $nm_pc, 
      $nm_m  
    );
  }
  else if ($mode=="step2") {
    $nodeMapArr = array(
      $nm_cf,
      $nm_co,
      $nm_mf,
      $nm_p, 
      $nm_m, 
      $nm_contact,
    );
  }
  return $nodeMappArr;
// END BIG NODE MAP ARRAY

}

//function _fin_migrate_users(&$oldnew) {
function _fin_migrate_batch_users(&$context) {
  //define('BATCH_SIZE', 1500);
  define('BATCH_SIZE', 10000000);
  $lastuid = @variable_get('lastuid');

  $lastcount = @variable_get('lastcount');
  if (!$lastuid) {

//production change this. Now it's set to transport gar s email
    $lastuid=6;
    $message = "Starting a new User Migration batch. Batch size = ".BATCH_SIZE;
  } 
  else {
    $message = "Resuming User Migration batch. Last time we moved ".$lastcount." Users ended with User #".$lastuid."(old UID). Batch size = ".BATCH_SIZE;
  }
  watchdog('FIN_MIGRATE USER',$message,array(),WATCHDOG_INFO);

  $context['message'] = $message;

  $start = microtime();
  $message = "Starting at >>".$start."< Batch Size>>".BATCH_SIZE."< <br>";
  //echo $message ."<br />";
  watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);
 
  db_set_active('legacy');
  $sql = "select u.uid as uid, u.name as name, u.pass as pass, u.mail as mail, u.status as status, u.created as created, u.login as login, a.expiry_date as expiry_date from {users} u, {account_expiry} a where u.uid=a.uid and u.uid>".$lastuid." order by uid";
  $result = db_query($sql)->fetchAll();
  db_set_active();

  $message = "FULL USER PULL SQL-- ".$sql;
  watchdog('FIN_MIGRATE_USER_INIT',$message,array(),WATCHDOG_INFO);  

  if ($result) {
    _fin_migrate_do_migrate_users($result, $context);
  }
}

function _fin_migrate_batch_users_stragglers(&$context) {
  // get all old user names
/*
  db_set_active('legacy');
  $osql = "select mail from {users}";
  $oldusers = db_query($sql)->fetchAll();
  db_set_active();
  $nsql = "select mail from {user}";
  $newusers = db_query($nsql)->fetchAllAssoc();
*/
  db_set_active('legacy');
//  $osql = "select mail from {users} where uid>4";
  $osql = "select name from {users} where uid>4";
  $res = db_query($osql);
  db_set_active();
  $oldusers = array();
  foreach ($res as $usr) {
    //$omail = $usr->mail;
    //$oldusers[] = $omail;
    $oname = $usr->name;
    $oldusers[] = $oname;
  }    
  // now get new user names
  db_set_active();
  $usrs = entity_load('user');
  //$usrs = user_load_multiple();
  $newusers = array();
  foreach($usrs as $uid => $usr) {
    //$nmail = $usr->mail;
    //$newusers[] = $nmail;
    $nname = $usr->name;
    $newusers[] = $nname;
  } 
  $stragglers = array();
  $stragglers = array_diff($oldusers, $newusers);
  if ($stragglers) {
    $stragglerStr = "'".implode("','", $stragglers)."'";
    db_set_active('legacy');
    $sql = "select u.uid as uid, u.name as name, u.pass as pass, u.mail as mail, u.status as status, u.created as created, u.login as login, a.expiry_date as expiry_date from {users} u left join {account_expiry} a on u.uid=a.uid where u.mail in (".$stragglerStr.") order by uid";
    $result = db_query($sql)->fetchAll();
    db_set_active();
    $message = "At the end of the line, going into Straggler mode - UID list(".$stragglerStr.")";
    watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);
    
    $context['message'] = "Rounding up ".count($result)." missing Users";

    if ($result) {
      _fin_migrate_do_migrate_users($result, $context);
    }
  } else {
      $context['message'] = "All Users successfully transferred, move on.";
  }
}
  
//function _fin_migrate_do_migrate_users($inUsers, &$context) {
function _fin_migrate_do_migrate_users(&$context) {
  ini_set('max_execution_time', 3600000);
  define('USER_RID_TRIAL_MEMBER', '6');
  define('USER_RID_NONE', '2');

$message = "IN USERS";
watchdog('DEBUG66', $message, array(), WATCHDOG_INFO);

  $oldnew = array();
  $newold = array();
  $namesList = array();
  $uidmaps = array();
  $resuming = FALSE;
  if ( $uidmaps = unserialize(@variable_get('fin-migrate-oldnew-uids')) ) {
    if (isset($uidmaps['oldnew'])) {
      //$oldnew = unserialize($uidmaps['oldnew']);    
      $oldnew = $uidmaps['oldnew'];    
    
      $message = "UIDMAPS containt ".print_r($uidmaps,true);
      watchdog('USER_MIGRATE_UID_MAP', $message, array(), WATCHDOG_INFO);
      //$newold = unserialize($uidmaps['newold']);
      
      $newold = $uidmaps['newold'];
      $msg = "USER OLDNEW UID -- ".print_r($oldnew,true)."--<br>";
      watchdog('FIN-MIGRATE-USER', $msg, array(), WATCHDOG_INFO); 
      $msg = "USER NEWOLD UID -- ".print_r($newold,true)."--<br>";
      watchdog('FIN-MIGRATE-USER', $msg, array(), WATCHDOG_INFO); 
      $resuming = TRUE;
    
      $namesList = $uidmaps['nameslist'];
    }
  }

  $trialNewRoles = array(2,6);
  $newRoles = array(
    '1' => 'anonymous users',
    '2' => 'authenticated user',
    '3' => 'administrator',
    '4' => 'editor',
    '5' => 'author',
    '6' => 'Trial Member',
    '7' => 'Basic Member',
    '8' => 'Family Office',
  );

  $roleMap = array(
    '1' => array(1),
    '2' => array(2,7),
    '3' => array(2,3),
    '4' => array(2,5),
    '5' => array(2,4),
    '6' => array(2,6),
    '7' => array(2,7),
    '8' => array(2,9),
  );

  $compareUsers = '';
  
  /*
   * First, we will prep the old User data. We will translate old roles to new, save 
   * separate first, last names & Company names for insertion into new User objects.
   */

  //db_set_active('south6');

/* 012116 deprecate  
db_set_active('legacy');
  $uids = array();
  $sql = "select uid from {users}";
  $result = db_query($sql);
  foreach ($result as $row) {
    $uids[$row->uid] = $row->uid;
  }
  // First, extract all Trial Members
  $trial_uids = array();
  $sql = "select uid from accounttypes_users where atid=2 or atid=4";
  $result = db_query($sql);
  foreach ($result as $row) {
    $trial_uids[$row->uid] = $row->uid;
  }
*/
  
  // see what ids to draw from a table
  db_set_active('legacy');
  $sql = "select uid from {users} WHERE uid>7";
  $result = db_query($sql);
  db_set_active();
  // oids are all old keys in source table, noids keys we saved
  // We will use array_diff to tell us what ids have not been done
  // yet.
  $oids = array();
  $res = array();
  foreach ($result as $row) {
    $res[$row->uid] = $row->uid;
  }
  if ($res) {
    $oids = array_values($res);
  }
  $noids = array();
  if (isset($newold)) {
    $noids = array_values($newold);
  }
  $stuffToMove = TRUE;
  $partial = FALSE;
  if ($noids) {
    $getids = array_diff($oids, $noids);
    if (!$getids) {
      $stuffToMove = FALSE;
    } else {
      $partial = TRUE;
    }
  }
  $sql = '';
  if ($partial && $stuffToMove) {
    $usql = "select uid, name, pass, mail, status, created, login from {users} where uid in (".implode(",", $getids).") order by uid";
  } else if (!$partial && $stuffToMove) {
    // we are starting fresh with a table, use simpler SQL
    $getids = array_keys($oids);
    $usql = "select uid, name, pass, mail, status, created, login from {users} order by uid";
  }

$message = "B PARTIAL: ".$partial." | Stuff to move? ".$stuffToMove." |<br><br>ouids: ".print_r($oids,true)."<br><br>nuids: ".print_r($noids,true)."<br><br>SQL: ".$sql;
watchdog('FIN_MIGRATE_USER_NEW', $message, array(), WATCHDOG_INFO);

/*
//////////////////
  $nuids = array_values($newold);
  if ($nuids) {
    $uids = array();
    $ouids = array();
    $sql = "select uid from {users}";
    $result = db_query($sql);
    foreach ($result as $row) {
      $ouids[$row->uid] = $row->uid;
    }

    $nsql = '';
    $uids = array_diff($ouids, $nuids);
    if ($uids) {
      $uidsStr = "'".implode("','", $uids)."'";
      $msql = "select u.uid as uid, u.name as name, u.pass as pass, u.mail as mail, u.status as status, u.created as created, u.login as login from {users} u where u.uid in (".$uidsStr.") order by uid";
    }
  } else {
    $nsql = "select u.uid as uid, u.name as name, u.pass as pass, u.mail as mail, u.status as status, u.created as created, u.login as login from {users} u order by uid";
  }
  if ($nsql) {
    db_set_active('legacy');
    $inUsers = db_query($sql)->fetchAll();
    db_set_active();
*/
  
  if ($stuffToMove) {
    db_set_active('legacy');
    //$inUsers = db_query($sql);
    $inUsers = db_query($usql)->fetchAll();
    db_set_active();

    if ($inUsers) {

$message = "YES inUsers";
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);

      $rowCount = 0;
      if ($getids) {
        $howManyRows = count($getids);
      } else {
        $howManyRows = count($oids)-count($noids);
      } 
      $motion = "Starting Fresh ";
      if ($partial) {
        $motion = "Resuming ";
      }
      $message = $motion." migrating ".$howManyRows." Users.";
      watchdog('FIN_MIGRATE_USERS', $message, array(), WATCHDOG_INFO);
      $context["message"] = $message;
      $rowCount = 0;
      $start = time();

$message = "MARKER 1";
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);
      
      // First, extract all Trial Members
      $trial_uids = array();
      $sql = "select uid from accounttypes_users where atid=2 or atid=4";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      foreach ($result as $row) {
        $trial_uids[$row->uid] = $row->uid;
      }

$message = "MARKER 2";
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);


      // Grab data from profile table, first, last name and company
      // Array is of format UID | FID | Value.  FID is a 1,2,3. 1-First name, 2-Last name, 3-Company
      ///////////////////////////////////////
  
      $profilesArr = array();
      $sql = "select * from {profile_values}";
      
      db_set_active('legacy');
      $raw = db_query($sql);
      db_set_active();

      foreach ($raw as $row) {
        //normalize (turn 3 rows for each user into 1
        //$profilesArr[$row->uid][$row->fid][$row->value]=$row->value; 
        $profilesArr[$row->uid][$row->fid]=$row->value; 
      }
  
$message = "MARKER 3";
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);

      $sql = "select u.uid as uid,r.rid as role from {users_roles} u, {role} r where u.rid=r.rid";
      db_set_active('legacy');
      $result = db_query($sql);
      db_set_active();
      $roleres = array();
      foreach ($result as $row) {
        $roleres[$row->uid][$row->role] = $row->role;
      }
      $noRoles = array();
      $rolesuids = array_keys($roleres);
      $noRoles = array_diff($getids, $rolesuids);
      foreach ($noRoles as $noRole) {
        $roleres[$noRole][USER_RID_NONE] = USER_RID_NONE;
      }

      db_set_active();
      $userres = array();

      /*
      * SALESFORCE - get list of Emails to query SF with
      */
      $emails = array();
      $getEmails = $inUsers;
      foreach ($getEmails as $row) {
        $emails[] = $row->mail;
      }

$message = "MARKER 5 EMAILS: ".print_r($emails,true)."<br><br>INUSER: ".print_r($inUsers,true);
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);


      /*
      * You have a list of emails, get SF Data back
      */
      $sfdata = '';
      $sfdata = _fin_migrate_get_sfdata($emails);
      $mailmismatches_active = array();
      $mailmismatches_inactive = array();
      $statusactivetoinactive = array();
      $statusinactivetoactive = array();
 
 $message = "MARKER 5A EMAILS: ".print_r($emails,true)."<br><br>INUSERS: ".print_r($inUsers,true);
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);

      foreach ($inUsers as $row) {

$message = "MARKER 5B ROW: ".print_r($row,true);
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);


        $profile = FALSE;
        if ( !isset($sfdata[$row->mail]) ) {

if (isset($profilesArr[$row->uid][3])) {
  $message = "Using ProfilesArr: ".print_r($profilesArr[$row->uid],true);
  watchdog('DEBUG7', $message, array(), WATCHDOG_INFO);    
}

          $lastname = '';
          $firstname = '';
          $companyname = '';
          if (isset($profilesArr[$row->uid][1])) {
            $firstname = $profilesArr[$row->uid][1];
          }    
          if (isset($profilesArr[$row->uid][2])) {
            $lastname = $profilesArr[$row->uid][2];
          }    
          if (isset($profilesArr[$row->uid][3])) {
            $companyname = $profilesArr[$row->uid][3];
          }    
          $profile = array(
            'id' => 0,
            'email' => $row->mail,
            'firstname' => $firstname,
            'lastname' => $lastname,
            'company' => $companyname,
            'inactive' => $row->status,
            'expiry_date' => '',
            'expiry' => 0,
            'title' => '',
            'homephone' => '',
            'mobilephone' => '',
          );
          $message = "D5 email not in SF, so we use D5 data instead. Email: ".$row->mail."Data: ".print_r($profile,true);
         
          // if profile 'expiry' is zero, we know we have an non-sf record
          // only profiles w/expiration dates get considered for syncing to sf
        } else { // if no sf data available
          $profile = $sfdata[$row->mail];
        }
        
        /*
         * Determine wether account is blocked or actgive
         */
        $sfStatus = 0;
    
        $d5Status = $row->status;
    
        $finalStatus = 0;
    
$message = "MARKER 6";
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);

        if ($profile['expiry']>0) {
          //fair game, determine status based on SF
          $now = time();
          if ($profile['expiry']>$now && !$profile['inactive']) {
            $sfStatus = 1;
            $finalStatus = 1;
          }

          // If D5 says active & SF says Inactive, or vice versa, report the conflict
          if ($sfStatus<>$d5Status) {
            if ($d5Status) {
              //drupal user going from active to inactive
              $statusactivetoinactive[$row->mail][] = $profile;
            }
            if ($sfStatus) {
              //drupal user going from inactive to active
              $statusinactivetoactive[$row->mail][] = $profile;
            }

            $profile['d5_status'] = $d5Status;
            $profile['sf_status'] = $sfStatus;
            $profile['final_status'] = $finalStatus;
            $sfStatusStr = "INACTIVE";
            if ($sfStatus) {
              $sfStatusStr = "ACTIVE";
            }
            $oldStatusStr = "INACTIVE";
            if ($row->status) {
              $oldStatusStr = "ACTIVE";
            }
            $message = t('D5 says user %firstname %lastname ( %email ) is %oldstatus but Salesforce says status is %sfstatus. Inactive: %inactive Expiration Date: %expiry',
              array(
                '%email' => $row->mail,
                '%firstname' => $profile['firstname'],
                '%lastname' => $profile['lastname'],
                '%sfstatus' => $sfStatusStr,
                '%oldstatus' => $oldStatusStr,
                '%expiry' => date('m-d-y', $profile['expiry']),
                '%inactive' => $profile['inactive'],
              )
            );
            watchdog('FIN_MIGRATION_SF', $message, array(), WATCHDOG_CRITICAL);
      
            if ($finalStatus) {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
            else {
              $statusinactivetoactive[$row->mail][] = $profile;
            }
          }
        }
        else { // if there is no expiry or no sf data
          $finalStatus = $d5Status;
          if ($finalStatus) {
            $mailmismatches_active[$row->mail][] = $profile;
          }
          else {
            $mailmismatches_inactive[$row->mail][] = $profile;
          }
        }
    
$message = "MARKER 7";
watchdog('FIN_MIGRATE_USERS_NEW', $message, array(), WATCHDOG_INFO);

        $usr = array(
          'uid'=>$row->uid,
          'name'=>$row->name,
          'mail'=>$row->mail,
          'pass'=>$row->pass,
          'status'=>$finalStatus,
          'login'=>$row->login,
          'created'=>$row->created,
        );
        $userres[$row->uid] = array_merge($usr, $profile);
  
$message = "MERGED USER INFO: ".print_r($userres[$row->uid],true);
watchdog('DEBUG5', $message, array(), WATCHDOG_INFO);

      //////}
        // We just finished putting db data into arrays to loop through again.
        // Next, we will actually create accounts
      }
      $howMany = count($mailmismatches_active);
      $message = $howMany . " ACTIVE D5 User emails not on SalesForce, we cannot determine who they are here, this needs to be fixed on SF.<br /><br />LIST: ".print_r($mailmismatches_active,true);
      watchdog('FIN_MIGRATE_SF_MISMATCHES_ACTIVE', $message, array(), WATCHDOG_CRITICAL);
      $message = _fin_migrate_make_csv($mailmismatches_active);
      watchdog('FIN_MIGRATE_SF_MISMATCHES_ACTIVE_CSV', $message, array(), WATCHDOG_INFO);
  
      $howMany = count($mailmismatches_inactive);
      $message = $howMany . " INACTIVE D5 User emails not on SalesForce, we cannot  determine who they are here, this needs to be fixed on SF.<br /><br />LIST: ".print_r($mailmismatches_inactive,true);
      watchdog('FIN_MIGRATE_SF_MISMATCHES_INACTIVE', $message, array(), WATCHDOG_CRITICAL);
      $message = _fin_migrate_make_csv($mailmismatches_inactive);
      watchdog('FIN_MIGRATE_SF_MISMATCHES_INACTIVE_CSV', $message, array(), WATCHDOG_INFO);

      $howMany = count($statusactivetoinactive);
      $message = $howMany . " D5 User Active to Inactive. Statuses do not agree with SalesForce - these statusus are all replaced by Salesforce Statuses. This is an FYI<br /><br />LIST: ".print_r($statusactivetoinactive,true);
      watchdog('FIN_MIGRATE_SF_STATUS_DEACTIVATE', $message, array(), WATCHDOG_INFO);
      $message = _fin_migrate_make_csv($statusactivetoinactive);
      watchdog('FIN_MIGRATE_SF_STATUS_DEACTIVATE_CSV', $message, array(), WATCHDOG_INFO);

      $howMany = count($statusinactivetoactive);
      $message = $howMany . " D5 User Inactive to Active. Statuses do not agree with SalesForce - these statusus are all replaced by Salesforce Statuses. This is an FYI<br /><br />LIST: ".print_r($statusinactivetoactive,true);
      watchdog('FIN_MIGRATE_SF_STATUS_ACTIVATE', $message, array(), WATCHDOG_INFO);
      $message = _fin_migrate_make_csv($statusinactivetoactive);
      watchdog('FIN_MIGRATE_SF_STATUS_ACTIVATE_CSV', $message, array(), WATCHDOG_INFO);

      $rolesArr = '';
      foreach ($roleres as $uid => $roles) {
        $uidStr = (string) $uid;
        if (isset($trial_uids[$uidStr])) {
          foreach($trialNewRoles as $newRid) {
            $newRidStr = (string) $newRid;
            $newRole = $newRoles[$newRidStr];
            $rolesArr[$uidStr][$newRidStr] = $newRole;
          }
        } else {
          foreach ($roles as $rid) {
            $newRids = $roleMap[$rid];
            foreach ($newRids as $newRid) {
              $newRidStr = (string) $newRid;
              $ind = (string) $rid;
              $newRole = $newRoles[$ind];
              $rolesArr[$uidStr][$newRidStr] = $newRole;
            }
          }
        }
      }
    }
  }
  
  db_set_active();

  // PLW 081815
  // Forever deprecated.  Default is 15, just do not assign a number
  //$hash_count_log2 = 11;

  require_once 'includes/password.inc';

  $count = 0;
  $total = count($userres);
  foreach ($userres as $uid => $oldUser) {
    $count++;

    $context['message'] = "(".$count."/".count($userres).") Migrating User ".$oldUser['name'];
    $context['progress'] = ($count/$total)*100;

    //deprecate
    //$duplicate = 0;

    if (empty($oldUser['mail'])) {
      continue;
    }

/* PLW 0116 move below
    //extract bio data first
    $lname = '';
    $fname = '';
    $company = '';
    if (isset($profilesArr[$uidStr])) {
      $lname = $profilesArr[$uidStr][2];
      $fname = $profilesArr[$uidStr][1];
      $company = $profilesArr[$uidStr][3];
    }
*/    
    $mail = (string) $oldUser['mail'];
    if (substr($mail,0,1)=="@") {
      $oldmail = $mail;
      $mail = 'corrected'.$fname.'.'.$lname.$mail;
      $message = "BAD EMAIL FORMAT >".$oldmail."< CORRECTED>>".$mail."< User data>>".print_r($user,true);
      watchdog('FIN_MIGRATE',$message,array(),WATCHDOG_INFO);
    }

    /* deprecate
    $check_sql = "select mail, uid from {users} where mail='".$mail."'";
    $check_res = db_query($check_sql);
    foreach ($check_res as $res) {
      if ($res->mail) {
        $message = "DUPLICATE User Email>".print_r($oldUser,true)."< ORIGINAL UID>>".$res->uid;
        watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);
        $duplicate = 1;
      }
    }

    if ($duplicate) {
      continue;
    }
*/

    $loop = $count+1;

    $uidstr = (string) $uid;
    $oldPass = (string) $oldUser['pass'];
    $newPass = 'qapla';
    $noRoles = FALSE;
    if (isset($rolesArr[$uidstr])) {
      $userRoles = $rolesArr[$uidstr];
      $fields = array(
        'name' => $oldUser['name'],
        'mail' => $oldUser['mail'],
        'pass' => $newPass,
        'status' => $oldUser['status'],
        'init' => $oldUser['mail'],
        'roles' => $userRoles,
        'created' => $oldUser['created'],
        'access' => $oldUser['login'],
      );
    }
    else {
      $message = "This User ".print_r($oldUser,true)." does not have any roles. Something went wrong here";
      watchdog('FIN_MIGRATE',$message,array(),WATCHDOG_WARNING);      
      $fields = array(
        'name' => $oldUser['name'],
        'mail' => $oldUser['mail'],
        'pass' => $newPass,
        'status' => $oldUser['status'],
        'init' => (string) $oldUser['mail'],
        'created' => $oldUser['created'],
        'login' => $oldUser['login'],
      );
    }

    //the first parameter is left blank so a new user is created
    $alreadyThere = 0;

    //013116 - for some reason there is a duplicate key error, remedy here
    $uname = $oldUser['name'];
    if ($uname && isset($namesList[$uname])) {
      $alreadyThere = TRUE;
      $message = 'User name '.$name.' already processed. This should not happen. Incoming User: '.print_r($oldUser,true);
      $watchdog('FIN_MIGRATE_DUPLICATE_USER', $message, array(), WATCHDOG_ERROR);
    }
    if (!$alreadyThere) {
      $acct = new stdClass();
      //$acct->is_new = 1;
      $acct->active = 1;


      $message = "ABOUT TO SAVE USER ".$fields['name']." OldUsers: ".print_r($oldUser,true).'<br><br>Fields: '.print_r($fields,true);
      watchdog('DEBUG3', $message, array(), WATCHDOG_INFO);

      $fields['mail'] = 'paul.wolborsky@gmail.com';
      $fields['init'] = 'paul.wolborsky@gmail.com';

      $account = user_save($acct, $fields);

$message = "USER ".$oldUser['name']." SAVED<br>FIELDS: ".print_r($fields,true);
watchdog('DEBUG4', $message, array(), WATCHDOG_INFO);

      //$account->mail = $oldUser['mail'];
      $upd = array(
        'mail' => $oldUser['mail'],
      );
      user_save($account, $upd);

      $newUid = (int) $account->uid;
      $oldUid = $uid;
      $namesList[$uname] = $uname;
        // now try the password
      $newPass = user_hash_password($oldPass);
      if ($newPass) {
        // Indicate an updated password.
        $newPass  = 'U' . $newPass;
      }
      
      db_update('users')->fields(array('pass' => $newPass))->condition('uid', $account->uid)->execute();

      $oldnew[$uid] = $newUid;
      $newold[$newUid] = $uid;

      //$myUser = user_load($newUid);
      //$myUser->field_last_name[LANGUAGE_DEFAULT][0]['value'] = $lname;
      //$myUser->field_first_name[LANGUAGE_DEFAULT][0]['value'] = $fname;
      //$myUser->field_user_company[LANGUAGE_DEFAULT][0]['value'] = $company;
      //user_save($myUser);

      variable_set('lastuid', $uid);
      //$count++;
      variable_set('lastcount', $count);

      $uidmaps = array();
      $uidmaps['oldnew'] = $oldnew;
      $uidmaps['newold'] = $newold;
      $uidmaps['nameslist'] = $namesList;
      variable_set('fin-migrate-oldnew-uids', serialize($uidmaps));
    }
    
    // plw 0116 now take care of organization & profile2
    //extract bio data first
    $message = '';
    $userName = (string) $oldUser['name'];
    $email = (string) $oldUser['mail'];
/*
    $lastName = '';
    $firstName = '';
    $companyName = '';
    if (isset($profilesArr[$uidStr])) {
      $lastName = $profilesArr[$uidStr][2];
      $firstName = $profilesArr[$uidStr][1];
      $companyName = $profilesArr[$uidStr][3];
    }
*/
    $lastName = $oldUser['lastname'];
    $firstName = $oldUser['firstname'];
    $companyName = $oldUser['company'];
    
    $organization_nid = 0;
    if ($companyName) {
      $organization_nid = _fin_migrate_get_entity_by_name('field_organization_name', $oldUser['company'], 'organization','node');
      if (!$organization_nid) {
        try {
           $organization = entity_create('node', array('type'=>'organization', 'uid'=>1, 'status'=>1));
          //$organization = entity_create('node', array('type'=>'organization'));
          $organization->field_organization_name[LANGUAGE_NONE][0]['value'] = $companyName;
          $organization->title = $companyName;
          entity_save('node', $organization);
          $organization_nid = $organization->nid;
          $message = t('Created new Organization %company from D5 Row: %data. ',
            array(
              '%company' => $companyName,
              '%data' => print_r($row,true),
            )
          );
        } 
        catch (Exception $e) {
                $message = t('Failed to create organization %company from D5 Row: %data. Error: @msg<br /><br />%data',
                  array(
                    '%username' => $userName,
                    '%email' => $email,
                    '%data' => print_r($row,true),
                    '@msg' => $e->getMessage(),
                  )
              );
          //continue;
        }
        if ($message) {
          watchdog('FIN_MIGRATE_ORGANIZATION', $message, array(), WATCHDOG_INFO);
          $message = '';
        }
      }
    }

    $main_profile = profile2_by_uid_load($newUid, 'main');
    if (!$main_profile) {
      $main_profile = entity_create('profile2', array('type' => 'main', 'node'));
    }
    $action = 'Update';
    if ($main_profile->uid) {
      $action = 'Create';
    }
    try {
      //$main_profile = entity_create('profile2', array('type' => 'main', 'node'));
      if (!$main_profile->uid && $uid) {
        $main_profile->uid = $uid;
        $message = t('Profile attached to a User. This should only happen w/new profiles. User %username ( %email ) UID %uid',
          array('%username' => $userName,
            '%email' => $email,
            '%uid' => $newUid,
          )
        );
      }
      $main_profile->field_pf_first_name[LANGUAGE_NONE][0]['value'] = $oldUser['firstname'];
      $main_profile->field_pf_last_name[LANGUAGE_NONE][0]['value'] = $oldUser['lastname'];
      $main_profile->field_pf_job_title[LANGUAGE_NONE][0]['value'] = $oldUser['title'];
      $main_profile->field_pf_expiration_date [LANGUAGE_NONE][0]['value'] = $oldUser['expiry'];
      //$main_profile->field_pf_job_title [LANGUAGE_NONE][0]['addressfield'] = $address;
      if ($organization_nid) {
        $main_profile->field_pf_organization[LANGUAGE_NONE][0]['target_id'] = $organization_nid;
      }
      entity_save('node', $main_profile);
    
      $message = t('Successfully %action profile for user %username ( %email ) from D5 Row: %data.',
        array(
          '%action' => $action .'d',
          '%username' => $userName,
          '%email' => $email,
          '%data' => print_r($row,true),
        )
      );
    }        
    catch (Exception $e) {
      $message = t('Failed to %action profile for user %username ( %email ) from D5 Row: %data. Error: @msg',
        array(
          '%action' => $action,
          '%username' => $userName,
          '%email' => $email,
          '%data' => print_r($row,true),
          '@msg' => $e->getMessage(),
        )
      );
    }
    if ($message) {
      watchdog('FIN_MIGRATE_PROFILE2', $message, array(), WATCHDOG_INFO);
      $message = '';
    }
  }
  
  $end = microtime();
  $elapsed = ($end - $start) * 100;
  $message = "FINISHED>>".$loop."< added, elapsed time>>".$elapsed."< Seconds";
  //echo $message ."<br />";
  watchdog('FIN_MIGRATE_USER',$message,array(),WATCHDOG_INFO);

  // PLW 090315 - moving to batch, all nodes uid=1, so deprecate
  //$out = array();
  //$out['map']['uid']['oldnew'] = $oldNewUidMapArr;
  //$out['map']['uid']['newold'] = $newOldUidMapArr;
  //$out['phase'] = $phase;
  //return $out;
}

/*
  $params = array(
    'new-users' => array(
      'Contact' => array(
        'fields' => array(  
           'Unique_Email__c' => 'unique_email',
           'Password__c' => 'password',
           'Inactive__c' => 'inactive',
           'Username__c' => 'username',
           'FINsearches_Expiration_New__c' => 'expiry',
           'FirstName' => 'firstname',
           'LastName' => 'lastname',
           'Email' => 'email' ,
           'Account.Name' => 'company',
           'Title' => 'title',       
           'HomePhone' => 'homephone',
           'MobilePhone' => 'mobilePhone',
        ),
        'types' => array(
          'Contact',
        ),
      ),
    ),
  );

*/

function _fin_migrate_make_csv($inArr) {
  if ($inArr) {
    $arr = array(
      'firstname',
      'lastname',
      'company',
      'email',
      'inactive',
      'expiry_date',
    );

    $outArr = array();
    $header = FALSE;
    foreach ($inArr as $row_raw) {
      $row = array();
      foreach ($arr as $fld) {
        $row[$fld] = $row_raw[0][$fld];
      }
      if (!$header) {
        $out[] = '"'.implode('" , "', array_keys($row)).'"';
        $header = TRUE;
      }
      $vals = array_values($row);
      $out[] = '"'.implode('" , "', $vals).'"';
    }
    return implode("\r\n", $out);
  }
  return FALSE;
}

function _fin_migrate_get_sfdata($emails) {
  /*
   * Grab Salesforce datga
   */
  $params = array(
    'new-users' => array(
      'Contact' => array(
        'fields' => array(  
           'Inactive__c' => 'inactive',
           'FINsearches_Expiration_New__c' => 'expiry',
           'FirstName' => 'firstname',
           'LastName' => 'lastname',
           'Email' => 'email' ,
           'Account.Name' => 'company',
           'Title' => 'title',
           'HomePhone' => 'homephone',
           'MobilePhone' => 'mobilephone',
        ),
        'types' => array(
          'Contact',
        ),
      ),
    ),
  );
  $sfapi = salesforce_get_api();
  $out = FALSE;
  foreach ($params as $pseudonym => $maps) {
    foreach($maps as $sf_object_type => $map) {
      $mapped_fields = $map['fields'];
      $sf_object_type = $map['types'][0];
      $soql = new SalesforceSelectQuery($sf_object_type);
      
      // Convert field mappings to SOQL.
      $soql->fields = array('Id', 'LastModifiedDate');
      foreach ($mapped_fields as $field => $ignore) {
          $soql->fields[] = $field;
      }

      $chunks = array_chunk($emails, 400);
      foreach ($chunks as $chunk) {
        $soql->conditions = array();
        $soql->addCondition('Email', $chunk, 'IN');
        
        // Execute query.
        $results = $sfapi->query($soql);
        if (!isset($results['errorCode'])) {
          $rows = $results['records'];
          foreach ($rows as $row) {
            $email = $row['Email'];
            if ($email) {
              $arr = array();
              foreach ($row as $key => $val) {
                if ($key=="Account") {
                  $val = $val['Name'];
                  $alias = 'company';
                  $arr[$alias] = $val;
                }
                if ( isset($mapped_fields[$key]) ) {
                  $alias = $mapped_fields[$key];
                  if ($alias=="expiry") {
                    $arr['expiry_date'] = $val;
                    $val = strtotime($val);
                  }
                  if ($alias=="company") {
                    $val = $val['Name'];
                  }
                  $arr[$alias] = $val;
                }
                else if ( ($key=='Id') ) {
                  $arr['id'] = $val;
                }
              }
              $out[$email] = $arr;
            } else {
              $message = "MISSING EMAIL - Row: ".print_r($row,true);
              watchdog('SF_MIGRATION_SF', $message, array(), WATCHDOG_ERROR);
            }
          }
        }
      } // if results
    } // each map
  } // all maps

//$message = print_r($debug,true);
//watchdog('DEBUG11', $message, array(), WATCHDOG_INFO);

  $message = "SF OUT: ".print_r($out,true);
  watchdog('FIN_MIGRATE_SF', $message, array(), WATCHDOG_INFO);
  return $out;    
}

function profile2_by_uid_load($uid, $type_name) {
  if ($uid && is_numeric($uid) && ($account = user_load($uid))) {
    $profile = profile2_load_by_user($account, $type_name);
    if (!$profile) {
      $profile = profile2_create(array('type' => $type_name, 'uid' => $uid));
      $profile->setUser($account);
      $profile->is_new = TRUE;
    }
    return $profile;
  }
  return FALSE;
}


function _fin_migrate_get_entity_by_name($fieldname, $name, $bundle, $type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $type)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_organization_name', 'value', $name, '=');
  $result = $query->execute();

  $id = FALSE;
  if (isset($result['node'])) {
    $ids = array_keys($result['node']);
    if ($ids) {
      $id = $ids[0];
      return $id;
      //$entity = entity_load($type, $id);
      //return $entity;
    }
  }
  return FALSE;
}

/*

function my_function_name_add_image_to_field_collection($nid, $fid){
   // Load target node
   $node = node_load($nid);

   // Create a new field collection 
   $field_collection_item = entity_create('field_collection_item', array('field_name' => 'my_field_collection_item_name'));

   // Prepare link field
   $link = array(
      'title' => "",
      'url' => "",
      'attributes' => array(
         'title' => "",
      ),
   );

   // Prepare file 
   $file = (array)file_load($fid);
   $file['display'] = "1";

   // Load items into field collection
   $field_collection_item->field_image[LANGUAGE_NONE][] = $file;
   $field_collection_item->field_link[LANGUAGE_NONE][] = $link;

   // Save field collection item
   $field_collection_item->setHostEntity('node', $node);
   $field_collection_item->save(TRUE);
   
   node_save($node);
}



  $node->field_customer_nid[$node->language][]['target_id'] = $form_state['values']['entity id'];
  $node->field_customer_nid[$node->language][]['target_type'] = "node" | "user"
  ...
  node_submit($node);
  node_save($node);
  */

/*
can assign this to a wrapper, once you create the field
$field = array('alt' => '',
          'title' => '',
          'fid' => $file->fid,
          'display' => 1,
          'width' => $file->image_dimensions['width'],
          'height' => $file->image_dimensions['height'],
          'image_field_caption' => array
              (
                  'value' => '',
                  'format' => 'full_html',
              ),              
    );

*/


  
function _fin_migrate_handler_taxonomy($inArr, $inData, &$node, $termMap) {
  foreach ($inArr as $fldsArr) {
    $fldName = $inArr['fldname'];
    $val = $inData[$fldName];
    $term = $termMap[$fldName]['oldterm'][$val];
    $tid = $termMap[$fldName]['newterm'][$term];
    $node->$fldName[LANGUAGE_DEFAULT][0] = $tid;
  }
}
  
/***
sample populating addressfield.  Node_save.

$lang = $node->language;
$node->field_address[$lang][0] = array(
  "country" => "US",
  "thoroughfare" => "123 Fake Street",
  "premise" => "",
  "locality" => "Beverly Hills",
  "administrative_area" => "CA",
  "postal_code" => "90210"
);

***/

//function _fin_migrate_handler_address($inArr, $inData, &$node) {
function _fin_migrate_handler_address($dstFldName, $inArr, $inData, &$wrapper, $termMap) {
  $countries = array(
      '173'=>'AU',
      '158'=>'AT',
      '1870875315'=>'BS',
      '555'=>'BH',
      '165'=>'BE',
      '1870875319'=>'BM',
      '1870875300'=>'BA',
      '1870875296'=>'BW',
      '130'=>'BR',
      '1870875320'=>'BN',
      '1870875308'=>'BG',
      '127'=>'CA',
      '1870875318'=>'KY',
      '1870875321'=>'GB',
      '133'=>'CL',
      '134'=>'CN',
      '135'=>'CO',
      '138'=>'CR',
      '1870875299'=>'HR',
      '141'=>'CU',
      '8'=>'CY',
      '143'=>'CZ',
      '144'=>'DK',
      '210'=>'FI',
      '211'=>'FR',
      '214'=>'DD',
      '221'=>'GR',
      '185'=>'GU',
      '187'=>'HU',
      '182'=>'IS',
      '208'=>'IN',
      '183'=>'ID',
      '186'=>'IR',
      '174'=>'IL',
      '188'=>'IT',
      '1870875305'=>'JM',
      '191'=>'JP',
      '192'=>'JO',
      '1870875294'=>'KZ',
      '1870875295'=>'KE',
      '1870875297'=>'KW',
      '1870875316'=>'LI',
      '37'=>'LT',
      '38'=>'LU',
      '60'=>'MY',
      '1870875327'=>'MT',
      '1870875310'=>'MU',
      '44'=>'MX',
      '56'=>'MC',
      '1870875312'=>'MZ',
      '19'=>'NL',
      '14'=>'NZ',
      '1870875309'=>'NI',
      '1870875325'=>'KP',
      '1870875324'=>'MP',
      '9'=>'NO',
      '21'=>'PA',
      '1870875306'=>'PG',
      '1870875311'=>'PE',
      '32'=>'PH',
      '26'=>'PL',
      '18'=>'PT',
      '27'=>'PR',
      '1870875298'=>'RO',
      '1870875301'=>'RU',
      '1870875322'=>'SA',
      '63'=>'SG',
      '101'=>'ZA',
      '118'=>'KR',
      '103'=>'SP',
      '112'=>'SE',
      '113'=>'CH',
      '116'=>'TW',
      '1870875302'=>'TZ',
      '75'=>'TH',
      '67'=>'TR',
      '71'=>'UK',
      '61'=>'US',
      '1870875313'=>'AE',
      '1870875293'=>'XX',
      '55555'=>'VE',
    );  
  
    $states = array(
      '356'=>'AL',
      '357'=>'AK',
      '358'=>'AZ',
      '359'=>'AR',
      '360'=>'CA',
      '361'=>'CO',
      '362'=>'CT',
      '363'=>'DE',
      '364'=>'SD',
      '365'=>'FL',
      '366'=>'GA',
      '367'=>'HI',
      '368'=>'ID',
      '369'=>'IL',
      '370'=>'IN',
      '371'=>'IA',
      '372'=>'KS',
      '373'=>'KY',
      '374'=>'LA',
      '375'=>'ME',
      '376'=>'MD',
      '377'=>'MA',
      '378'=>'MI',
      '379'=>'MN',
      '380'=>'MS',
      '381'=>'MO',
      '382'=>'MT',
      '383'=>'NE',
      '384'=>'NV',
      '385'=>'NH',
      '386'=>'NJ',
      '387'=>'NY',
      '388'=>'NC',
      '389'=>'ND',
      '390'=>'OH',
      '391'=>'OK',
      '392'=>'OR',
      '393'=>'PA',
      '394'=>'RI',
      '395'=>'SC',
      '396'=>'TX',
      '397'=>'UT',
      '398'=>'VA',
      '399'=>'WA',
      '400'=>'WV',
      '401'=>'WI',
      '402'=>'WY',
      '403'=>'NM',
      '404'=>'TN',
      '405'=>'VT',
      '486'=>'ONT',
      '487'=>'ALB',
      '488'=>'NB',
      '489'=>'PEI',
      '490'=>'SA',
      '491'=>'NS',
      '492'=>'QE',
      '493'=>'BC',
      '494'=>'NL',
      '1561'=>'DC',
      '956955814'=>'PR',
      '956955815'=>'MB',
  );  
//debugBreak();

  $addrArr = array();
  $fields = $inArr['fields'];
  foreach ($fields as $handler => $sets) {
    foreach ($sets as $dstFld => $params) {
      $fldName = $params['fldname'];
      if (is_array($fldName)) {
        $val = '';
        $vals = array();
        foreach ($fldName as $fld) {
          $vals[] = $inData->$fld;
        }
        if ($vals) {
          $val = implode(", ", $vals);
        }
      }
      else {
        $val = $inData->$fldName;
      }
      switch ($handler) {
        case 'phone':
          str_replace('ext.','x',$val);
          str_replace('ext','x',$val);
          str_replace('EXT.','x',$val);
          str_replace('EXT','x',$val);
          $pieces = explode("x", $val);
          $val2 = $val; //for debugging purposes
          $val = $pieces[0];
          if (isset($pieces[1])) {
            $addrArr['phone_number_extension'] = $pieces[1];
          }
        break;
        case 'lu2state':
          if ($val) {
            $val = $states[$val];
          } else {
            $val = '';
          }
        break;
        case 'lu2country':
          if ($val) {
            $val = $countries[$val];
          } else {
            $val = '';
          }
        break;
      }
      $val = trim($val);

      $addrArr[$dstFld] = $val;
    }
  }
  //$wrapper->$destFldName = $addrArr;
  return $addrArr;
}
 
function _fin_migrate_handler_paragraph($bundle, $hostFldName, $inArr, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey=0) {

//debugBreak();

//function _fin_migrate_handler_paragraph($hostFldName, $inArr, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey=0) {
/*
$paragraph = new ParagraphsItemEntity(array('field_name' => 'name_of_field_in_node', 'bundle' => 'name_of_paragraph_bundle'));
$paragraph->is_new = TRUE;
$paragraph->setHostEntity('node', $node);
$paragraph->save();
*/
  $fields = $inArr['fields'];
  $params = $inArr['params'];
  if ( isset($params['oldtable']) ) {
    $srcTable = $params['oldtable'];
    if (isset($params['oldkeyfldname'])) {
      $primeKeyFldName = $params['oldkeyfldname'];
    }
    
    $primeKey = $inData->$primeKeyFldName;
    
    if (isset($params['key-alias'])) {
      $primeKeyFldName = $params['key-alias'];
    }
      // we will need to tap an additional old table. First, check if we have one already
    $res = _fin_migrate_get_best_additional_table_data($srcTable, $primeKeyFldName, $primeKey);
  } else {
    $res = $inData;
  }
  if ($res) {
    foreach ($res as $rw) {
      $newParagraph = new ParagraphsItemEntity(array('field_name' => $hostFldName, 'bundle' => $bundle));
      $newParagraph->is_new = TRUE;
      $newParagraph->setHostEntity('node', $entity);
      $newParagraph->save();
      $p_wrapper = entity_metadata_wrapper('field_paragraph_item', $newParagraph);
      _fin_migrate_process_fields($fields, $rw, $p_wrapper, $entity, $termMap, $primeKeyFldName, $primeKey);
        
      // detour. Is this Contact? Is this a 2nd+ entry? We need to sort
      if (isset($params['sort'])) {
        $langcode = $entity->entity_type;
        $sortby = $params['sort']['fldname'];
        // next, do we need to sort?
        // we have to count deltas, unfornuately, paragraphs sometimes add
        // junk deltas.
        $count = 0;
        $sortMap = array();
        $otherStuff = array();
        foreach ($wrapper->$hostFldName as $delta => $content) {
          if (is_numeric($delta)) {
            $count++;
            $time = $content->$sortby[$langcode][0]['value'];
            $sortMap[$time] = $content;
          } else {
            $otherStuff[$delta] = $content; 
          }
        }
        if ($count>1) {
          // we need to sort and rebuild the set, and assign it to host field
          ksort($sortMap);
          $finalMap = array();
          $delta = -1;
          foreach ($sortMap as $item) {
            $delta++;
            $finalMap[$delta] = $item;
          }
          foreach ($otherStuff as $delta => $item) {
            $finalMap[$delta] = $item;
          }
          $wrapper->$hostFldName = $finalMap;
        }
      }
      $p_wrapper->save();
    }
  }
}

function _fin_migrate_handler_collection($hostFldName, $sets, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey=0) {

/*
$collection = entity_create('field_collection_item', array('field_name' => 'field_user_location'));
$collection->setHostEntity('user', $user);
$fc_wrapper = entity_metadata_wrapper('field_collection_item', $collection);
$fc_wrapper->field_land_phone->set($object['Phone Number']);

    foreach ($fields as $dstFldName => $params) {
        $oldname = $params['fldname'];
        $keyFldNames[$dstField] = $oldname;
      }
*/
//debugBrrreak();

  $oldNew_col = array();
  $newOld_col = array();
  $variable = 'fin-migrate-oldnew-collection';
  $oldNews = _fin_migrate_get_best_map($variable);
  if ($oldNews) {
    $oldNew_col = unserialize($oldNews['oldnew']);
    $newOld_col = unserialize($oldNews['newold']);
  }
/*
  What do we need to track?
  DST
   Collection ID
   Host Fldname
   Host Nid
   Bundle (for paragraphs)

  SRC
   table name
   search ID (like Fund ID used to get records from fundcontactgs
   row id & fieldname (specify in nodemaparr)
*/
  $fields = $sets['fields'];
  $params = $sets['params'];
  
  $pKeyName = $primeKeyFldName;
  $pKey = 0;
  if ($pKeyName) {
      $pKey = $inData->$pKeyName;    
  }

  if ( isset($params['oldtable']) ) {
    $srcTable = $params['oldtable'];
    $pKeyName = $primeKeyFldName;
    if (!isset($primeKeyFldName)) {
      $primeKeyFldName = $params['oldkeyfldname'];
      $primeKey = $inData->$primeKeyFldName;
      $pKeyName = $primeKeyFldName;
    }
    if (isset($params['oldkeyfldname'])) {
      $pKeyName = $params['oldkeyfldname'];
    }
    
    $pKey = $inData->$primeKeyFldName;
    
    if (isset($params['key-alias'])) {
      $pKeyName = $params['key-alias'];
    }
    $rowKeyFldName = $pKeyName;
    if (isset($params['rowkeyfldname'])) {
      $rowKeyFldName = $params['rowkeyfldname'];
    }

    $res = _fin_migrate_get_best_additional_table_data($srcTable, $pKeyName, $pKey);
$message = "Fldname: ".$hostFldName." Sets contain: ".print_r($sets,true);
watchdog('FIN_MIGRATE_COLLECTION', $message, array(), WATCHDOG_INFO);
  
    if ($res && isset($params['onerow'])) {
      $key = $params['onerowkeyname'];
      $fld = $params['onerowfldname'];
      $rws = $res;
      $res = '';
      $rwfld = array();
      foreach ($rws as $rw) {
        $vl = $rw->{$fld};
        $ky = (string) $rw->{$key};
        $rwfld[$ky]=$vl; 
      }
      $res[] = (object) $rwfld;
    }
  } else {
    $res = array($inData);
  }
  if ($res) {
    $wrappers = array();
    foreach ($res as $rw) {
      $newCollection = entity_create('field_collection_item', array('field_name' => $hostFldName));

      $newCollection->setHostEntity('node', $entity);
      $fc_wrapper = entity_metadata_wrapper('field_collection_item', $newCollection);

      $flds = $sets['fields'];
      _fin_migrate_process_fields($flds, $rw, $fc_wrapper, $entity, $termMap, $pKeyName, $pKey, "collection");

      $wrapper[] = $fc_wrapper;
    }
  }
  
  // We save everything at once, a cheap form of atomicity
  foreach ($wrapper as $fc_wrapper) {
    $fc_wrapper->save();
  }
  $wrapper->save();
}

function _fin_migrate_update_migrate_table($pseudonym, $nid, $collection_id, $id, $srcItem_id, $dst_type, $collection_name, $srcTable, $srcKeyName, $paragraph_bundle='') {

//bugBrrreak();

  $sql = 'INSERT INTO {fin_migrate} (pseudonym, src_id, nid, src_item_id, collection_id, dst_type, collection_name, paragraph_bundle, src_table_name, src_key_name) vALUES("'.$pseudonym.'", '.$id.', '.$nid.', '.$srcItem_id.', '.$collection_id.', "'.$dst_type.'", "'.$collection_name. '","'.$paragraph_bundle.'","'.$srcTable.'", "'.$srcKeyName.'")';
  $res = db_query($sql);

/*
`pseudonym` varchar(64) NOT NULL,
  `dst_type` varchar(64) NOT NULL,
  `src_id` int(11) NOT NULL,
  `nid` int(11) NOT NULL,
  `src_item_id` int(11) NOT NULL,
  `collection_id` int(11) NOT NULL,
  `collection_name` varchar(64) NOT NULL,
  `paragraph_bundle` varchar(64) NOT NULL,
  `src_item_name` varchar(64) NOT NULL,
  `src_key_name` varchar(64) NOT NULL,
  `src_table_name` varchar(64) NOT NULL,
*/    
}

function _fin_migrate_process_fields($fields, $inData, &$wrapper, &$entity, $termMap,$primeKeyFldName='', $primeKey=0, $collection='') {
  foreach ($fields as $handler => $sets) {
    foreach ($sets as $dstFldName => $params) {
      _fin_migrate_process_field($handler, $dstFldName, $params, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey, $collection);
    }
  }
}

function _fin_migrate_process_field($handler, $dstFldName, $params, $inData, &$wrapper, &$entity, $termMap, $primeKeyFldName='', $primeKey='', $collection='') {

  $statusArr = array(
    'Active' => 340,
    'Inactive' => 341,
  );    

  $val = '';
  if ( isset($params['fldname']) ) {
    if ( !empty($params['fldname']) ) {
      $fldName = $params['fldname'];
      $val = $inData->$fldName;
    }
  }
  else if ( isset($params['value']) ) {
    $val = $params['value'];
  }

  //$dstVal = $wrapper->$dstFldName;
  //if (!empty($val)) {
//  if (!empty($val) || !empty($dstval)) {
  if (1) {
    $action = $handler;

$message = "Action: ".$action." Field: ".$dstFldName." Val: ".print_r($val,true);
watchdog('PROCESS FIELD', $message, array(), WATCHDOG_INFO);

    switch ($action) {
      case 'node-title':
        $wrapper->title = $val;
      break;
      case 'node-body':
        if (!$val) {
          $val = " ";
        }
        $wrapper->body->value = $val;
        $wrapper->body->summary = $val;
        $wrapper->body->format = 'filtered_html';
      break;
      case 'node-date2date':
        $out = strtotime($val);
        $wrapper->$dstFldName = $out;
      break;
      case 'node-inactive-status':
        $out = 1;
        if ((int) $val) {
          $out = 0;
        }
        $wrapper->status = $out;
      break;
      case 'node-value-status':
        $wrapper->status = $val;
      break;
      case 'consolidate':
        // use when you have an address1, address2, address3 to map to 2 fields
        $out = _fin_migrate_handle_consolidate($nodeMapArr);
        $wrapper->$dstFldName = $out;
      break;
      case 'name2uid':
        $account = user_load_by_name($val);
        $out = $account->uid;
        $wrapper->$fldName = intval($out);
      break;
      case 'value' :
        $out = $params['value'];
        $wrapper->$fldName = $out;
      break;
      case 'value2term':
        if (isset($params['handler'])) {
          $handl = $params['handler'];
          switch ($handl) {
            case 'negate':
              $raw = (int) $val;
              if ($raw) {
                $val = 0;
              } else {
                $val = 1;
              }
             break;
          }
        }
        $vid = $params['voc'];
        $values = $params['values'];
        $name = $values[$val];
        $term = _fin_migrate_get_tid_by_name($name, $vid);
        $term2 = taxonomy_get_term_by_name($name, $vid); 
        if ($term) {
          $wrapper->$dstFldName = intval($term);
        } 
      break;
      case 'tid2term':
        if (isset($params['handler'])) {
          $handl = $params['handler'];
          switch ($handl) {
            case 'negate':
              $raw = (int) $val;
              if ($raw) {
                $val = 0;
              } else {
                $val = 1;
              }
             break;
          }
        }
        $out = $val;
        $wrapper->$dstFldName = intval($out);
      break;
      case 'lu2currency':
        $fallback = array(
          'US Dollar' => 'United States Dollar',
        );
        if ($val) {
          if (isset($termMap[$fldName]['oldterms'][$val])) {
            $name = $termMap[$fldName]['oldterms'][$val];
            $tid = 0;
            if (isset($termMap[$fldName]['newterms'][$name])) {
              $tid = $termMap[$fldName]['newterms'][$name];
            }
            // because names were altered, above is hit-and-miss. This is a fallback
            if (!$tid) {
              if (isset($fallback[$name])) {
                $name = $fallback[$name];
                $tid = $termMap[$fldName]['newterms'][$name];
              }
            }
            if ($tid) {
              $wrapper->$dstFldName = $tid;
            } else {
              $message = 'Old Term: ".$name." (".$val.") Field: ".$dstFldName." Unmatched';
              watchdog('FIN_MIGRATE_lu2term', $message, array(), WATCHDOG_INFO);
            }
          }
        }
      break;
      case 'lu2term':
        $fallback = array(
          'US Dollar' => 'United States Dollar',
        );
        if ($val) {
          if (isset($termMap[$fldName]['oldterms'][$val])) {
            $tid = 0;
            $term = $termMap[$fldName]['oldterms'][$val];
            // because names were altered, above is hit-and-miss. This is a fallback
            if (isset($termMap[$fldName]['newterms'][$term])) {
              $tid = $termMap[$fldName]['newterms'][$term];
            }              
            if (!$tid) {
              $name = $fallback[$term];
              if (isset($termMap[$fldName]['newterms'][$name])) {
                $tid = $termMap[$fldName]['newterms'][$name];
              }
            }
            if ($tid) {
              $wrapper->$dstFldName = $tid;
            }
          }
        }
      break;
      case 'lu2state':
        $out = $states[$val];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'lu2country':
        $out = $countries[$val];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'majorminor':
        $majorId = $inData->MajorStyleID;
        if ($majorId) {
          $majorName = $termMap['MajorStyleID']['oldterms'][$majorId];
          $majorTid = $termMap['MajorStyleID']['newterms'][$majorName];

          $minorId = $inData->MinorStyleID;
          if ($minorId) {
            $minorName = $termMap['MinorStyleID']['oldterms'][$minorId];
            $minorTid = $termMap['MinorStyleID']['newterms'][$minorName];
            if ($minorTid && $majorTid) {          
              $out = array(
                array('target_id' => $majorTid),
                array('target_id' => $minorTid),
              );
              $wrapper->$dstFldName = $out;
            } else {
              $message = t('PROBLEM: Major: %majorname | ID: %majorid | Tid: %majortid || Minor: %minorname | ID: %minorid | Tid: %majorid', array(
                 '%majorname' => $majorName,
                 '%majorid' => $majorId,
                 '%majortid' => $majorTid,
                 '%minorname' => $minorName,
                 '%minorid' => $minorId,
                 '%minortid' => $minorTid
                )
              );
            }
          }
        }
      break;    
      case 'majorminorxxx':
        $obj = taxonomy_vocabulary_machine_name_load('major_minor_styles');
        $vid = $obj->vid;
        $fields = $params['fields'];
        $set = array();
        foreach ($fields as $fld) {
          $name = $termMap[$fld]['oldterms'][$val];
          $term = taxonomy_get_term_by_name($name, $vid);
          $tid = $term->term_id;
          $level = count(taxonomy_get_parents_all($tid));
          $set[$tid] = $level;
        }
        if ($set) {
          $winner = 0;
          $topTid = 0;
          foreach ($set as $tid=>$level) {
            if ($level>$winner) {
              $winner = $level;
              $topTid = $tid;
            }
          }
          if ($topTid) {
            $wrapper->$dsFldName = $topTid;
          }
        }
      break;    
      case 'array2term':
        $oldTerm = $params['values'][$val];
        $term = $termMap[$fldName]['oldterm'][$oldTerm];
        $out = $termMap[$fldName]['newterm'][$term];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'http2link':
        $url = strtolower(trim($val));
        if (!isset($params['title'])) {
          $title = $url;
        } else {
          $title = $params['title'];
        }
        if ($url) {
          $parsed = parse_url($url);
          if (empty($parsed['scheme'])) {
            $url = 'http://' . ltrim($url, '/');
          }               
          if (!$url) {
            $wrapper->$dstFldName->set(array(
              'title' => '',
              'url' => '',
            ));
          } else {
            $wrapper->$dstFldName->set(array(
              'title' => $title,
              'url' => $url,
            ));

            //$wrapper->$dstFldName->url = $out;
            //$wrapper->$dstFldName->title = $url;
            //$wrapper->$dstFldName->attributes = array('title'=>'Go Here', 'target'=>'_new');
          }
        }
      break;
      case 'mixed2link':
        $url = strtolower(trim($val));
        if (!isset($params['title'])) {
          $title = $url;
        } else {
          $title = $params['title'];
        }
        if ($url) {
          $parsed = parse_url($url);
          if ($parsed) {
            $message = $dstFldName ." may have URL. Data: ".print_r($parsed,true);
            watchdog('FIN_MIGRATE_URL_CHECK', $message, array(), WATCHDOG_INFO);

            if (empty($parsed['scheme'])) {
              $url = 'http://' . ltrim($url, '/');
            }               
            if (!$url) {
              $wrapper->$dstFldName->set(array(
                'title' => '',
                'url' => '',
              ));
            } else {
              $wrapper->$dstFldName->set(array(
                'title' => $title,
                'url' => $out,
              ));
            }
          }
        }
      break;
      case 'text2email':
        if ($val) {
          $out = trim($val);
          $wrapper->$dstFldName = $val;
        }
      break;
      case 'foia2notes':
        if (isset($params['names'])) {
          $names = $params['names'];
          $notes = array();
          foreach ($names as $fld) {
              $notes[] = $inData->{$fld};
          }
          if ($notes) {
            $out = implode(" | ", $notes);
            if ($out) {
              $wrapper->{$dstFldName} = $out;
            }
          }
        }
      break;
      case 'html2history':
        if ($val) {
          $out = array();
          $items = explode('<br/>', $val);
          foreach ($items as $item) {
            $date = strtotime(substr($item, 0, 10));
            $wrapper->$dstFldName = $out;
          }
        }
      break;
      case 'picture':
        $imgpath = base_path() . 'migration/' . $val;
        $filename = basename($imgpath);
        $title = $wrapper->title_field;
        if (file_exists($imgpath)) {
          $file = (object) array(
            'uri' => $imgpath,
            'filemime' => file_get_mimetype($imgpath),
            'status' => 1,
            'title' => $title,
          );
          $drupalfile = file_copy($file, 'private://pictures/');
          $wrapper->dsfFldName = (array) $drupalfile;
        }
      break;
      case 'address':
        $out = _fin_migrate_handler_address($dstFldName, $params, $inData, $wrapper, $termMap);
        //$wrapper->$dstFldName = $out;
        foreach ($out as $fldName => $val) {
          $wrapper->$dstFldName->$fldName = trim($val);
        }
      break;
      case 'reference':
        $refArray = array(
          'ConsultantOfficeID'=>'office',
          'ConsultantFirmID' => 'consultant firm',
          'ConsultantContactID' => 'consultant contact',
          'ManagerContactID' => 'manager contact',
          'ManagerFirmID' => 'manager firm',
          'FundContactID' => 'plan contact',
          'FundID' => 'plan',
          'MandateID' => 'mandate'
        );

//debugBrrreak();
        $oldKeyFldName = $params['fldname'];
        $pseudonym = $refArray[$oldKeyFldName];
        $oldNews = _fin_migrate_get_best_map();
        $ref = unserialize($oldNews['oldnew']);
        $new = $ref[$pseudonym][$val];
        if ($new) {
          $wrapper->$dstFldName = $new;
        }

/* One field at a tgime, like the other handlers
        $flds = $params['fields'];
        if ($flds) {
          foreach ($flds as $dstFld => $fld) {
            $oldKeyFldName = $fld['fldname'];
            $pseudonym = $refArray[$oldKeyFldName];
            $vl = $inData->$oldKeyFldName;
            $oldNews = _fin_migrate_get_best_map();
            $ref = unserialize($oldNews['oldnew']);
            $new = $ref[$pseudonym][$vl];
            if ($new) {
              $wrapper->$dstFld = $new;
            }
          }
        }
*/
      break;
      case 'inactive2term':
        $name = 'Active';
        // if TRUE, inactive. Booleans should be positive, not negative, this is why 
        // we have special handling here
        if ($val) {
          $name = 'Inactive';
        }
        //$vid = intval($params['voc']);
        //$term = _fin_migrate_get_tid_by_name($name, $vid);
        //$out = $term->tid;
        $out = $statusArr[$name];
        $wrapper->$dstFldName = $out;
      break;
      case 'status2term':
        $name = 'Active';
        // if TRUE, inactive. Booleans should be positive, not negative, this is why 
        // we have special handling here
        if (!$val) {
          $name = 'Inactive';
        }
//$out = $termMap[$fldName]['newterm'][$term];
        //$vid = intval($params['voc']);
        //$term = _fin_migrate_get_tid_by_name($name, $vid);
        //$out = $term->tid;
        $out = $statusArr[$name];
        $wrapper->$dstFldName = intval($out);
      break;
      case 'date2timestamp':
        if($val && $val<>'0000-00-00 00:00:00') {
          $out = strtotime($val);
          $wrapper->$dstFldName->set($out);
        }
      break;
      case 'date2date':
        $out1 = strtotime($val);
        $out2 = date('Y-m-d H:i:s', $out1);
        $out = $out2;
        $wrapper->$dstFldName->set(array(
          'value' => $out,
          'value2' => $out,
        ));
      break;
/*
case 'comma-delimited-delta-default':
break;
case 'field_manager_firm_er':
break;

*/
      case 'comma-delimited-delta-default':
        $delta = $inData['fin-delta'];
        $arr = explode(',',$arr);
        $out = $arr[$delta];
        $wrapper->$dstFldName = $out;
      break;
      case 'comma-delimited-er':
        $delta = $inData['fin-delta'];
        $arr = explode(',',$arr);
        $old = $arr[$delta];
        $oldNew = _fin_migrate_get_best_map();
        $out = $oldnew['map'][$oldKeyName]['oldnew'][$old];
        $wrapper->$dstFldName = $out;
      break;
///////////////      
//zzzzzzzzzzz
      case 'employmentdate':
        if ($val) {
          // $val is a row id for target row
          $rowid = $val;
          $table = $params['tbl'];
          $contactNameFldName = $params['contactnamefldname'];
          $contactName = $inData->{$contactNameFldName};

          // Global variable $empDates is array built at beginning of run
          $set = $global_empDates[$contactName];
          // the next key is a sort value, id it so I can find the target row
          $date1 = $set[$table][$rowid]['start'];
          $date2 = $set[$table][$rowid]['end'];
          $wrapper->{$dstFldName}->set(array(
            'value' => $date1,
            'value2' => $date2
          ));
        }
      break;
    
////////////////////
      case 'collection':
//debugBrrreak();
        $newInData[] = $inData;
        if (isset($params['multiplier'])) {
          $multi = $params['multiplier'];
          $handlr = $multi['handler'];
          $parms = $multi['params'];
          $tbl = $multi['oldtable'];
          $kyfld = $multi['oldkeyfldname'];
          $ky = $inData[$kyfld];
          $fld = $multi['oldfldname'];
          $multiArr = _fin_migrate_get_multiplier($handlr, $tbl, $kyfld, $ky, $fld);
          $newInData = array();
          foreach ($multiArr as $multiFld => $multiVal) {
            $inData->$multiFld = $multiVal;
            $newInData[] = $inData;
          }
        }
        $collections = $params['sets'];
        foreach ($newInData as $inData) {
          foreach ($collections as $collection) {
            _fin_migrate_handler_collection($dstFldName, $collection, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey);
          }
        }
      break;
      case 'paragraph':          
        //$paragraphs = $map['paragraph'];
        $bundle = $params['param']['bundle'];
        $newInDatga[] = $inData;
        if (isset($params['multiplier'])) {
          $multi = $params['multiplier'];
          $handlr = $multi['handler'];
          $parms = $multi['params'];
          $tbl = $multi['oldtable'];
          $kyfld = $multi['oldkeyfldname'];
          $ky = $inData[$kyfld];
          $fld = $multi['oldfldname'];
          $multiArr = _fin_migrate_get_multiplier($handlr, $tbl, $kyfld, $ky, $fld);
          $newInData = array();
          foreach ($multiArr as $multiFld => $multiVal) {
            $inData->$multiFld = $multiVal;
            $newInData[] = $inData;
          }
        }
        $paragraphs = $params['sets'];
        foreach ($newInData as $inData) {
          foreach ($paragraphs as $paragraph) {
            _fin_migrate_handler_paragraph($bundle, $dstFldName, $paragraph, $inData, $wrapper, $entity, $termMap, $primeKeyFldName, $primeKey);
          }
        }
      break;
      case 'note-comment-to-note':
        $deltas = count($wrapper->$dstFldName);
        $sources = array(
          '242' => 'mccue@fin-news.com',
          '260' => 'gar guymoso@Yahoo.com',
        );
        $sourceid = $inData->SourceID;
        $sql = 'select uid from {users} where mail="'.$sources[$sourceid].'"';
        db_set_active();
        $res = db_query($sql);
        foreach ($res as $item) {
          $uid = $item->uid;
        }
        $sourcedate = $inData->SourceDate;
        if (stripos($sourcedate, 'ear)-(Month-Day')) {
          $date = time(0);
        } else {
          $date = strtotime($sourcedate);
        }
        $comment = $inData->Comments;
        $wrapper->$dstFldName[$delta]->field_mandate_note_author = $uid;
        $wrapper->$dstFldName[$delta]->field_note_author = $uid;
        $wrapper->$dstFldName[$delta]->field_date = $date;
        $wrapper->$dstFldName[$delta]->field_mandate_note = $comment;
      break;
      case 'note-history-to-note':
        $sourceid = $inData->SourceID;
        $sql = 'select uid from {users} where mail="'.$sources[$sourceid].'"';
        db_set_active();
        $res = db_query($sql);
        foreach ($res as $item) {
          $uid = $item->uid;
        }
        $history = $inData->History;
        $split_pattern = "/^|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])|[0-9]{4}-(0[1-9]$/";
        $raw = preg_split($pattern, $history, NULL, PREG_SPLIT_DELIM_CAPTURE);
        $count = count($raw);
        $raw[] = '';
        $content = array();
        for ($x=0; $x<$count; $x+2) {
          $date = $raw[$x];
          $entry = $raw[$x+1];
          if ($date) {
            $time = strtotime($date);
            $content[$time] = $entry;
          }
        }
        if ($content) {
          $set = array();
          $delta = count($wrapper->$dstFldName);
          foreach ($content as $time => $entry) {
            $wrapper->$dstFldName[$delta]->field_date = $time;
            $wrapper->$dstFldName[$delta]->field_note_author = $uid;
            $wrapper->$dstFldName[$delta]->field_mandate_note_author = $uid;
            $wrapper->$dstFldName[$delta]->field_mandate_note = $entry;
            $delta++;
          }
        }
      break;
      case 'note-comments-to-note':        
        $uid = 1;
        $delta = count($wrapper->$dstFldName);
        foreach ($inData as $row) {
          $entry = $row->Comment;
          $date = $row->Created;
          $wrapper->$dstFldName[$delta]->field_date = $time;
          $wrapper->$dstFldName[$delta]->field_note_author = $uid;
          $wrapper->$dstFldName[$delta]->field_mandate_note_author = $uid;
          $wrapper->$dstFldName[$delta]->field_mandate_note = $entry;
          $delta++;
        }
      breakl;
      case 'diskfreespace()abled':
      break;
      case 'asset-allocation':
        //          '7' => 'field_aa_international_fixed_income',
        $allocationFieldMap = array(
          '2' => 'field_aa_domestic_equities',
          '3' => 'field_aa_domestic_fixed_income',
          '4' => 'field_aa_alternative_strategies',
          '5' => 'field_aa_hedge_fund_strategies',
          '6' => 'field_aa_international_equities',
          '7' => 'field_aa_intl_fixed_income',
          '8' => 'field_aa_mutual_fund',
          '10' => 'field_aa_private_equity',
          '11' => 'field_aa_real_estate',
          '12' => 'field_aa_real_assets',
          '13' => 'field_aa_cash_other',
          '14' => 'field_aa_balanced',
          '15' => 'field_aa_global_equities',
          '16' => 'field_aa_absolute_return',
          '18' => 'field_aa_global_fixed_income',
          '19' => 'field_aa_credit_opportunities',
          '20' => 'field_aa_real_return',
          '21' => 'field_aa_multi_asset',
          '22' => 'field_aa_emerging_markets_equity',
          '23' => 'field_aa_risk_parity',
          '24' => 'field_aa_canadian_equities',
        );
        $messageArr = array();
        foreach ($inData as $ky => $vl) {
          $fldName = $allocationFieldMap[$ky];
          $wrapper->{$fldName} = $vl;
          $messageArr[] = "Fieldname: ".$fldName." = ".$vl."%";   
        }
        $message = "For ".$wrapper->label()." assign ".print_r($messageArr,true);
        watchdog("FIN_MIGRATE Asset Allocation", $message, array(), WATCHDOG_INFO);

        //$keyFldName = $params['keyfldname'];
        //$fid = $inData->$keyFldName;
        //$dstFldName = $allocationFieldMap[$fid];
        //$out = $inData->percentage;
        //if ($out) {
          //$wrapper->$dstFldName = $out;
        //}

//bugBrrrk();

      break;
      
      case 'asset-allocationxxx':
        $allocationFieldMap = array(
          '2' => 'field_aa_domestic_equities',
          '3' => 'field_aa_domestic_fixed_income',
          '4' => 'field_aa_alternative_strategies',
          '5' => 'field_aa_hedge_fund_strategies',
          '6' => 'field_aa_international_equities',
          '7' => 'field_aa_international_fixed_income',
          '8' => 'field_aa_mutual_fund',
          '10' => 'field_aa_private_equity',
          '11' => 'field_aa_real_estate',
          '12' => 'field_aa_real_assets',
          '13' => 'field_aa_cash_other',
          '14' => 'field_aa_balanced',
          '15' => 'field_aa_global_equities',
          '16' => 'field_aa_absolute_return',
          '18' => 'field_aa_global_fixed_income',
          '19' => 'field_aa_credit_opportunities',
          '20' => 'field_aa_real_return',
          '21' => 'field_aa_multi_asset',
          '22' => 'field_aa_emerging_markets_equity',
          '23' => 'field_aa_risk_parity',
          '24' => 'fi_aa_canadian_equities',
        );
        $keyFldName = $params['keyfldname'];
        $dstFldName = $allocationFieldMap[$keyFldName];
        $wrapper->$dstFldName = $val;
      break;
      default:
        $out = $val;
        if ($out) {
          $wrapper->$dstFldName = $out;
        }
      break;
    }
    //return $out;
    return TRUE;
  }
}

function _fin_migrate_get_multiplier($handler, $oldTable, $oldKeyFldName, $oldKey, $returnFldName) {
  switch($handler) {
    case 'external-table':
      $rs = _fin_migrate_get_best_additional_table_data($oldTable, $oldKeyFldName, $oldKey);
      $out = array();
      foreach ($rs as $r) {
        $out[] = array('fldname'=>$returnFldName, 'value'=>$r->$returnFldName);
      }
      break;
    }
    if ($out) {
      return $out;
    }
}

function _fin_migrate_get_tid_by_name($name, $vid) {
//debugBreak();
  db_set_active();
  $sql = "select tid from {taxonomy_term_data} where vid=".$vid." and name='".$name."' limit 1";
  $res = db_query($sql);
  foreach ($res as $item) {
    $tid = $item->tid;
  }
  return $tid;
}

function _fin_migrate_handler_system($inArr, $inData, &$wrapper, &$entity, $termMap) {
  $fields = $inArr['fields'];
  // currently we only have fields section to process
//debugBrrreak();
  _fin_migrate_process_fields($fields, $inData, $wrapper, $entity, $termMap);
}

/*
 * Function to calculate Employment dates w/CreatedOn & UpdatedOn fields
 *
 * @Summary - The old database does not provide employment dates. So 
 * this function uses CreatedOn and UpdatedOn dates from each record in
 * tables tblconsultantcontacts, tblfundcontacts, tblmanagercontacts to
 * Calculate them.  Logic is as follow:
 * 
 * For Each record = a job
 * All Job Start Date = CreatedOn, in Unix format (# of seconds since 1/1/1970
 * For the most recent job, end = updatedOn if inactive=1, 0 otherwise
 * For other jobs, end = previous createdOn - 1 day, all set to inactive
 *
 * UPDATE: Original plan was a specific purpose task, but now it expanded
 * to process fields as well, given the map and term map as input.  So not 
 * do we build an array of employemt dates, but also embed translated, migrated
 * data with data assigned to the destination fields.  This way, the heavy lifting is
 * done at once and it simplifies the code that acxtually creates the paragraphs.
 */
function _fin_migrate_prep_employment_dates() {
  // first, harvest the data from tblfundcontacts, tblmanagercontacts, 
  // tblconsultantcontacts
  $datesArr = array();

  // variable returns 2 arrays, 'jobs' and 'res' [contactnames]
  $arrs = unserialize(variable_get('fin-migrate-contact-employment-data'));

debugBreak();
  if (!$datesArr) {
    $arrs = _fin_migrate_build_datesArr();
  }
  return $arrs;
}

function _fin_migrate_build_datesArr() {
  $tbl = 'tblconsultantcontacts';
  $id = 'ConsultantContactID';
  $arr = _fin_migrate_grab_job_data($tbl, $id, $datesArr);

debugBreak();

  $tbl = 'tblfundcontacts';
  $id = 'FundContactID';
  _fin_migrate_grab_job_data($tbl, $id, $datesArr);

  $tbl = 'tblmanagercontacts';
  $id = 'ManagerContactID';
  _fin_migrate_grab_job_data($tbl, $id, $arr);

  // now we have a full array, build an array of distinct contact names
  $names = array();
  foreach ($arr as $contactName => $ignore) {
    $names[$name] = $name;
  }

  // now, start filling in start & end dates in dates array
  // We sort each set in reverse order, so we can harvest the start date of one job
  // for the next record
  // If you are curious, 86400 is the number of seconds in 1 day, I added 60 seconds
  // to it so a midnight start date becomes 11:59PM the day before
  foreach ($names as $contactName) {
    $set = $datesArr[$contactName];
    krsort($set);
    $solo = TRUE;
    if (count($set)>1) {
      $solo = FALSE;
    }
    $firstRow = TRUE;
    foreach ($set as $start => $more) {
      foreach ($more as $tbl => $yetmore) {
        foreach ($yetmore as $rowid => $data) {
          $arr[$contactName][$tbl][$rowid]['start'] = strtotime($data['createdon']);

debugBreak();

          if ($solo) {
            if ($data['inactive']) {

debugBreak();

              $arr[$contactName][$tbl][$rowid]['end'] = strtotime($data['updatedon']);
            }
          } else {

debugBreak();

            //multiple rows
            if ($firstRow) {
              //we are at the latest job
              if ($data['inactive']) {
                $arr[$contactName][$tbl][$rowid]['end'] = strtotime($data['updatedon']);
              }
              $nextEndDate = strtotime($data['CreatedOn'])-86400;
              $firstRow = FALSE;
            } else {
              $start = strtotime($data['Createdon']);
              if ($start<=$nextEndDate) {
                // If a new job is entered less than 24 hours after an 
                // old job is updated (unlikely), end date would be less
                // than start date, so fix that
                $nextEndDate = $start+28800;
              }
              $arr[$contactName][$tbl][$rowid]['end'] = $nextEndDate;
              $arr[$contactName][$tbl][$rowid]['inactive'] = 1;              
              $nextEndDate = strtotime($data['CreatedOn'])-86460;
            }
          }
        }
      }
    }
  
    // now that we are done with the sorting field, transfer
    // to a new array we can access easily later on
    $jobs = array();
    $names = array();
    foreach ($arr as $contactName => $more) {
      foreach ($more as $sort => $yetmore) {
        foreach ($yetmore as $tbl => $evenmore) {
          foreach ($yetmore as $rowid => $data) {
            $jobs[$contactName][$tbl][$rowid] = $data;
            $names[$contactName] = array(
              'tbl' => $tbl,
              'rowid' => $rowid,
            );
          }
        }
      }
    }
  }

debugBreak();
  $out = array('jobs'=>$jobs, 'res'=>$names);
  return $out;
}

function _fin_migrate_grab_job_data($tbl, $id, &$out) {

debugBreak();

  $sql = "SELECT ContactName, %id as id, Inactive, CreatedOn, UpdatedOn from {%tbl}";
  db_set_active('legacy');
  $res = db_query($sql, array('%id'=>$id, '%tbl'=>$tbl));
  db_set_active();
  if ($res) {
    foreach ($res as $row) {
      //use 

debugBreak();

      $rowid = $row->id;
      $contactName = $row->ContactName;
      $sort = strtotime($row->CreatedOn);
      $out[$contactName][$sort][$tbl][$rowid] = array(
        'createdon' => $row->CreatedOn,
        'inactive' => $row->Inactive,
        'updatedon' => $row->UpdatedOn,
        'start' => 0,
        'end' => 0,
      );
    }
  }
}
  
function _fin_migrate_prep_terms(&$termMap) { 
  
  //debugBreak();

  // Fill taxonomy array with new terms
  foreach ($termMap as $pseudonym => $settings) {
    $termIDField = $settings['oldfldname'];
    $out = array();
    if ( isset($settings['table']) ) {
      $id = $termIDField;
      $name = $settings['termfield'];
      $table = $settings['table'];
      db_set_active('legacy'); // Switch databases.
      $sql = "select ".$id." as id, ".$name." as name from {".$table."}";
      $terms = db_query($sql);
      db_set_active();
      foreach ($terms as $term) {
        $out[$term->id] = $term->name;
      }
    }
    else {
      $terms = $settings['values'];
      foreach ($terms as $id => $name) {
        $out[$id] = $name;
      }
    }
    $termMap[$termIDField]['oldterms'] = $out;

    $out = array();
    $vid = $settings['newvoc'];
    if ($vid) {
      $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vid));
      foreach ($terms as $term) {
        $out[$term->name] = $term->tid;
      }
      $termMap[$termIDField]['newterms'] = $out;
      $termMap[$termIDField]['newvoc'] = $vid;  
    }
  }
}

/*
 * Function that checks Drupal Variable Store for ongoing maps/node progress list.
 * For Found 1 Node transfers, we maintain 2 copies of old ID/NID lists, for Round 2,
 * Similar lists tracking what nodes are filled out. We maintain a double set of each
 * for fault tolerance, since both of these sets of numbers are mission-critical.
 * 
 * @parameters
 *  $var1 - the variable name of the 1st copy of the list
 *  $var2 - the name of the backup copy
 *  $check1 - the newold list
 *  $check2 - the oldnew list
 */
function _fin_migrate_get_best_map($name='fin-migrate-node') {
  $name1 = $name .'1';
  $name2 = $name . '2';
  // PLW 090115 first thing to figure out whether we are beginning or resuming.
  // Its a bit complicated. We have 2 variables set at different times so if
  // 1 is interrupted during an update, the other survives. We can have a busted
  // variable, or w/in a variable, a busted new/old key map.
  $proceed = FALSE;
  $out = array();
  if ( $out = unserialize(variable_get($name2)) ) {
    // so far, so good. But old/new key map may be corrupted. Check for it.
    if ( isset($out['oldnew']) && isset($out['newold']) ) {
      $proceed = TRUE;
    }
  }
  // okay, something went wrong and the updated data was irretrievable, lets try the backup set
  if (!$proceed) {
    // uncap when done 
    //variable_set('fin-migrate-node2', array());
    if ( $out = unserialize(variable_get($name1)) ) {
      // so far, so good. But old/new key map may be corrupted. Check for it.
      if ( isset($out['oldnew']) && isset($out['newold']) ) {        
        $message = "Recovering from an abort or failure. Deleting latest node and using 1 node old data - ";
        watchdog('FIN_MIGRATE_OLDNEW',$message,array(),WATCHDOG_WARNING);   
      }
    }
  }
  // If both come up blank, this is a new migration, not a resumption
  return $out;
}

function _fin_migrate_update_map($name, $oldNew, $newOld) {
  $var1 = $name .'1';
  $var2 = $name . '2';
  $saveArr = array(
    'oldnew' => serialize($oldNew),
    'newold' => serialize($newOld),
  );
  variable_set($var1, serialize($saveArr));
  variable_set($var2, serialize($saveArr));
}

/**
 * Function to migrate all nodes, taxonomy references, files, fields
 *
 * @parameter
 *  $oldnew - array of old indexes mapped with new indexes, filled with UIDs at
 * the beginning of this function. Structure -
 *     ['map']['uid']['oldnew'] = array($olduid, $newuid)
 *     ['map']['uid']['newold'] = array($newuid, $olduid)
 **/
function _fin_migrate_batch_nodes(&$context) {

  $nm_cf = array(
    'consultant firm' => array(
      'params' => array(
        'oldtable' => 'tblconsultantfirms',
        'oldkeyfldname' => 'ConsultantFirmID',
        'dst'=>'consultant_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ConsultantFirmName'),
          ),
          'node-body' => array(
            'body' => array('fldname'=>'Comments'),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
          'field_aua' => array('fldname'=>'AUA'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'inactive2term' => array(
          'field_status_tr' => array('fldname'=>'Inactive'),
        ),
      ),
    ),
  );

  //'ldtable' => 'tblfunds',
  $nm_p = array(
    'plan' => array(
      'params' => array(
        'oldtable' => 'tblfunds',
        'oldkeyfldname' => 'FundID',
        'dst' => 'plan',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'FundName'),
          ),
          'node-body' => array(
            'body' => array(),      
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'FundName'),
          'field_plan_acronym' => array('fldname'=>'Acronym'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink', 'title'=>'Placement Policy'),
        ),
        'lu2term' => array(
          'field_placement_policy_tr' => array('fldname'=>'PlacementPolicy'),
          'field_plan_type_tr' => array('fldname'=>'FundTypeID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
          'field_status_tr' => array('fldname'=>'Status', 'voc'=>'5'),
        ),          
        'text2email' => array(
           'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
        'collection' => array(
          'field_asset_allocation_history' => array(
            'params' => array(
            ),
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'finsearch_asset_allocations',
                  'rowkeyfldname' => 'allocation_id',                  
                  'key-alias' => 'firm_id',
                  'onerow' => 'TRUE',
                  'onerowkeyname' => 'asset_class_id',
                  'onerowfldname' => 'percentage',
                ),
                'fields' => array(
                  'asset-allocation' => array(
                    'automatically-determined' => array('fldname'=>'percentage', 'keyfldname'=>'asset_class_id'),
                  ),
                ),
              ),
            ),              
          ),
          'field_consultants_hired' => array(
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundconsultants',
                  'rowkeyfldname' => 'FundConsultantID',
                ),
                'fields' => array(
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_managers_hired' => array(
            'sets' => array(
              array(
                'params' => array(
                  'oldtable' => 'tblfundmanagers',
                  'rowkeyfldname' => 'FundManagerID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_amount' => array('fldname'=>'Amount'),                  
                  ),
                  'lu2term' => array(
                    'field_geographic_tr' => array('fldname'=>'GeographicID'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                ),
              ),
            ),              
          ),
          'field_plan_size_history' => array(
            'params' => array(
            ),
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundSizeAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_foia_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'rowkeyfldname' => 'FundID',
                ),
                'fields' => array(
                  'mixed2link' => array(
                    'field_foia_form' => array('fldname'=>'FOIAForm')
                  ),
                  'foia2notes' => array(
                    'field_foia_notes' => array('names'=>array('FOIAMethod', 'FOIAForm'))
                  ),
                  'default' => array(
                    'field_full_name' => array('fldname'=>'FOIAContactName'),
                    'field_foia_required' => array('fldname'=>'FOIA'),
                    'field_foia_date' => array('fldname'=>'FOIADate'),                  
                  ),
                ),
              ),
            ),              
          ),
        ),
      ),
    ),
  );

//////////////////////////////////////////////////////////////
  $nm_contact = array(
    'contact' => array(
      'params' => array(
        'dst'=>'contact',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'job-history' => array(
          'field_job_history' => array(
            'params' => array(
              'sourcearray' => 'global_empDates',
            ),
            'bundles' => array(
              'consultant_contact' => array(
                'params' => array(
                  'bundle'=>'consultant_contact',
                  'rowkeyfldname'=>'ConsultantContactID',
                ),
                'fields' => array(
                  'default'=>array(
                    'field_job_title'=>array('fldname'=>'Title'),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantType'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ConsultantContactID', 
                      'tbl'=>'tblconsultantcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
              'manager_contact' => array(
                'params' => array(
                  'bundle'=>'manager_contact',
                  'rowkeyfldname' => 'ManagerContactID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ManagerContactID', 
                      'tbl'=>'tblmanagercontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ContactType'),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
              'plan_contact' => array(
                'params'=> array(
                  'oldtable' => 'tblFundContacts',
                  'oldkeyfldname' => 'FundContactID',
                  'bundle' => 'plan_contact',
                  'sort' => array('fldname'=>'field_employment_date'),
                ),
                'fields' => array(
                  'default' => array(
                    'title_field' => array('fldname'=>'ContactName'),
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'FundContactID', 
                      'tbl'=>'tblFundcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),       
                  'address' => array(
                    'field_address' => array(
                      'params' => array(
                        'oldtable' => 'tblManagerFirms',
                        'oldkeyfldname' => 'ManagerFirmID',
                      ),
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),     
      ),
    ),
  );

//////////////////////////////////////////////////////////////

// manager contacts have no address, special handling, use manager firm
// fundcontact Inactive,   
  $nm_cc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblconsultantcontacts',
        'oldkeyfldname' => 'ConsultantContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'bundle'=>'consultant_contact',
                  'rowkeyfldname'=>'ConsultantContactID',
                ),
                'fields' => array(
                  'default'=>array(
                    'field_job_title'=>array('fldname'=>'Title'),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ConsultantType'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ConsultantContactID', 
                      'tbl'=>'tblconsultantcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
                    'field_consultant_office_er' => array('fldname'=>'ConsultantOfficeID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_mc = array(
    'consultant contact' => array(
      'params' => array(
        'oldtable' => 'tblmanagercontacts',
        'oldkeyfldname' => 'ManagerContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ContactName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(
              array(
                'params' => array(
                  'bundle'=>'manager_contact',
                  'rowkeyfldname' => 'ManagerContactID',
                ),
                'fields' => array(
                  'default' => array(
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'ManagerContactID', 
                      'tbl'=>'tblmanagercontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'lu2term' => array(
                    'field_consultant_type_tr' => array('fldname'=>'ContactType'),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_manager_firm_er' => array('fldname'=>'ManagerFirmID'),
                  ),
                  'address' => array(
                    'field_address' => array(
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),       
              ),
            ),
          ),
        ),     
      ),
    ),
  );

  $nm_pc = array(
    'fund contact' => array(
      'params' => array(
        'oldtable' => 'tblfundcontacts',
        'oldkeyfldname' => 'FundContactID',
        'dst'=>'contact',
        'checkname' => array('fldname'=>'ContactName'),      
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ContactName'),
            'node-body' => array(
              'body' => array('fldname'=>'Bio'),
            ),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ConsultantFirmName'),
        ),
        'picture' => array(
          'field_photo' => array('fldname'=>'Picture'),
        ),
        'paragraph' => array(
          'field_job_history' => array(
            'sets' => array(            
              array(
                'params'=> array(
                  'oldtable' => 'tblFundContacts',
                  'oldkeyfldname' => 'FundContactID',
                  'bundle' => 'plan_contact',
                  'sort' => array('fldname'=>'field_employment_date'),
                ),
                'fields' => array(
                  'default' => array(
                    'title_field' => array('fldname'=>'ContactName'),
                    'field_job_title' => array('fldname'=>'Title'),
                  ),
                  'employmentdate' => array(
                    'field_employment_date' => array(
                      'fldname'=>'FundContactID', 
                      'tbl'=>'tblFundcontacts', 
                      'contactfldname' => 'ContactName',
                    ),
                  ),
                  'inactive2term' => array(
                    'field_status_tr' => array('fldname'=>'Inactive'),
                  ),
                  'text2email' => array(
                    'field_email' => array('fldname'=>'Email'),
                  ),
                  'reference' => array(
                    'field_plan_er' => array('fldname'=>'FundID'),
                  ),       
                  'address' => array(
                    'field_address' => array(
                      'params' => array(
                        'oldtable' => 'tblManagerFirms',
                        'oldkeyfldname' => 'ManagerFirmID',
                      ),
                      'fields' => array(
                        'default' => array(
                          'thoroughfare' => array('fldname'=>array('Address')),
                          'locality' => array('fldname'=>'City'),
                          'postal_code' => array('fldname'=>'ZIP'),
                        ),
                        'phone' => array(
                          'phone_number' => array('fldname'=>'Phone'),
                          'fax_number' => array('fldname'=>'Fax'),
                        ),
                        'lu2state' => array(
                          'administrative_area' => array('fldname'=>'StateID'),
                        ),
                        'lu2country' => array(
                          'country' => array('fldname'=>'CountryID'),
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),     
        ),
      ),
    ),
  );

  $nm_mf = array(
    'manager firm' => array(
      'params' => array(
        'oldtable' => 'tblmanagerfirms',
        'oldkeyfldname' => 'ManagerFirmID',
        'dst'=>'manager_firm',
      ),
      'system' => array(
        'fields' => array(
          'node-title' => array(
            'title' => array('fldname'=>'ManagerFirmName'),
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'title_field' => array('fldname'=>'ManagerFirmName'),
        ),
        'text2email' => array(
          'field_email' => array('fldname'=>'Email'),
        ),
        'http2link' => array(
          'field_website' => array('fldname'=>'Website'),          
        ),
        'value2term' => array(
          'field_status_tr' => array('fldname'=>'Archive', 'handler'=>'negate', 'voc'=>5, 'values'=>array('0'=>'Inactive','1'=>'Active')),
        ),
        'address' => array(
          'field_address' => array(
            'fields' => array(
              'default' => array(
                'thoroughfare' => array('fldname'=>array('Address1')),
                'premise' => array('fldname'=>array('Address2', 'Address3')),
                'locality' => array('fldname'=>'City'),
                'postal_code' => array('fldname'=>'Zip'),
              ),
              'phone' => array(
                'phone_number' => array('fldname'=>'Phone'),
                'fax_number' => array('fldname'=>'Fax'),
              ),
              'lu2state' => array(
                'administrative_area' => array('fldname'=>'StateID'),
              ),
              'lu2country' => array(
                'country' => array('fldname'=>'CountryID'),
              ),
            ),
          ),
        ),
      ),
    ),
  );


///////////////////////////////////////

/*
  create view at least w/mandate & plan { FundSize

  This is going to have to run at another stage. Do not put this in the same 'run set' as the others, it goes after the first round of nodes, before or after reference.

  This is because of the stupid comma-delimited FirmsHired field, which contains
  comma-delimited references that also determine how many entries there are in the
  manager firm history. As an added bonus, so is FirmHiredSize field.
*/
  $nm_m = array(
    'mandate' => array(
      'params' => array(
        'oldtable' => 'tblmandates',
        'oldkeyfldname' => 'MandateID',
        'dst' => 'mandate',
      ),
      'system' => array(
        'fields' => array(
          'node-body' => array(
            'body' => array('fldname'=>'History'),      
          ),
          'node-inactive-status' => array(
            'status' => array('fldname'=>'Archive'),
          ),
        ),
      ),
      'fields' => array(
        'default' => array(
          'field_title' => array('fldname'=>'FundName'),
          'field_account_size' => array('fldname'=>'Size'),
          'field_plan_size' => array('fldname'=>'FundSize'),
        ),
        'date2date' => array(
          'field_mandate_date' => array('fldname'=>'MandateDate'),
          'field_rfp_date' => array('fldname'=>'RFPDate'),
        ),
        'link' => array(
          'field_placement_policy_link' => array('fldname'=>'PlacementPolicyLink'),
        ),
        'http2link' => array(
          'field_rfp_link' => array('fldname'=>'RFPLink'),
          'field_website' => array('fldname'=>'Website'),
        ),
        'lu2term' => array(
          'field_mandate_status_tr' => array('fldname'=>'StatusID'),
          'field_attribute_tr' => array(),
          'field_geographic_tr' => array('fldname'=>'GeographicID'),
          'field_currency_tr' => array('fldname'=>'CurrencyID'),
        ),
        'majorminor' => array(
          'field_major_minor_style_tr' => array('fields'=>array('major'=>'MajorStyleID', 'minor'=>'MinorStyleID')),
        ), 
        'reference' => array(
          'field_plan_er' => array('fldname'=>'FundID'),
          'field_consultant_firm_er' => array('fldname'=>'ConsultantFirmID'),
          'field_consultant_contact_er' => array('fldname'=>'ConsultantContactID'),
        ),
        'collection' => array(
          'field_manager_history' => array(
            'multiplier' => array(
              'field_manager_firm_er' => array('fldname'=>'FirmsHired', 'handler'=>'comma-delimited-er'),
            ),
          ),
          'sets' => array(
            array(
              'fields' => array(
                'default' => array(
                  'field_amount' => array('fldname'=>'FirmsHiredAmount'),
                ),
                'comma-delimited-delta-default' => array(
                  'field_amount' => array('fldname'=>'FirmsHiredAmount'),
                ),
                'comma-delimited-er' => array(
                  'field_manager_er' => array('fldname'=>'FirmHiredAmount'),
                ),
              ),
            ),
          ),
          'field_plan_size_history' => array(
            'sets' => array(
              array(
                'fields' => array(
                  'default' => array(
                    'field_plan_size' => array('fldname'=>'FundSize'),
                  ),
                  'date2timestamp' => array(
                    'field_date' => array('fldname'=>'FundAsOfDate'),
                  ),
                ),
              ),
            ),              
          ),
          'field_mandate_notes' => array(
            'sets' => array(
              array(
                'fields' => array(
                  'note-comment-to-note' => array(),
                  'note-history-to-note' => array(),
                ),
              ),
              array(
                'oldtable' => 'tblmandatecomments',
                'fields' => array(
                  'note-comments-to-note' => array(),
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );
// 242 Matt | 260 Gar SourceID just make UID 1
// gar guymoso@Yahoo.com matt matt mmccue@fin-news.com

  $nodeMapArr = array(
    $nm_p, 
    $nm_cc,
    $nm_mc,
    $nm_cf,
    $nm_co,
    $nm_mf,
    $nm_pc, 
    $nm_m  
  );
  $nodeMapArr2 = array(
    $nm_cf,
    $nm_co,
    $nm_mf,
    $nm_p, 
    $nm_m, 
    $nm_contact,
  );

  $termMap = array(
    'Inactive' => array(
      'values' => array('0' => 'Inactive', '1' => 'Active'),
      'oldfldname' => 'Inactive',
      'oldterms' => array(),
      'newvoc' => '5',
      'newterms' => array(),
    ),
    'AssetClassID' => array(
      'table' => 'tblassetclasses',
      'oldfldname' => 'AssetClassID',
      'termfield' => 'AssetClassName',
      'oldterms' => array(),
      'newvoc' => '9',
      'newterms' => array(),
    ),
    'ClientTypeID' => array(
      'table' => 'tblclienttypes',
      'oldfldname' => 'ClientTypeID',
      'termfield' => 'ClientTypeName',
      'newvoc' => '8',
      'newterms' => array(),
    ),
    'ConsultantTypeID' => array(
      'table' => 'tblconsultanttypes',
      'oldfldname' => 'ConsultantTypeID',
      'termfield' => 'ConsultantTypeName',
      'oldterms' => array(),
      'newvoc' => '4',
      'newterms' => array(),
    ),
    'ConsultantOfficeID' => array(
      'table' => 'tblconsultantoffices',
      'oldfldname' => 'ConsultantOfficeID',      
      'termfield' => 'ConsultantOfficeName',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
    'CurrencyID' => array(
      'table' => 'tblcurrency',
      'oldfldname' => 'CurrencyID',
      'termfield' => 'FullName',
      'oldterms' => array(),
      'newvoc' => '11',
      'newterms' => array(),
    ),
    'DatabasesUsedID' => array(
      'table' => 'tbldatabasesused',
      'oldfldname' => 'DatabasesUsedID',
      'termfield' => 'DatabasesUsedName',
      'oldterms' => array(),
      'newvoc' => '10',
      'newterms' => array(),
    ),
    'FundTypeID' => array(
      'table' => 'tblfundtypes',
      'oldfldname' => 'FundTypeID',
      'termfield' => 'FundType',
      'oldterms' => array(),
      'newvoc' => '12',
      'newterms' => array(),
    ),
    'GeographicID' => array(
      'table' => 'tblgeographic',
      'oldfldname' => 'GeographicID',
      'termfield' => 'GeographicName',
      'oldterms' => array(),
      'newvoc' => '16',
      'newterms' => array(),
    ),
    'MajorStyleID' => array(
      'table' => 'tblmajorstyles',
      'oldfldname' => 'MajorStyleID',
      'termfield' => 'MajorStyle',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'MinorStyleID' => array(
      'table' => 'tblminorstyles',
      'oldfldname' => 'MinorStyleID',
      'termfield' => 'MinorStyle',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'OfficeType' => array(
      'values' => array('0'=>'Main', '1'=>'Branch'),
      'oldfldname' => 'OfficeType',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
    'PlacementPolicy' => array(
      'table' => 'tblplacementpolicies',
      'oldfldname' => 'PlacementPolicy',
      'termfield' => 'PlacementPolicyName',
      'oldterms' => array(),
      'newvoc' => '14',
      'newterms' => array(),
    ),
    'SourceID' => array(
      'table' => 'tblsources',
      'oldfldname' => 'SourceID',
      'termfield' => 'Source',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'oldtaxonomy' => array(
      'newterms' => array(),
      'terms' => array(),
    ),
  );
/*
    'oldtaxonomy' => array(
      'termfield' => 'Ref',
      'terms' => array(),
    ),
*/

  ini_set('max_execution_time', 3600000);

  // $termMap passed in by reference, fleshed out
  _fin_migrate_prep_terms($termMap);

  // do the 2 node steps here
  $context['message'] = "NODE TRANSFER STEP #1 - build skeletal nodes not already built";
  _fin_migrate_do_node_step1($nodeMapArr, $termMap, $context);
  $context['message'] = "NODE TRANSFER STEP #2 flesh out nodes not already fleshed out";
  _fin_migrate_do_node_step2($nodeMapArr, $termMap, $context);
}
  
//function _fin_migrate_do_node_step1($nodeMapArr, $termMap, &$context) {
function _fin_migrate_do_node_step1(&$context) {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit','1024M');

//die("At start of step1");

  // Get Parameters
  $nodeMapArr = _get_nodemaps('step1');

  $movement = 0;
  $howManyMovements = count($nodeMapArr);
  foreach ($nodeMapArr as $mapArr) {
    foreach ($mapArr as $pseudonym => $map) {
      $movement++;
      $context['message'] = "Step (1/2) Movement (".$movement."/".$howManyMovements.") Moving ".$pseudonym;

      //if this is resuming, grab current old new map
      $oldNew = array();
      $newOld = array();
      $variable = 'fin-migrate-node';
      $oldNews = _fin_migrate_get_best_map($variable);
      if ($oldNews) {
        $oldNew = unserialize($oldNews['oldnew']);
        $newOld = unserialize($oldNews['newold']);
      }

$message = "START grab newold: ".print_r($newOld,true)."<br><br>Oldnew: ".print_r($oldNew,true);
watchdog('DEBUG77', $message, array(), WATCHDOG_INFO);


      $params = $map['params'];
      $table = $params['oldtable'];
      $dst = $params['dst'];
      $pKeyName = $params['oldkeyfldname'];    
      $bundle = '';
      if (isset($params['bundle'])) {
        $bundle = $params['bundle'];
      }

      $checkName = FALSE;
      $nameNids = array();
      $multiplesTotal = FALSE;
      if (isset($params['checkname'])) {
        $nameFldName = $params['checkname']['fldname'];
        $nameNids = unserialize(variable_get('fin-migrate-contact-contactnames'));
        $multiplesTotal = unserialize(variable_get('fin-migrate-contact-contactnames_total'));
        if (!$nameNids) {
          $sql = "SELECT COUNT(*) AS cnt, ".$nameFldName." AS name FROM {".$table."} WHERE ".$nameFldName." <> '' GROUP BY ".$nameFldName." HAVING count( ".$nameFldName." ) >1";
          db_set_active('legacy');
          $res = db_query($sql);
          db_set_active();
          if ($res) {
            $multiplesTotal = 0;
            foreach ($res as $rw) {
              $name = $rw->name;
              $cnt = $rw->cnt-1;
              $multiplesTotal += $cnt-1;
              $nameNids[$name] = array(
                'cnt' => $cnt, 
                'hits' => 0,
                 'nid' => 0
              );
            }
            variable_set('fin-migrate-contact-contactnames', serialize($nameNids));          
            variable_set('fin-migrate-contact-contactnames_total', serialize($multiplesTotal));          
          }
        }
        $checkName = TRUE;
      }
      // see what ids to draw from a table
      db_set_active('legacy');
      $sql = "select ".$pKeyName." from {".$table."}";
      $result = db_query($sql);
      db_set_active();
      // oids are all old keys in source table, noids keys we saved
      // We will use array_diff to tell us what ids have not been done
      // yet.
      $oids = array();
      $res = array();

      foreach ($result as $row) {
        $res[$row->$pKeyName] = $row->$pKeyName;
      }
      if ($res) {
        $oids = array_values($res);
      }
      $noids = array();
      if (isset($newOld[$pseudonym])) {
        //$noids = array_values($newOld[$pseudonym]);
        //$raw = array_values($newOld[$pseudonym]);
        $raw = $newOld[$pseudonym];
$message = "NEWOLD ".$pseudonym."<br><br>".print_r($raw,true);
watchdog('DEBUG44', $message, array(), WATCHDOG_INFO);

        $nid2ids = array();
        foreach ($raw as $nid => $more) {
          foreach ($more as $delta=>$yetmore) {
            foreach ($yetmore as $id) {
              $noids[$id] = $id;
              $nid2ids[$nid][] = $id;
            }
          }
        }
      }
      $stuffToMove = TRUE;
      $partial = FALSE;
      if ($noids) {
        $getids = array_diff($oids, $noids);

        $message = "Current Nodes-to-ids: ".print_r($nid2ids,true)."<br><br>IDs to Process: ".print_r($retids,true)."<br><br>Already Done: ".print_r($noids,true);
        watchdog('FIN_MIGRATE_'.$pseudonym.'_RESUME', $message, array(), WATCHDOG_INFO);

        if (!$getids) {
          $stuffToMove = FALSE;
        } else {
          $partial = TRUE;
        }
      }
      $sql = '';
      if ($partial && $stuffToMove) {
        $sql = "select * from {".$table."} where ".$pKeyName." in (".implode(',',$getids).")";
      } else if (!$partial && $stuffToMove) {
        // we are starting fresh with a table, use simpler SQL
        $getids = array_keys($oids);
        $sql = "select * from {".$table."}";
      }

      if ($stuffToMove) {
        $duplicates = array();
        if ($duplicates = unserialize(variable_get('fin-migrate-step1-duplicates'))) {
        }
        db_set_active('legacy');
        $result = db_query($sql);
        db_set_active();

        if ($result) {
          $rowCount = 0;
          if ($getids) {
            $howManyRows = count($getids);
          } else {
            $howManyRows = count($oids)-count($noids);
          }
          $motion = "Moving ";
          if ($partial) {
            $motion = "Resuming ";
          }
          $message = $motion . $pseudonym." SOURCE (".count($oids).") | MOVED: ".count($noids)." | MOVING: ".$howManyRows;
          watchdog('FIN_MIGRATE_NODE-'.$pseudonym, $message, array(), WATCHDOG_INFO);
          $prefix = "Step (1/2) Movement (".$movement."/".$howManyMovements.") ".$message;
          $context['message'] = $prefix;

          $rowCount = 0;
          $start = time();
          
          $contactMatches = array();
          $nodesCreated = 0;
          foreach ($result as $row) {

if ($rowCount>7000) {
  $stop = time();
  $elapsed = $stop-$start;
///////////////////////////////////////
  if ($checkName) {
            $totalNodesToCreate = count($oids);
            $howManyContacts = $howManyRows;
            $howManyMultiples = count($nameNids);
            $howManyJobs = $multiplesTotal;
            $howManyNodesToCreate = $howManyContacts - $howManyJobs + $howManyMultiples; 
            $howManyNodesCreated = count($noids) + $nodesCreated;
            
            $certified = "CERTIFIED";
            if ($totalNodesToCreate <> $howManyNodesCreated && $howManyNodesToCreate<1) {
              $certified = "NO";
            } else {
              $certified = "IN PROGRESS";
            }
            foreach ($nameNids as $data) {
              $cnt = $data['cnt'];
              $hits = $data['hits'];
              if ($cnt <> $hits) {
                $certified = "NO";
              }
            }
            $message = t("CERTIFIED? %certified<br>%multiples %type have %jobs jobs. %totalcontacts Contacts. %totnodes Total. %estnodes Nodes to create. %actnodes Nodes Created<br /><br />Names & NIDS already processed List at start:<br>%list.<br><br>Updated Map: %newlist", array(
                '%multiples' => $howManyMultiples,
                '%jobs' => $multiplesTotal,
                '%totalcontacts' => $howManyContacts,
                '%totnodes' => $totalNodesToCreate,
                '%estnodes' => $howManyNodesToCreate,
                '%actnodes' => $howManyNodesCreated,
                '%list' => print_r($nameNids,true),
                '%newlist' => print_r($newOld,true),
                '%certified' => $certified,
                '%type' => $pseudonym,
              )
            );
            watchdog('CERTICATION '.$pseudonym.' Node Count ['.$certified.']', $message, array(), WATCHDOG_INFO);

            $message = "NEWOLD: ".print_r($newOld,true);
            watchdog('FIN_MIGRATE_STEP1', $message, array(), WATCHDOG_INFO);
} else {
            $totalNodesToCreate = count($oids);
            $howManyNodesCreated = count($noids) + $nodesCreated;
            $howManyNodesToCreate = $totalNodesToCreate-$howManyNodesCreated;
            
            $certified = "CERTIFIED";
            if ($totalNodesToCreate <> $howManyNodesCreated && $howManyNodesToCreate<1) {
              $certified = "NO";
            } else {
              $certified = "IN PROGRESS";
            }
            $message = t("CERTIFIED? %certified<br>%totnodes %type total to create. %estnodes Nodes to go. %actnodes Nodes just Created<br /><br />Saved IDs already processed at start:<br>%list.<br><br>Updated Map saved: %newlist<br><br>", array(
                '%totnodes' => $totalNodesToCreate,
                '%estnodes' => $howManyNodesToCreate,
                '%actnodes' => $howManyNodesCreated,
                '%list' => print_r($noids,true),
                '%newlist' => print_r($newOld,true),
                '%certified' => $certified,
                '%type' => $pseudonym,
              )
            );
            watchdog('CERTICATION '.$pseudonym.' Node Count ['.$certified.']', $message, array(), WATCHDOG_INFO);

            $message = "NEWOLD: ".print_r($newOld,true);
            watchdog('FIN_MIGRATE_STEP1', $message, array(), WATCHDOG_INFO);

}
//////////////////////////////////
    die("Elapsed time: ".$elapsed." Seconds. Count: ".$rowCount."-Step1 - Another 6000 complete, start next");
}

            $rowCount++;
            $context['progress'] = (int) ($rowCount/$howManyRows)*100;
            $context['message'] = 'Movement ('.$movement.'/'.$howManyMovements.') gMoving '.$pseudonym.'... Row ('.$rowCount.'/'.$howManyRows.')...';
            $context['progress'] = ($rowCount/$howManyRows)*100;

            $id = $row->$pKeyName;
            $nid = 0;

            // are we setting up contacts? Does this contact-by-email-address exist?
            if ($checkName) {
              $contactName = $row->{$nameFldName};
              if (isset($nameNids[$contactName])) {
                $nid = $nameNids[$contactName]['nid'];
                if ($nid) {
                  $message = "Contact exist. ".$pseudonym." Name ".$contactName." Update NID: ".$nid." | ID: ".$id;
                  watchdog('FIN_MIGRATE_NODE_CONTACT_NAME_MULTIPLE', $message, array(), WATCHDOG_INFO);
                  $contactMatches[] = '"'.$contactName.'", "'.$id.'", "'.$nid.'"';
              
                  $duplicates[$nid]['name'][$contactName][$id] = array(
                    'id' => $id,
                    'nid' => $nid,
                    'name' => $contactName,
                    'type' => $dst,
                    'bundle' => $bundle,
                  );
                  variable_set('fin-migrate-step1-duplicates', serialize($duplicates));
                }
              }
            }
            if (!$nid) {
              $createdMsg = '';
              $created = strtotime($row->CreatedOn);
              $changed = strtotime($row->UpdatedOn);
              if ($created<0 or !is_numeric($created)) {
                $bad = $created;
                $created = $changed;
                if ($created<0 or !is_numeric($created)) {  
                  $bad2 = $created;
                  $created = time();
                  $changed = $created;
                  $createdMsg = 'Type: '.$dst.' Movement: '.$pseudonym.' Email: '.$email.' | '.'Src Created Date ['.$bad.'] bad. So is Changed ['.$bad2.']. Both set to current ['.strtotime($created).']';
                } else {
                  $createdMsg = 'Type: '.$dst.' Movement: '.$pseudonym.' Email: '.$email.' | '.'Src Created Date ['.$bad.'] bad. Assigned Change Date ['.$changed.']';
                }
              } else if ($changed<0 or !is_numeric($created)) {
                $bad = $changed;
                $changed = $created;
                $createdMsg = 'Type: '.$dst.' Movement: '.$pseudonym.' Email: '.$email.' | '.'Src Changed Date ['.$bad.'] bad. Assigned Created Date ['.$created.']';
              }
              
              $values = array(
                'title' => $pseudonym ."-".$id,
                'type' => $dst,
                'uid' => 1,
                'status' => 1,
                'promote' => 0,
                'created' => $created,
                'changed' => $changed,
              );
              $entity = entity_create('node', $values);
              $n_wrapper = entity_metadata_wrapper('node', $entity);
              $n_wrapper->save();
              $nid = (int) $n_wrapper->getidentifier();
              $nodesCreated++;

              if ($checkName) {
                if (isset($nameNids[$contactName])) {
                  $nameNids[$contactName]['nid'] = $nid;
                  $nameNids[$contactName]['hits']++;
                  variable_set('fin-migrate-contact-contactnames', serialize($nameNids));
                  $message = "Contact Node (".$nid.") created for Multiple Contact ".$contactName;
                  watchdog('FIN_MIGRATE_CONTACT_MULTIPLES', $message, array(), WATCHDOG_INFO);
                }
              }
              entity_save('node', $entity);
              $nid = $entity->nid;
/*
              if ($createdMsg) {
                $createdMsg .= ' ID: '.$id.' NID: '.$nid.' ';
                watchdog('FIN_MIGRATE_NODE_'.$pseudonym, $createdMsg, array(), WATCHDOG_WARNING);
              }
*/
            } // if not nid

$message = "Record Done. ID: ".$id." | NID: ".$nid." | #".$nodesCreated;
watchdog('FIN_MIGRATE_NODE_STEP1_'.$pseudonym.'_ROW', $message, array(), WATCHDOG_INFO);

            if ($id && $nid) {
              $oldNew[$pseudonym][$id][$nid] = $nid;
              //012816
              //Because we consolidate contacts, new may link to multi old records
              //$newOld[$pseudonym][$nid][$id] = $id;
              $newOld[$pseudonym][$nid][][$id] = $id;
              _fin_migrate_update_map($variable, $oldNew, $newOld);
         
        /* PLW Deprecate 012616
              if ($checkName) {
                if ($contactName) {
                  $nameNids[$contactName] = $nid;
                  variable_set('fin-migrate-contact-contactnames', serialize($nameNids));
                }
              }
        */
            } else {
              $message = "Oops, for some reason, node not successfully created | id: ".$id." | nid: ".$nid." | Data: ".print_r($row,true);
              watchdog('FIN_MIGRATE_NODE_STEP1', $message, array(), WATCHDOG_WARNING);
        
            } // if row produced ids
          } // each row

          //if ($dst=="contact") {
          if ($checkName) {
            $totalNodesToCreate = count($oids);
            $howManyContacts = $howManyRows;
            $howManyMultiples = count($nameNids);
            $howManyJobs = $multiplesTotal;
            $howManyNodesToCreate = $howManyContacts - $howManyJobs + $howManyMultiples; 
            $howManyNodesCreated = count($noids) + $nodesCreated;
            
            $certified = "CERTIFIED";
            if ($totalNodesToCreate <> $howManyNodesCreated && $howManyNodesToCreate<1) {
              $certified = "NO";
            }
            foreach ($nameNids as $data) {
              $cnt = $data['cnt'];
              $hits = $data['hits'];
              if ($cnt <> $hits) {
                $certified = "NO";
              }
            }
            $message = t("CERTIFIED? %certified<br>%multiples %type have %jobs jobs. %totalcontacts Contacts. %totnodes Total. %estnodes Nodes to create. %actnodes Nodes Created<br /><br />Names NIDS List:<br>%list.<br><br>Updated Map %newlist ", array(
                '%multiples' => $howManyMultiples,
                '%jobs' => $howManyJobs,
                '%totalcontacts' => $howManyContacts,
                '%totnodes' => $totalNodesToCreate,
                '%estnodes' => $howManyNodesToCreate,
                '%actnodes' => $howManyNodesCreated,
                '%list' => print_r($nameNids,true),
                '%newlist' => print_r($newOld,true),
                '%type' => $pseudonym,                
                '%certified' => $certified,
              )
            );
            watchdog('CERTICATION '.$pseudonym.' Node Count ['.$certified.']', $message, array(), WATCHDOG_INFO);

            $howMany = count($duplicates);
            $message = $howMany . " D5 Users with email or phones already migrated.LIST: ".print_r($duplicates,true);
            watchdog('FIN_MIGRATE_NODE_CONTACT_RECYCLE', $message, array(), WATCHDOG_INFO);
          } else {
            $totalNodesToCreate = count($oids);
            $howManyNodesCreated = count($noids) + $nodesCreated;
            $howManyNodesToCreate = $totalNodesToCreate-$howManyNodesCreated;

            $certified = "CERTIFIED";
            if ($totalNodesToCreate <> $howManyNodesCreated && $howManyNodesToCreate<1) {
              $certified = "NO";
            } else {
              $certified = "IN PROGRESS";
            }
            $message = t("CERTIFIED? %certified<br>%totnodes %type total to create. %estnodes Nodes to go. %actnodes Nodes just Created<br /><br />Names & NIDS already processed list at start:<br>%list. <br><br>Updated Map: %newlist", array(
                '%totnodes' => $totalNodesToCreate,
                '%estnodes' => $howManyNodesToCreate,
                '%actnodes' => $howManyNodesCreated,
                '%list' => print_r($nameNids,true),
                '%newlist' => print_r($newOld,true),
                '%certified' => $certified,
                '%type' => $pseudonym,
              )
            );
            watchdog('CERTICATION '.$pseudonym.' Node Count ['.$certified.']', $message, array(), WATCHDOG_INFO);

            $message = "NEWOLD: ".print_r($newOld,true);
            watchdog('FIN_MIGRATE_STEP1', $message, array(), WATCHDOG_INFO);
          }
        } // if result
      }
    } // foreach pseudonym
  }
}

//function _fin_migrate_do_node_step2($nodeMapArr, $termMap, &$context) {
//function _fin_migrate_do_node_step2($nodeMapArr2, $termMap, &$context) {
function _fin_migrate_do_node_step2(&$context) {
  ini_set('max_execution_time', 3600000);
  ini_set('memory_limit','1024M');

  // calculate employment dates.

  // Get Parameters
  $nodeMapArr = _get_nodemaps('step2');

  // Array containing old, new taxonomies
  $termMap = array(
    'Inactive' => array(
      'values' => array('0' => 'Inactive', '1' => 'Active'),
      'oldfldname' => 'Inactive',
      'oldterms' => array(),
      'newvoc' => '5',
      'newterms' => array(),
    ),
    'AssetClassID' => array(
      'table' => 'tblassetclasses',
      'oldfldname' => 'AssetClassID',
      'termfield' => 'AssetClassName',
      'oldterms' => array(),
      'newvoc' => '9',
      'newterms' => array(),
    ),
    'ClientTypeID' => array(
      'table' => 'tblclienttypes',
      'oldfldname' => 'ClientTypeID',
      'termfield' => 'ClientTypeName',
      'newvoc' => '8',
      'newterms' => array(),
    ),
    'ConsultantTypeID' => array(
      'table' => 'tblconsultanttypes',
      'oldfldname' => 'ConsultantTypeID',
      'termfield' => 'ConsultantTypeName',
      'oldterms' => array(),
      'newvoc' => '4',
      'newterms' => array(),
    ),
    'ConsultantOfficeID' => array(
      'table' => 'tblconsultantoffices',
      'oldfldname' => 'ConsultantOfficeID',      
      'termfield' => 'ConsultantOfficeName',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
    'CurrencyID' => array(
      'table' => 'tblcurrency',
      'oldfldname' => 'CurrencyID',
      'termfield' => 'FullName',
      'oldterms' => array(),
      'newvoc' => '11',
      'newterms' => array(),
    ),
    'DatabasesUsedID' => array(
      'table' => 'tbldatabasesused',
      'oldfldname' => 'DatabasesUsedID',
      'termfield' => 'DatabasesUsedName',
      'oldterms' => array(),
      'newvoc' => '10',
      'newterms' => array(),
    ),
    'FundTypeID' => array(
      'table' => 'tblfundtypes',
      'oldfldname' => 'FundTypeID',
      'termfield' => 'FundType',
      'oldterms' => array(),
      'newvoc' => '12',
      'newterms' => array(),
    ),
    'GeographicID' => array(
      'table' => 'tblgeographic',
      'oldfldname' => 'GeographicID',
      'termfield' => 'GeographicName',
      'oldterms' => array(),
      'newvoc' => '16',
      'newterms' => array(),
    ),
    'MajorStyleID' => array(
      'table' => 'tblmajorstyles',
      'oldfldname' => 'MajorStyleID',
      'termfield' => 'MajorStyle',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'MinorStyleID' => array(
      'table' => 'tblminorstyles',
      'oldfldname' => 'MinorStyleID',
      'termfield' => 'MinorStyle',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'OfficeType' => array(
      'values' => array('0'=>'Main', '1'=>'Branch'),
      'oldfldname' => 'OfficeType',
      'oldterms' => array(),
      'newvoc' => '3',
      'newterms' => array(),
    ),
    'PlacementPolicy' => array(
      'table' => 'tblplacementpolicies',
      'oldfldname' => 'PlacementPolicy',
      'termfield' => 'PlacementPolicyName',
      'oldterms' => array(),
      'newvoc' => '14',
      'newterms' => array(),
    ),
    'SourceID' => array(
      'table' => 'tblsources',
      'oldfldname' => 'SourceID',
      'termfield' => 'Source',
      'oldterms' => array(),
      'newvoc' => '',
      'newterms' => array(),
    ),
    'oldtaxonomy' => array(
      'newterms' => array(),
      'terms' => array(),
    ),
  );
  // END TERM MAP ARRAY

  $movement = 0;
  $howManyMovements = count($nodeMapArr);
  foreach ($nodeMapArr as $mapArr) {
    foreach ($mapArr as $pseudonym => $map) {
      $movement++;
      $context['message'] = "Step (2/2) Movement (".$movement."/".$howManyMovements.") Moving ".$pseudonym;

      $params = $map['params'];
      $table = $params['oldtable'];
      $dst = $params['dst'];
      $pKeyName = $params['oldkeyfldname'];    

      $oldNew_ref = array();
      $newOld_ref = array();
      $varname = 'fin-migrate-node';
      $oldNews_ref = _fin_migrate_get_best_map($varname);
      // we need the below in this function
      $oldNew_ref = unserialize($oldNews_ref['oldnew']);
      $newOld_ref = unserialize($oldNews_ref['newold']);

      //if this is resuming, grab current old new map
      $oldNew = array();
      $newOld = array();
      $variable = 'fin-migrate-done';
      $oldNews = _fin_migrate_get_best_map($variable);
      if ($oldNews) {
        $oldNew = unserialize($oldNews['oldnew']);
        $newOld = unserialize($oldNews['newold']);
      }
      
      // Contacts require completely different handling
      if ($dst=='contact') {
        _fin_migrate_do_node_step2a($pseudonym, $map, $termMap, $newOld);
      } else {
        // see what ids to draw from a table
        db_set_active('legacy');
        $sql = "select ".$pKeyName." from {".$table."}";
        $result = db_query($sql);
        db_set_active();
        // oids are all old keys in source table, noids keys we saved
        // We will use array_diff to tell us what ids have not been done
        // yet.
        $oids = array();
        $res = array();
        foreach ($result as $row) {
          $res[$row->$pKeyName] = $row->$pKeyName;
        } 
        if ($res) {
          $oids = array_values($res);
        }
        $noids = array();
        if (isset($newOld[$pseudonym])) {
          $noids = array_values($newOld[$pseudonym]);
        }
        $stuffToMove = TRUE;
        $partial = FALSE;
        if ($noids) {
          $getids = array_diff($oids, $noids);
          if (!$getids) {
            $stuffToMove = FALSE;
          } else {
            $partial = TRUE;
          }
        }
        $sql = '';
        if ($partial && $stuffToMove) {
          $sql = "select * from {".$table."} where ".$pKeyName." in (".implode(',',$getids).")";
        } else if (!$partial && $stuffToMove) {
          // we are starting fresh with a table, use simpler SQL
          $getids = array_keys($oids);
          $sql = "select * from {".$table."}";
        }
        if ($stuffToMove) {
          db_set_active('legacy');
          $result = db_query($sql);
          db_set_active();
        }

        if ($result) {
          $rowCount = 0;
          if ($getids) {
            $howManyRows = count($getids);
          } else {
            $howManyRows = count($oids)-count($noids);
          }
          $motion = "Moving ";
          if ($partial) {
            $motion = "Resuming ";
          }
          $message = "Step (2/2) ".$motion." ".$pseudonym." SOURCE (".count($oids).") | EDITED: ".count($noids)." | EDIING: ".$howManyRows;
          watchdog('FIN_MIGRATE_NODE-'.$pseudonym, $message, array(), WATCHDOG_INFO);
          $prefix = "Step (1/2) Movement (".$movement."/".$howManyMovements.") ".$message;
          $context['message'] = $prefix;

          $rowCount = 0;
          $start = time();
          foreach ($result as $row) {

if ($rowCount>10) {
  $stop = time();
  $elapsed = $stop-$start;
  die("Elapsed time: ".$elapsed." Seconds. Count: ".$rowCount."-Step2 - Another 6000 complete, start next");
}
            $rowCount++;
            $context['progress'] = (int) ($rowCount/$howManyRows)*100;
            $context['message'] = 'Movement ('.$movement.'/'.$howManyMovements.') gMoving '.$pseudonym.'... Row ('.$rowCount.'/'.$howManyRows.')...';
            $context['progress'] = ($rowCount/$howManyRows)*100;
            $id = (int) $row->$pKeyName;
            $nid = (int) $oldNew_ref[$pseudonym][$id];

//debugBrrreak();

            if ($id && $nid) {
              // The entity is now created, but we have not yet simplified use of it.
              // Now create an entity_metadata_wrapper around the new node entity
              // to make getting and setting values easier
              
              $entity = entity_load('node', array($nid));              
              if (!$entity) {
                $message = "ENTITY ID: ".$id." NID: ".$nid." NOT loaded. Element: ".print_r($entity,true)."--";
                watchdog('FIN_MIGRATE_NODE_'.$pseudonym.'-STEP 2', $message, array(), WATCHDOG_ERROR);
              }
              //$node = node_load(array($nid));
//debugBrrreak();
              //$entity_raw = entity_load('node', array($nid));
              //$entity = $entity_raw[$nid];                            
              $node = node_load($nid);
              $entity = $node;
              $wrapper = entity_metadata_wrapper('node', $node);
              //$wrapper = entity_metadata_wrapper('node', array($entity));
//debugBrrreak();
              //_fin_migrate_handler_system($map['system'], $row, $node, $termMap);
              _fin_migrate_handler_system($map['system'], $row, $wrapper, $entity, $termMap);
              //_fin_migrate_handler_system($map['system'], $row, $wrapper, $node, $termMap);

              $wrapper->save();

//debugBrrreak();

              // currently we only have fields section to process
              $fields = $map['fields'];
              _fin_migrate_process_fields($fields, $row, $wrapper, $entity, $termMap, $pKeyName, $id);

              $wrapper->save();

              $oldNew[$pseudonym][$id] = $nid;
              $newOld[$pseudonym][$nid] = $id;
              _fin_migrate_update_map($variable, $oldNew, $newOld);
            } else {
              $message = "Oops, for some reason, node not successfully created | id: ".$id." | nid: ".$nid." | Data: ".print_r($row,true);
              watchdog('FIN_MIGRATE_NODE_STEP2', $message, array(), WATCHDOG_WARNING);
            } // if row produced ids
          } // each row
        } // if result
      }
    }
  }
}

/*
 * Special Function to handle Contacts
 */
function _fin_migrate_do_node_step2a($pseudonym, $map, $termMap, $oldNew) {

}
/***
function _fin_migrate_do_node_step2a($pseudonym, $map, $termMap, $oldNew) {
  global $$global_empDates;
  $global_empDates = _fin_migrate_prep_employment_dates();
  $global_empDates = $arrs['jobs'];
  $result = $arrs['res'];

        if ($result) {
          $rowCount = 0;
          if ($getids) {
            $howManyRows = count($getids);
          } else {
            $howManyRows = count($oids)-count($noids);
          }
          $motion = "Moving ";
          if ($partial) {
            $motion = "Resuming ";
          }
          $message = "Step (2/2) ".$motion." ".$pseudonym." SOURCE (".count($oids).") | EDITED: ".count($noids)." | EDIING: ".$howManyRows;
          watchdog('FIN_MIGRATE_NODE-'.$pseudonym, $message, array(), WATCHDOG_INFO);
          $prefix = "Step (1/2) Movement (".$movement."/".$howManyMovements.") ".$message;
          $context['message'] = $prefix;

          $rowCount = 0;
          $start = time();
          foreach ($result as $contactName => $data) {

if ($rowCount>10) {
  $stop = time();
  $elapsed = $stop-$start;
  die("Elapsed time: ".$elapsed." Seconds. Count: ".$rowCount."-Step2 - Another 6000 complete, start next");
}
            $rowCount++;
            $context['progress'] = (int) ($rowCount/$howManyRows)*100;
            $context['message'] = 'Movement ('.$movement.'/'.$howManyMovements.') gMoving '.$pseudonym.'... Row ('.$rowCount.'/'.$howManyRows.')...';
            $context['progress'] = ($rowCount/$howManyRows)*100;
            
            $id = $row['rowid'];
            $tbl = $row['tbl'];
            switch ($tbl) {
              case 'tblconsultantcontacts':
                $pseudonym = 'consultant_contact';
                break;
              case 'tblmanagercontacts':
                $pseudonym = 'manager_contact';
                break;
              case 'tblfundcontactgs':
                $pseudonym = 'plan_contact';
                break;
            }
            $nid = $oldNew[$pseudonym][$id];

            if ($id && $nid) {
              // The entity is now created, but we have not yet simplified use of it.
              // Now create an entity_metadata_wrapper around the new node entity
              // to make getting and setting values easier
              
              $entity = entity_load('node', array($nid));              
              if (!$entity) {
                $message = "ENTITY ID: ".$id." NID: ".$nid." NOT loaded. Element: ".print_r($entity,true)."--";
                watchdog('FIN_MIGRATE_NODE_'.$pseudonym.'-STEP 2', $message, array(), WATCHDOG_ERROR);
              }
              //$node = node_load(array($nid));
//debugBrrreak();
              //$entity_raw = entity_load('node', array($nid));
              //$entity = $entity_raw[$nid];                            
              $node = node_load($nid);
              $entity = $node;
              $wrapper = entity_metadata_wrapper('node', $node);
              //$wrapper = entity_metadata_wrapper('node', array($entity));
//debugBrrreak();
              //_fin_migrate_handler_system($map['system'], $row, $node, $termMap);
              _fin_migrate_handler_system($map['system'], $row, $wrapper, $entity, $termMap);
              //_fin_migrate_handler_system($map['system'], $row, $wrapper, $node, $termMap);

              $wrapper->save();

//debugBrrreak();

              // currently we only have fields section to process
              $fields = $map['fields'];
              _fin_migrate_process_fields($fields, $row, $wrapper, $entity, $termMap, $pKeyName, $id);

              $wrapper->save();

              $oldNew[$pseudonym][$id] = $nid;
              $newOld[$pseudonym][$nid] = $id;
              _fin_migrate_update_map($variable, $oldNew, $newOld);
            } else {
              $message = "Oops, for some reason, node not successfully created | id: ".$id." | nid: ".$nid." | Data: ".print_r($row,true);
              watchdog('FIN_MIGRATE_NODE_STEP2', $message, array(), WATCHDOG_WARNING);
            } // if row produced ids
          } // each row
        } // if result
      }
    }
  }
}
*/

/*
 * Special Function to handle Contacts
 */
/***
function _fin_migrate_do_node_step2a($pseudonym, $map, $termMap) {
  global $global_empDates;
  $global_empDates = _fin_migrate_prep_employment_dates();
  $global_empDates = $arrs['jobs'];
  $result = $arrs['res'];

        if ($result) {
          $rowCount = 0;
          if ($getids) {
            $howManyRows = count($getids);
          } else {
            $howManyRows = count($oids)-count($noids);
          }

          $motion = "Moving ";
          if ($partial) {
            $motion = "Resuming ";
          }

          $rowCount = 0;
          $start = time();
          foreach ($result as $contactName) {

if ($rowCount>10) {
  $stop = time();
  $elapsed = $stop-$start;
  die("Elapsed time: ".$elapsed." Seconds. Count: ".$rowCount."-Step2 - Another 6000 complete, start next");
}
            $rowCount++;
            $context['progress'] = (int) ($rowCount/$howManyRows)*100;
            $context['message'] = 'Movement ('.$movement.'/'.$howManyMovements.') gMoving '.$pseudonym.'... Row ('.$rowCount.'/'.$howManyRows.')...';
            $context['progress'] = ($rowCount/$howManyRows)*100;
            $contactName = $row->ContactName;
            $nid = (int) $oldNew_ref[$pseudonym][$id];

            if ($id && $nid) {
              // The entity is now created, but we have not yet simplified use of it.
              // Now create an entity_metadata_wrapper around the new node entity
              // to make getting and setting values easier
              
              $entity = entity_load('node', array($nid));              
              if (!$entity) {
                $message = "ENTITY ID: ".$id." NID: ".$nid." NOT loaded. Element: ".print_r($entity,true)."--";
                watchdog('FIN_MIGRATE_NODE_'.$pseudonym.'-STEP 2', $message, array(), WATCHDOG_ERROR);
              }
              //$node = node_load(array($nid));
//debugBrrreak();
              //$entity_raw = entity_load('node', array($nid));
              //$entity = $entity_raw[$nid];                            
              $node = node_load($nid);
              $entity = $node;
              $wrapper = entity_metadata_wrapper('node', $node);
              //$wrapper = entity_metadata_wrapper('node', array($entity));
//debugBrrreak();
              //_fin_migrate_handler_system($map['system'], $row, $node, $termMap);
              _fin_migrate_handler_system($map['system'], $row, $wrapper, $entity, $termMap);
              //_fin_migrate_handler_system($map['system'], $row, $wrapper, $node, $termMap);

              $wrapper->save();

//debugBrrreak();

              // currently we only have fields section to process
              $fields = $map['fields'];
              _fin_migrate_process_fields($fields, $row, $wrapper, $entity, $termMap, $pKeyName, $id);

              $wrapper->save();

              $oldNew[$pseudonym][$id] = $nid;
              $newOld[$pseudonym][$nid] = $id;
              _fin_migrate_update_map($variable, $oldNew, $newOld);
            } else {
              $message = "Oops, for some reason, node not successfully created | id: ".$id." | nid: ".$nid." | Data: ".print_r($row,true);
              watchdog('FIN_MIGRATE_NODE_STEP2', $message, array(), WATCHDOG_WARNING);
            } // if row produced ids
          } // each row
        } // if result


}
***/

/*
 * Helper function to grab data from secondary tables as needed
 * Features:
 *  - Grabs entire secondary tables from old database
 *  - Caches tables for repeated use, especially key tables
 *    Returns only rows related to current parent table movement
 *
 * @parameters 
 *  $srcTable - Secondary table to read or pull from cache
 *  $primeKeyFldName - Name of parent table prime, or this table foreign key
 *    We use this for indexing the cached array, and for selecting data we need
 *  $primeKey - the actual maching value we are looking for
 * @returns
 *  $res - an array of query resultsets, fetched
 *  
 */
function _fin_migrate_get_best_additional_table_data($srcTable, $primeKeyFldName, $primeKey) {

if ($srcTable=='tblfundconsultants') {
    //debugBreak();    
}

  $res = array();
  $tabls = unserialize(variable_get('fin-migrate-tabl'));
  if (!isset($tabls[$srcTable])) {
    if (!$tabls[$srcTable]) {
      // we cannot use indata here, we have to selectively read another table
      $sql = "select * from ".$srcTable;
      db_set_active('legacy');
      $res = db_query($sql);
      db_set_active();

      // as is, res is not useful, we need to index it by oldkeys for quick access later
      //$ref = array();
      $ref = '';
      foreach ($res as $rs) {
        $pk = $rs->$primeKeyFldName; 
        $ref[$pk][] = $rs;
      }
            // save table to the database in case we need it later
      $tabls[$srcTable] = $ref;
      variable_set('fin-migrate-tabl', serialize($tabls));
           
      // we still need the rows pretaining to our current parent data
      $resArray = $ref[$primeKey];
    }
  } else {
    $ind = (int) $primeKey;
    $resArray = $tabls[$srcTable][$primeKey];  }   
  return $resArray;
}
